

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul  5 12:16:31 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,inline
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.45
    88                           ; Generated 16/11/2017 GMT
    89                           ; 
    90                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F25K22 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   123  0000                     
   124                           	psect	idataBANK0
   125  0027C0                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for __esp8266_waitResponse@F7014
   129  0027C0  F5                 	db	low STR_5
   130  0027C1  7F                 	db	high STR_5
   131  0027C2  C5                 	db	low STR_29
   132  0027C3  7F                 	db	high STR_29
   133  0027C4  D5                 	db	low STR_30
   134  0027C5  7F                 	db	high STR_30
   135  0027C6  98                 	db	low STR_31
   136  0027C7  7F                 	db	high STR_31
   137  0027C8  AB                 	db	low STR_32
   138  0027C9  7F                 	db	high STR_32
   139  0027CA  B2                 	db	low STR_33
   140  0027CB  7F                 	db	high STR_33
   141                           
   142                           ;initializer for GPS_read_data@F7063
   143  0027CC  64                 	db	100
   144  0027CD  6F                 	db	111
   145  0027CE  74                 	db	116
   146  0027CF  72                 	db	114
   147  0027D0  65                 	db	101
   148  0027D1  73                 	db	115
   149  0027D2  65                 	db	101
   150  0027D3  74                 	db	116
   151  0027D4  00                 	db	0
   152                           
   153                           ;initializer for GPS_read_data@F7061
   154  0027D5  44                 	db	68
   155  0027D6  61                 	db	97
   156  0027D7  74                 	db	116
   157  0027D8  61                 	db	97
   158  0027D9  62                 	db	98
   159  0027DA  75                 	db	117
   160  0027DB  66                 	db	102
   161  0027DC  20                 	db	32
   162  0027DD  00                 	db	0
   163                           
   164                           ;initializer for GPS_read_data@F7067
   165  0027DE  47                 	db	71
   166  0027DF  45                 	db	69
   167  0027E0  72                 	db	114
   168  0027E1  72                 	db	114
   169  0027E2  6F                 	db	111
   170  0027E3  72                 	db	114
   171  0027E4  00                 	db	0
   172                           
   173                           	psect	idataBANK1
   174  0025A8                     __pidataBANK1:
   175                           	opt stack 0
   176                           
   177                           ;initializer for main@F7015
   178  0025A8  6C                 	db	108
   179  0025A9  61                 	db	97
   180  0025AA  74                 	db	116
   181  0025AB  3A                 	db	58
   182  0025AC  32                 	db	50
   183  0025AD  32                 	db	50
   184  0025AE  2E                 	db	46
   185  0025AF  36                 	db	54
   186  0025B0  32                 	db	50
   187  0025B1  36                 	db	54
   188  0025B2  38                 	db	56
   189  0025B3  35                 	db	53
   190  0025B4  32                 	db	50
   191  0025B5  2C                 	db	44
   192  0025B6  6C                 	db	108
   193  0025B7  6E                 	db	110
   194  0025B8  67                 	db	103
   195  0025B9  3A                 	db	58
   196  0025BA  31                 	db	49
   197  0025BB  32                 	db	50
   198  0025BC  30                 	db	48
   199  0025BD  2E                 	db	46
   200  0025BE  32                 	db	50
   201  0025BF  36                 	db	54
   202  0025C0  36                 	db	54
   203  0025C1  37                 	db	55
   204  0025C2  33                 	db	51
   205  0025C3  34                 	db	52
   206  0025C4  00                 	db	0
   207                           
   208                           ;initializer for GPS_read_data@F7059
   209  0025C5  64                 	db	100
   210  0025C6  6F                 	db	111
   211  0025C7  74                 	db	116
   212  0025C8  43                 	db	67
   213  0025C9  6F                 	db	111
   214  0025CA  75                 	db	117
   215  0025CB  6E                 	db	110
   216  0025CC  74                 	db	116
   217  0025CD  20                 	db	32
   218  0025CE  3D                 	db	61
   219  0025CF  20                 	db	32
   220  0025D0  37                 	db	55
   221  0025D1  00                 	db	0
   222                           
   223                           ;initializer for main@F7013
   224  0025D2  43                 	db	67
   225  0025D3  4F                 	db	79
   226  0025D4  4E                 	db	78
   227  0025D5  4E                 	db	78
   228  0025D6  45                 	db	69
   229  0025D7  43                 	db	67
   230  0025D8  54                 	db	84
   231  0025D9  00                 	db	0
   232                           
   233                           ;initializer for main@F7011
   234  0025DA  68                 	db	104
   235  0025DB  65                 	db	101
   236  0025DC  6C                 	db	108
   237  0025DD  6C                 	db	108
   238  0025DE  6F                 	db	111
   239  0025DF  00                 	db	0
   240                           
   241                           	psect	mediumconst
   242  007E90                     __pmediumconst:
   243                           	opt stack 0
   244  007E90  00                 	db	0
   245  007E91                     _dpowers:
   246                           	opt stack 0
   247  007E91  0001               	dw	1
   248  007E93  0000               	dw	0
   249  007E95  000A               	dw	10
   250  007E97  0000               	dw	0
   251  007E99  0064               	dw	100
   252  007E9B  0000               	dw	0
   253  007E9D  03E8               	dw	1000
   254  007E9F  0000               	dw	0
   255  007EA1  2710               	dw	10000
   256  007EA3  0000               	dw	0
   257  007EA5  86A0               	dw	34464
   258  007EA7  0001               	dw	1
   259  007EA9  4240               	dw	16960
   260  007EAB  000F               	dw	15
   261  007EAD  9680               	dw	38528
   262  007EAF  0098               	dw	152
   263  007EB1  E100               	dw	57600
   264  007EB3  05F5               	dw	1525
   265  007EB5  CA00               	dw	51712
   266  007EB7  3B9A               	dw	15258
   267  007EB9                     __end_of_dpowers:
   268                           	opt stack 0
   269  007EB9                     __powers_:
   270                           	opt stack 0
   271  007EB9  00                 	db	0
   272  007EBA  80                 	db	128
   273  007EBB  3F                 	db	63
   274  007EBC  00                 	db	0
   275  007EBD  20                 	db	32
   276  007EBE  41                 	db	65
   277  007EBF  00                 	db	0
   278  007EC0  C8                 	db	200
   279  007EC1  42                 	db	66
   280  007EC2  00                 	db	0
   281  007EC3  7A                 	db	122
   282  007EC4  44                 	db	68
   283  007EC5  40                 	db	64
   284  007EC6  1C                 	db	28
   285  007EC7  46                 	db	70
   286  007EC8  50                 	db	80
   287  007EC9  C3                 	db	195
   288  007ECA  47                 	db	71
   289  007ECB  24                 	db	36
   290  007ECC  74                 	db	116
   291  007ECD  49                 	db	73
   292  007ECE  97                 	db	151
   293  007ECF  18                 	db	24
   294  007ED0  4B                 	db	75
   295  007ED1  BC                 	db	188
   296  007ED2  BE                 	db	190
   297  007ED3  4C                 	db	76
   298  007ED4  6B                 	db	107
   299  007ED5  6E                 	db	110
   300  007ED6  4E                 	db	78
   301  007ED7  03                 	db	3
   302  007ED8  15                 	db	21
   303  007ED9  50                 	db	80
   304  007EDA  79                 	db	121
   305  007EDB  AD                 	db	173
   306  007EDC  60                 	db	96
   307  007EDD  F3                 	db	243
   308  007EDE  49                 	db	73
   309  007EDF  71                 	db	113
   310  007EE0                     __end_of__powers_:
   311                           	opt stack 0
   312  007EE0                     __npowers_:
   313                           	opt stack 0
   314  007EE0  00                 	db	0
   315  007EE1  80                 	db	128
   316  007EE2  3F                 	db	63
   317  007EE3  CD                 	db	205
   318  007EE4  CC                 	db	204
   319  007EE5  3D                 	db	61
   320  007EE6  D7                 	db	215
   321  007EE7  23                 	db	35
   322  007EE8  3C                 	db	60
   323  007EE9  12                 	db	18
   324  007EEA  83                 	db	131
   325  007EEB  3A                 	db	58
   326  007EEC  B7                 	db	183
   327  007EED  D1                 	db	209
   328  007EEE  38                 	db	56
   329  007EEF  C6                 	db	198
   330  007EF0  27                 	db	39
   331  007EF1  37                 	db	55
   332  007EF2  38                 	db	56
   333  007EF3  86                 	db	134
   334  007EF4  35                 	db	53
   335  007EF5  C0                 	db	192
   336  007EF6  D6                 	db	214
   337  007EF7  33                 	db	51
   338  007EF8  CC                 	db	204
   339  007EF9  2B                 	db	43
   340  007EFA  32                 	db	50
   341  007EFB  70                 	db	112
   342  007EFC  89                 	db	137
   343  007EFD  30                 	db	48
   344  007EFE  E7                 	db	231
   345  007EFF  DB                 	db	219
   346  007F00  2E                 	db	46
   347  007F01  E5                 	db	229
   348  007F02  3C                 	db	60
   349  007F03  1E                 	db	30
   350  007F04  42                 	db	66
   351  007F05  A2                 	db	162
   352  007F06  0D                 	db	13
   353  007F07                     __end_of__npowers_:
   354                           	opt stack 0
   355  007F07                     __esp8266_waitResponse@F7016:
   356                           	opt stack 0
   357  007F07  01                 	db	1
   358  007F08  02                 	db	2
   359  007F09  03                 	db	3
   360  007F0A  04                 	db	4
   361  007F0B  05                 	db	5
   362  007F0C  06                 	db	6
   363  007F0D                     __end_of__esp8266_waitResponse@F7016:
   364                           	opt stack 0
   365  007F0D                     __esp8266_waitResponse@F7012:
   366                           	opt stack 0
   367  007F0D  02                 	db	2
   368  007F0E  05                 	db	5
   369  007F0F  04                 	db	4
   370  007F10  09                 	db	9
   371  007F11  06                 	db	6
   372  007F12  06                 	db	6
   373  007F13                     __end_of__esp8266_waitResponse@F7012:
   374                           	opt stack 0
   375  0000                     _CCPR5H	set	3926
   376  0000                     _CCPR5L	set	3925
   377  0000                     _CCP5CON	set	3924
   378  0000                     _ANSELA	set	3896
   379  0000                     _ANSELB	set	3897
   380  0000                     _ANSELC	set	3898
   381  0000                     _LATAbits	set	3977
   382  0000                     _RCREG1	set	4014
   383  0000                     _RCSTA1bits	set	4011
   384  0000                     _TXREG1	set	4013
   385  0000                     _TXSTA1bits	set	4012
   386  0000                     _SPBRGH1	set	4016
   387  0000                     _SPBRG1	set	4015
   388  0000                     _TXSTA1	set	4012
   389  0000                     _RCSTA1	set	4011
   390  0000                     _BAUDCON1	set	4024
   391  0000                     _PIR1bits	set	3998
   392  0000                     _PIE1bits	set	3997
   393  0000                     _PIR3bits	set	4004
   394  0000                     _RCONbits	set	4048
   395  0000                     _T0CONbits	set	4053
   396  0000                     _T0CON	set	4053
   397  0000                     _TMR0L	set	4054
   398  0000                     _TMR0H	set	4055
   399  0000                     _ADCON0bits	set	4034
   400  0000                     _ADRESH	set	4036
   401  0000                     _ADRESL	set	4035
   402  0000                     _ADCON2	set	4032
   403  0000                     _ADCON1	set	4033
   404  0000                     _ADCON0	set	4034
   405  0000                     _INTCONbits	set	4082
   406  0000                     _INTCON2bits	set	4081
   407  0000                     _WPUB	set	3937
   408  0000                     _TRISC	set	3988
   409  0000                     _TRISB	set	3987
   410  0000                     _TRISA	set	3986
   411  0000                     _LATC	set	3979
   412  0000                     _LATB	set	3978
   413  0000                     _LATA	set	3977
   414  0000                     _RCREG2	set	3956
   415  0000                     _RCSTA2bits	set	3953
   416  0000                     _TXREG2	set	3955
   417  0000                     _TXSTA2bits	set	3954
   418  0000                     _SPBRGH2	set	3958
   419  0000                     _SPBRG2	set	3957
   420  0000                     _TXSTA2	set	3954
   421  0000                     _RCSTA2	set	3953
   422  0000                     _BAUDCON2	set	3952
   423  0000                     _PIE3bits	set	4003
   424  0000                     _OSCTUNE	set	3995
   425  0000                     _OSCCON2	set	4050
   426  0000                     _OSCCON	set	4051
   427  0000                     _PLLRDY	set	32407
   428  007F13                     STR_42:
   429  007F13  61                 	db	97	;'a'
   430  007F14  76                 	db	118	;'v'
   431  007F15  65                 	db	101	;'e'
   432  007F16  72                 	db	114	;'r'
   433  007F17  61                 	db	97	;'a'
   434  007F18  67                 	db	103	;'g'
   435  007F19  65                 	db	101	;'e'
   436  007F1A  70                 	db	112	;'p'
   437  007F1B  6D                 	db	109	;'m'
   438  007F1C  32                 	db	50	;'2'
   439  007F1D  35                 	db	53	;'5'
   440  007F1E  3A                 	db	58	;':'
   441  007F1F  25                 	db	37
   442  007F20  66                 	db	102	;'f'
   443  007F21  2C                 	db	44
   444  007F22  00                 	db	0
   445  007F23  41                 	db	65	;'A'
   446  007F24  54                 	db	84	;'T'
   447  007F25  2B                 	db	43
   448  007F26  43                 	db	67	;'C'
   449  007F27  49                 	db	73	;'I'
   450  007F28  50                 	db	80	;'P'
   451  007F29  53                 	db	83	;'S'
   452  007F2A  54                 	db	84	;'T'
   453  007F2B  41                 	db	65	;'A'
   454  007F2C  52                 	db	82	;'R'
   455  007F2D  54                 	db	84	;'T'
   456  007F2E  3D                 	db	61	;'='
   457  007F2F  22                 	db	34
   458  007F30  00                 	db	0
   459  007F31                     STR_23:
   460  007F31  41                 	db	65	;'A'
   461  007F32  54                 	db	84	;'T'
   462  007F33  2B                 	db	43
   463  007F34  43                 	db	67	;'C'
   464  007F35  49                 	db	73	;'I'
   465  007F36  50                 	db	80	;'P'
   466  007F37  53                 	db	83	;'S'
   467  007F38  45                 	db	69	;'E'
   468  007F39  4E                 	db	78	;'N'
   469  007F3A  44                 	db	68	;'D'
   470  007F3B  3D                 	db	61	;'='
   471  007F3C  30                 	db	48	;'0'
   472  007F3D  2C                 	db	44
   473  007F3E  00                 	db	0
   474  007F3F                     STR_34:
   475  007F3F  41                 	db	65	;'A'
   476  007F40  54                 	db	84	;'T'
   477  007F41  2B                 	db	43
   478  007F42  43                 	db	67	;'C'
   479  007F43  49                 	db	73	;'I'
   480  007F44  50                 	db	80	;'P'
   481  007F45  53                 	db	83	;'S'
   482  007F46  45                 	db	69	;'E'
   483  007F47  52                 	db	82	;'R'
   484  007F48  56                 	db	86	;'V'
   485  007F49  45                 	db	69	;'E'
   486  007F4A  52                 	db	82	;'R'
   487  007F4B  3D                 	db	61	;'='
   488  007F4C  00                 	db	0
   489  007F4D  41                 	db	65	;'A'
   490  007F4E  54                 	db	84	;'T'
   491  007F4F  2B                 	db	43
   492  007F50  43                 	db	67	;'C'
   493  007F51  57                 	db	87	;'W'
   494  007F52  51                 	db	81	;'Q'
   495  007F53  41                 	db	65	;'A'
   496  007F54  50                 	db	80	;'P'
   497  007F55  0D                 	db	13
   498  007F56  0A                 	db	10
   499  007F57  00                 	db	0
   500  007F58                     STR_13:
   501  007F58  41                 	db	65	;'A'
   502  007F59  54                 	db	84	;'T'
   503  007F5A  2B                 	db	43
   504  007F5B  43                 	db	67	;'C'
   505  007F5C  49                 	db	73	;'I'
   506  007F5D  46                 	db	70	;'F'
   507  007F5E  53                 	db	83	;'S'
   508  007F5F  52                 	db	82	;'R'
   509  007F60  0D                 	db	13
   510  007F61  0A                 	db	10
   511  007F62  00                 	db	0
   512  007F63                     STR_8:
   513  007F63  41                 	db	65	;'A'
   514  007F64  54                 	db	84	;'T'
   515  007F65  2B                 	db	43
   516  007F66  43                 	db	67	;'C'
   517  007F67  57                 	db	87	;'W'
   518  007F68  4A                 	db	74	;'J'
   519  007F69  41                 	db	65	;'A'
   520  007F6A  50                 	db	80	;'P'
   521  007F6B  3D                 	db	61	;'='
   522  007F6C  22                 	db	34
   523  007F6D  00                 	db	0
   524  007F6E                     STR_6:
   525  007F6E  41                 	db	65	;'A'
   526  007F6F  54                 	db	84	;'T'
   527  007F70  2B                 	db	43
   528  007F71  43                 	db	67	;'C'
   529  007F72  57                 	db	87	;'W'
   530  007F73  4D                 	db	77	;'M'
   531  007F74  4F                 	db	79	;'O'
   532  007F75  44                 	db	68	;'D'
   533  007F76  45                 	db	69	;'E'
   534  007F77  3D                 	db	61	;'='
   535  007F78  00                 	db	0
   536  007F79                     STR_36:
   537  007F79  41                 	db	65	;'A'
   538  007F7A  54                 	db	84	;'T'
   539  007F7B  2B                 	db	43
   540  007F7C  43                 	db	67	;'C'
   541  007F7D  49                 	db	73	;'I'
   542  007F7E  50                 	db	80	;'P'
   543  007F7F  4D                 	db	77	;'M'
   544  007F80  55                 	db	85	;'U'
   545  007F81  58                 	db	88	;'X'
   546  007F82  3D                 	db	61	;'='
   547  007F83  00                 	db	0
   548  007F84                     STR_44:
   549  007F84  61                 	db	97	;'a'
   550  007F85  31                 	db	49	;'1'
   551  007F86  32                 	db	50	;'2'
   552  007F87  33                 	db	51	;'3'
   553  007F88  34                 	db	52	;'4'
   554  007F89  35                 	db	53	;'5'
   555  007F8A  36                 	db	54	;'6'
   556  007F8B  37                 	db	55	;'7'
   557  007F8C  38                 	db	56	;'8'
   558  007F8D  00                 	db	0
   559  007F8E                     STR_38:
   560  007F8E  41                 	db	65	;'A'
   561  007F8F  54                 	db	84	;'T'
   562  007F90  2B                 	db	43
   563  007F91  53                 	db	83	;'S'
   564  007F92  4C                 	db	76	;'L'
   565  007F93  45                 	db	69	;'E'
   566  007F94  45                 	db	69	;'E'
   567  007F95  50                 	db	80	;'P'
   568  007F96  3D                 	db	61	;'='
   569  007F97  00                 	db	0
   570  007F98                     STR_31:
   571  007F98  6E                 	db	110	;'n'
   572  007F99  6F                 	db	111	;'o'
   573  007F9A  20                 	db	32
   574  007F9B  63                 	db	99	;'c'
   575  007F9C  68                 	db	104	;'h'
   576  007F9D  61                 	db	97	;'a'
   577  007F9E  6E                 	db	110	;'n'
   578  007F9F  67                 	db	103	;'g'
   579  007FA0  65                 	db	101	;'e'
   580  007FA1  00                 	db	0
   581  007FA2  41                 	db	65	;'A'
   582  007FA3  54                 	db	84	;'T'
   583  007FA4  2B                 	db	43
   584  007FA5  52                 	db	82	;'R'
   585  007FA6  53                 	db	83	;'S'
   586  007FA7  54                 	db	84	;'T'
   587  007FA8  0D                 	db	13
   588  007FA9  0A                 	db	10
   589  007FAA  00                 	db	0
   590  007FAB                     STR_32:
   591  007FAB  4C                 	db	76	;'L'
   592  007FAC  69                 	db	105	;'i'
   593  007FAD  6E                 	db	110	;'n'
   594  007FAE  6B                 	db	107	;'k'
   595  007FAF  65                 	db	101	;'e'
   596  007FB0  64                 	db	100	;'d'
   597  007FB1  00                 	db	0
   598  007FB2                     STR_33:
   599  007FB2  55                 	db	85	;'U'
   600  007FB3  6E                 	db	110	;'n'
   601  007FB4  6C                 	db	108	;'l'
   602  007FB5  69                 	db	105	;'i'
   603  007FB6  6E                 	db	110	;'n'
   604  007FB7  6B                 	db	107	;'k'
   605  007FB8  00                 	db	0
   606  007FB9  47                 	db	71	;'G'
   607  007FBA  50                 	db	80	;'P'
   608  007FBB  52                 	db	82	;'R'
   609  007FBC  4D                 	db	77	;'M'
   610  007FBD  43                 	db	67	;'C'
   611  007FBE  00                 	db	0
   612  007FBF  2B                 	db	43
   613  007FC0  49                 	db	73	;'I'
   614  007FC1  50                 	db	80	;'P'
   615  007FC2  44                 	db	68	;'D'
   616  007FC3  2C                 	db	44
   617  007FC4  00                 	db	0
   618  007FC5                     STR_29:
   619  007FC5  72                 	db	114	;'r'
   620  007FC6  65                 	db	101	;'e'
   621  007FC7  61                 	db	97	;'a'
   622  007FC8  64                 	db	100	;'d'
   623  007FC9  79                 	db	121	;'y'
   624  007FCA  00                 	db	0
   625  007FCB                     STR_26:
   626  007FCB  0D                 	db	13
   627  007FCC  0A                 	db	10
   628  007FCD  0D                 	db	13
   629  007FCE  0A                 	db	10
   630  007FCF  00                 	db	0
   631  007FD0                     STR_1:
   632  007FD0  41                 	db	65	;'A'
   633  007FD1  54                 	db	84	;'T'
   634  007FD2  0D                 	db	13
   635  007FD3  0A                 	db	10
   636  007FD4  00                 	db	0
   637  007FD5                     STR_30:
   638  007FD5  46                 	db	70	;'F'
   639  007FD6  41                 	db	65	;'A'
   640  007FD7  49                 	db	73	;'I'
   641  007FD8  4C                 	db	76	;'L'
   642  007FD9  00                 	db	0
   643  007FDA                     STR_43:
   644  007FDA  79                 	db	121	;'y'
   645  007FDB  79                 	db	121	;'y'
   646  007FDC  62                 	db	98	;'b'
   647  007FDD  00                 	db	0
   648  007FDE                     STR_10:
   649  007FDE  22                 	db	34
   650  007FDF  0D                 	db	13
   651  007FE0  0A                 	db	10
   652  007FE1  00                 	db	0
   653  007FE2                     STR_9:
   654  007FE2  22                 	db	34
   655  007FE3  2C                 	db	44
   656  007FE4  22                 	db	34
   657  007FE5  00                 	db	0
   658  007FE6  41                 	db	65	;'A'
   659  007FE7  54                 	db	84	;'T'
   660  007FE8  45                 	db	69	;'E'
   661  007FE9  00                 	db	0
   662  007FEA  54                 	db	84	;'T'
   663  007FEB  43                 	db	67	;'C'
   664  007FEC  50                 	db	80	;'P'
   665  007FED  00                 	db	0
   666  007FEE  55                 	db	85	;'U'
   667  007FEF  44                 	db	68	;'D'
   668  007FF0  50                 	db	80	;'P'
   669  007FF1  00                 	db	0
   670  007FF2  22                 	db	34
   671  007FF3  2C                 	db	44
   672  007FF4  00                 	db	0
   673  007FF5                     STR_5:
   674  007FF5  4F                 	db	79	;'O'
   675  007FF6  4B                 	db	75	;'K'
   676  007FF7  00                 	db	0
   677  007FF8  41                 	db	65	;'A'
   678  007FF9  54                 	db	84	;'T'
   679  007FFA  00                 	db	0
   680  007FFB                     STR_20:
   681  007FFB  25                 	db	37
   682  007FFC  75                 	db	117	;'u'
   683  007FFD  00                 	db	0
   684  0000                     
   685                           ; #config settings
   686  007FFE  00                 	db	0	; dummy byte at the end
   687  0000                     
   688                           	psect	cinit
   689  00211C                     __pcinit:
   690                           	opt stack 0
   691  00211C                     start_initialization:
   692                           	opt stack 0
   693  00211C                     __initialization:
   694                           	opt stack 0
   695                           
   696                           ; Initialize objects allocated to BANK1 (56 bytes)
   697                           ; load TBLPTR registers with __pidataBANK1
   698  00211C  0EA8               	movlw	low __pidataBANK1
   699  00211E  6EF6               	movwf	tblptrl,c
   700  002120  0E25               	movlw	high __pidataBANK1
   701  002122  6EF7               	movwf	tblptrh,c
   702  002124  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   703  002126  6EF8               	movwf	tblptru,c
   704  002128  EE01  F08D         	lfsr	0,__pdataBANK1
   705  00212C  EE10 F038          	lfsr	1,56
   706  002130                     copy_data0:
   707  002130  0009               	tblrd		*+
   708  002132  CFF5 FFEE          	movff	tablat,postinc0
   709  002136  50E5               	movf	postdec1,w,c
   710  002138  50E1               	movf	fsr1l,w,c
   711  00213A  E1FA               	bnz	copy_data0
   712                           
   713                           ; Initialize objects allocated to BANK0 (37 bytes)
   714                           ; load TBLPTR registers with __pidataBANK0
   715  00213C  0EC0               	movlw	low __pidataBANK0
   716  00213E  6EF6               	movwf	tblptrl,c
   717  002140  0E27               	movlw	high __pidataBANK0
   718  002142  6EF7               	movwf	tblptrh,c
   719  002144  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   720  002146  6EF8               	movwf	tblptru,c
   721  002148  EE00  F0DA         	lfsr	0,__pdataBANK0
   722  00214C  EE10 F025          	lfsr	1,37
   723  002150                     copy_data1:
   724  002150  0009               	tblrd		*+
   725  002152  CFF5 FFEE          	movff	tablat,postinc0
   726  002156  50E5               	movf	postdec1,w,c
   727  002158  50E1               	movf	fsr1l,w,c
   728  00215A  E1FA               	bnz	copy_data1
   729                           
   730                           ; Clear objects allocated to BANK1 (54 bytes)
   731  00215C  EE01  F0C5         	lfsr	0,__pbssBANK1
   732  002160  0E36               	movlw	54
   733  002162                     clear_0:
   734  002162  6AEE               	clrf	postinc0,c
   735  002164  06E8               	decf	wreg,f,c
   736  002166  E1FD               	bnz	clear_0
   737                           
   738                           ; Clear objects allocated to BANK0 (61 bytes)
   739  002168  EE00  F060         	lfsr	0,__pbssBANK0
   740  00216C  0E3D               	movlw	61
   741  00216E                     clear_1:
   742  00216E  6AEE               	clrf	postinc0,c
   743  002170  06E8               	decf	wreg,f,c
   744  002172  E1FD               	bnz	clear_1
   745                           
   746                           ; Clear objects allocated to COMRAM (19 bytes)
   747  002174  EE00  F03A         	lfsr	0,__pbssCOMRAM
   748  002178  0E13               	movlw	19
   749  00217A                     clear_2:
   750  00217A  6AEE               	clrf	postinc0,c
   751  00217C  06E8               	decf	wreg,f,c
   752  00217E  E1FD               	bnz	clear_2
   753  002180                     end_of_initialization:
   754                           	opt stack 0
   755  002180                     __end_of__initialization:
   756                           	opt stack 0
   757  002180  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   758  002182  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   759  002184  0E00               	movlw	low (__Lmediumconst shr (0+16))
   760  002186  6EF8               	movwf	tblptru,c
   761  002188  0100               	movlb	0
   762  00218A  EF9F  F008         	goto	_main	;jump to C main() function
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postdec1	equ	0xFE5
   770                           fsr1l	equ	0xFE1
   771                           
   772                           	psect	bssCOMRAM
   773  00003A                     __pbssCOMRAM:
   774                           	opt stack 0
   775  00003A                     _TMR0_InterruptHandler:
   776                           	opt stack 0
   777  00003A                     	ds	2
   778  00003C                     _EUSART2_RxDefaultInterruptHandler:
   779                           	opt stack 0
   780  00003C                     	ds	2
   781  00003E                     _EUSART2_TxDefaultInterruptHandler:
   782                           	opt stack 0
   783  00003E                     	ds	2
   784  000040                     _eusart1RxCount:
   785                           	opt stack 0
   786  000040                     	ds	1
   787  000041                     _eusart1RxTail:
   788                           	opt stack 0
   789  000041                     	ds	1
   790  000042                     _eusart1RxHead:
   791                           	opt stack 0
   792  000042                     	ds	1
   793  000043                     _eusart1TxBufferRemaining:
   794                           	opt stack 0
   795  000043                     	ds	1
   796  000044                     _eusart1TxTail:
   797                           	opt stack 0
   798  000044                     	ds	1
   799  000045                     _eusart1TxHead:
   800                           	opt stack 0
   801  000045                     	ds	1
   802  000046                     _timer0ReloadVal:
   803                           	opt stack 0
   804  000046                     	ds	1
   805  000047                     _eusart2RxCount:
   806                           	opt stack 0
   807  000047                     	ds	1
   808  000048                     _eusart2RxTail:
   809                           	opt stack 0
   810  000048                     	ds	1
   811  000049                     _eusart2RxHead:
   812                           	opt stack 0
   813  000049                     	ds	1
   814  00004A                     _eusart2TxBufferRemaining:
   815                           	opt stack 0
   816  00004A                     	ds	1
   817  00004B                     _eusart2TxTail:
   818                           	opt stack 0
   819  00004B                     	ds	1
   820  00004C                     _eusart2TxHead:
   821                           	opt stack 0
   822  00004C                     	ds	1
   823                           tblptru	equ	0xFF8
   824                           tblptrh	equ	0xFF7
   825                           tblptrl	equ	0xFF6
   826                           tablat	equ	0xFF5
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postdec1	equ	0xFE5
   830                           fsr1l	equ	0xFE1
   831                           
   832                           	psect	bssBANK0
   833  000060                     __pbssBANK0:
   834                           	opt stack 0
   835  000060                     _eusart1RxBuffer:
   836                           	opt stack 0
   837  000060                     	ds	8
   838  000068                     _eusart1TxBuffer:
   839                           	opt stack 0
   840  000068                     	ds	8
   841  000070                     _eusart2RxBuffer:
   842                           	opt stack 0
   843  000070                     	ds	8
   844  000078                     _eusart2TxBuffer:
   845                           	opt stack 0
   846  000078                     	ds	8
   847  000080                     __esp8266_waitResponse@F7010:
   848                           	opt stack 0
   849  000080                     	ds	6
   850  000086                     esp8266_send@F6994:
   851                           	opt stack 0
   852  000086                     	ds	6
   853  00008C                     esp8266_start@F6991:
   854                           	opt stack 0
   855  00008C                     	ds	5
   856  000091                     _dustDensity:
   857                           	opt stack 0
   858  000091                     	ds	3
   859  000094                     _voltsMeasured:
   860                           	opt stack 0
   861  000094                     	ds	2
   862  000096                     _EUSART1_RxDefaultInterruptHandler:
   863                           	opt stack 0
   864  000096                     	ds	2
   865  000098                     _EUSART1_TxDefaultInterruptHandler:
   866                           	opt stack 0
   867  000098                     	ds	2
   868  00009A                     _calcVoltage:
   869                           	opt stack 0
   870  00009A                     	ds	3
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	dataBANK0
   881  0000DA                     __pdataBANK0:
   882                           	opt stack 0
   883  0000DA                     __esp8266_waitResponse@F7014:
   884                           	opt stack 0
   885  0000DA                     	ds	12
   886  0000E6                     GPS_read_data@F7063:
   887                           	opt stack 0
   888  0000E6                     	ds	9
   889  0000EF                     GPS_read_data@F7061:
   890                           	opt stack 0
   891  0000EF                     	ds	9
   892  0000F8                     GPS_read_data@F7067:
   893                           	opt stack 0
   894  0000F8                     	ds	7
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           	psect	bssBANK1
   905  0001C5                     __pbssBANK1:
   906                           	opt stack 0
   907  0001C5                     _ESP_flag:
   908                           	opt stack 0
   909  0001C5                     	ds	2
   910  0001C7                     _timecount:
   911                           	opt stack 0
   912  0001C7                     	ds	2
   913  0001C9                     _DataRead:
   914                           	opt stack 0
   915  0001C9                     	ds	25
   916  0001E2                     _pdust:
   917                           	opt stack 0
   918  0001E2                     	ds	21
   919  0001F7                     main@ip:
   920                           	opt stack 0
   921  0001F7                     	ds	4
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           
   931                           	psect	dataBANK1
   932  00018D                     __pdataBANK1:
   933                           	opt stack 0
   934  00018D                     main@F7015:
   935                           	opt stack 0
   936  00018D                     	ds	29
   937  0001AA                     GPS_read_data@F7059:
   938                           	opt stack 0
   939  0001AA                     	ds	13
   940  0001B7                     main@F7013:
   941                           	opt stack 0
   942  0001B7                     	ds	8
   943  0001BF                     main@F7011:
   944                           	opt stack 0
   945  0001BF                     	ds	6
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	cstackBANK1
   956  000100                     __pcstackBANK1:
   957                           	opt stack 0
   958  000100                     ??_get_pm:
   959  000100                     esp8266_send@data:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x0
   963  000100                     	ds	2
   964  000102                     get_pm@oldtimecount1:
   965                           	opt stack 0
   966  000102                     esp8266_send@length_str:
   967                           	opt stack 0
   968                           
   969                           ; 6 bytes @ 0x2
   970  000102                     	ds	2
   971  000104                     get_pm@oldtimecount2:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x4
   975  000104                     	ds	2
   976  000106                     get_pm@oldtimecount3:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x6
   980  000106                     	ds	2
   981  000108                     get_pm@oldtimecount4:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x8
   985  000108                     	ds	2
   986  00010A                     get_pm@TASK:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0xA
   990  00010A                     	ds	2
   991  00010C                     ??_main:
   992                           
   993                           ; 1 bytes @ 0xC
   994  00010C                     	ds	2
   995  00010E                     main@GPSd_:
   996                           	opt stack 0
   997                           
   998                           ; 29 bytes @ 0xE
   999  00010E                     	ds	29
  1000  00012B                     main@alldata:
  1001                           	opt stack 0
  1002                           
  1003                           ; 80 bytes @ 0x2B
  1004  00012B                     	ds	80
  1005  00017B                     main@wait:
  1006                           	opt stack 0
  1007                           
  1008                           ; 8 bytes @ 0x7B
  1009  00017B                     	ds	8
  1010  000183                     main@data_test:
  1011                           	opt stack 0
  1012                           
  1013                           ; 6 bytes @ 0x83
  1014  000183                     	ds	6
  1015  000189                     main@m_TASK:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x89
  1019  000189                     	ds	2
  1020  00018B                     main@oldtimecount:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x8B
  1024  00018B                     	ds	2
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1l	equ	0xFE1
  1033                           
  1034                           	psect	cstackBANK0
  1035  00009D                     __pcstackBANK0:
  1036                           	opt stack 0
  1037  00009D                     ?___ftdiv:
  1038                           	opt stack 0
  1039  00009D                     esp8266_connect@ssid:
  1040                           	opt stack 0
  1041  00009D                     ___ftdiv@f1:
  1042                           	opt stack 0
  1043  00009D                     _fround$2236:
  1044                           	opt stack 0
  1045  00009D                     _scale$2237:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x0
  1049  00009D                     	ds	2
  1050  00009F                     esp8266_connect@pass:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x2
  1054  00009F                     	ds	1
  1055  0000A0                     scale@scl:
  1056                           	opt stack 0
  1057  0000A0                     ___ftdiv@f2:
  1058                           	opt stack 0
  1059  0000A0                     _fround$2235:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x3
  1063  0000A0                     	ds	1
  1064  0000A1                     ??_ESP_Initialize:
  1065  0000A1                     ?___fttol:
  1066                           	opt stack 0
  1067  0000A1                     ___fttol@f1:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x4
  1071  0000A1                     	ds	2
  1072  0000A3                     fround@prec:
  1073                           	opt stack 0
  1074  0000A3                     ___ftdiv@cntr:
  1075                           	opt stack 0
  1076  0000A3                     ESP_Initialize@oldtimecount5:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x6
  1080  0000A3                     	ds	1
  1081  0000A4                     ?___ftadd:
  1082                           	opt stack 0
  1083  0000A4                     ___ftadd@f1:
  1084                           	opt stack 0
  1085  0000A4                     ___ftdiv@f3:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x7
  1089  0000A4                     	ds	1
  1090  0000A5                     ??___fttol:
  1091  0000A5                     ESP_Initialize@oldtimecount3:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x8
  1095  0000A5                     	ds	2
  1096  0000A7                     ___ftdiv@exp:
  1097                           	opt stack 0
  1098  0000A7                     ESP_Initialize@oldtimecount1:
  1099                           	opt stack 0
  1100  0000A7                     ___ftadd@f2:
  1101                           	opt stack 0
  1102                           
  1103                           ; 3 bytes @ 0xA
  1104  0000A7                     	ds	1
  1105  0000A8                     ___ftdiv@sign:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0xB
  1109  0000A8                     	ds	1
  1110  0000A9                     ESP_Initialize@oldtimecount2:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0xC
  1114  0000A9                     	ds	1
  1115  0000AA                     ??___ftadd:
  1116  0000AA                     ___fttol@sign1:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0xD
  1120  0000AA                     	ds	1
  1121  0000AB                     ESP_Initialize@oldtimecount4:
  1122                           	opt stack 0
  1123  0000AB                     ___fttol@lval:
  1124                           	opt stack 0
  1125                           
  1126                           ; 4 bytes @ 0xE
  1127  0000AB                     	ds	2
  1128  0000AD                     ___ftadd@sign:
  1129                           	opt stack 0
  1130  0000AD                     ESP_Initialize@ESP_TASK:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x10
  1134  0000AD                     	ds	1
  1135  0000AE                     ___ftadd@exp2:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x11
  1139  0000AE                     	ds	1
  1140  0000AF                     ___ftadd@exp1:
  1141                           	opt stack 0
  1142  0000AF                     ___fttol@exp1:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x12
  1146  0000AF                     	ds	1
  1147  0000B0                     ?___ftsub:
  1148                           	opt stack 0
  1149  0000B0                     ___ftsub@f1:
  1150                           	opt stack 0
  1151                           
  1152                           ; 3 bytes @ 0x13
  1153  0000B0                     	ds	3
  1154  0000B3                     ___ftsub@f2:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x16
  1158  0000B3                     	ds	3
  1159  0000B6                     ?_sprintf:
  1160                           	opt stack 0
  1161  0000B6                     sprintf@sp:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x19
  1165  0000B6                     	ds	2
  1166  0000B8                     sprintf@f:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x1B
  1170  0000B8                     	ds	5
  1171  0000BD                     ??_sprintf:
  1172                           
  1173                           ; 1 bytes @ 0x20
  1174  0000BD                     	ds	6
  1175  0000C3                     _sprintf$2238:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x26
  1179  0000C3                     	ds	3
  1180  0000C6                     sprintf@ap:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x29
  1184  0000C6                     	ds	2
  1185  0000C8                     sprintf@flag:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x2B
  1189  0000C8                     	ds	2
  1190  0000CA                     sprintf@prec:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x2D
  1194  0000CA                     	ds	2
  1195  0000CC                     sprintf@val:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x2F
  1199  0000CC                     	ds	4
  1200  0000D0                     sprintf@exp:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x33
  1204  0000D0                     	ds	2
  1205  0000D2                     sprintf@tmpval:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0x35
  1209  0000D2                     	ds	4
  1210  0000D6                     sprintf@fval:
  1211                           	opt stack 0
  1212                           
  1213                           ; 3 bytes @ 0x39
  1214  0000D6                     	ds	3
  1215  0000D9                     sprintf@c:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x3C
  1219  0000D9                     	ds	1
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	cstackCOMRAM
  1230  000001                     __pcstackCOMRAM:
  1231                           	opt stack 0
  1232  000001                     ??_INTERRUPT_InterruptManager:
  1233  000001                     
  1234                           ; 1 bytes @ 0x0
  1235  000001                     	ds	18
  1236  000013                     ??_ADC_SelectChannel:
  1237  000013                     ?_strlen:
  1238                           	opt stack 0
  1239  000013                     ?_ADC_GetConversionResult:
  1240                           	opt stack 0
  1241  000013                     ?___awmod:
  1242                           	opt stack 0
  1243  000013                     ?___ftpack:
  1244                           	opt stack 0
  1245  000013                     ?___ftneg:
  1246                           	opt stack 0
  1247  000013                     ?__tdiv_to_l_:
  1248                           	opt stack 0
  1249  000013                     ?__div_to_l_:
  1250                           	opt stack 0
  1251  000013                     ?___lldiv:
  1252                           	opt stack 0
  1253  000013                     EUSART1_Read@readValue:
  1254                           	opt stack 0
  1255  000013                     EUSART1_Write@txData:
  1256                           	opt stack 0
  1257  000013                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1258                           	opt stack 0
  1259  000013                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1260                           	opt stack 0
  1261  000013                     TMR0_SetInterruptHandler@InterruptHandler:
  1262                           	opt stack 0
  1263  000013                     EUSART1_SetTxInterruptHandler@interruptHandler:
  1264                           	opt stack 0
  1265  000013                     EUSART1_SetRxInterruptHandler@interruptHandler:
  1266                           	opt stack 0
  1267  000013                     ___awmod@dividend:
  1268                           	opt stack 0
  1269  000013                     memset@p1:
  1270                           	opt stack 0
  1271  000013                     strcat@to:
  1272                           	opt stack 0
  1273  000013                     strlen@s:
  1274                           	opt stack 0
  1275  000013                     __div_to_l_@f1:
  1276                           	opt stack 0
  1277  000013                     ___ftpack@arg:
  1278                           	opt stack 0
  1279  000013                     __tdiv_to_l_@f1:
  1280                           	opt stack 0
  1281  000013                     ___ftge@ff1:
  1282                           	opt stack 0
  1283  000013                     ___ftneg@f1:
  1284                           	opt stack 0
  1285  000013                     ___lldiv@dividend:
  1286                           	opt stack 0
  1287                           
  1288                           ; 4 bytes @ 0x12
  1289  000013                     	ds	1
  1290  000014                     ??__esp8266_waitResponse:
  1291  000014                     ?__esp8266_waitFor:
  1292                           	opt stack 0
  1293  000014                     ADC_SelectChannel@channel:
  1294                           	opt stack 0
  1295  000014                     __esp8266_print@ptr:
  1296                           	opt stack 0
  1297  000014                     __esp8266_waitFor@string:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x13
  1301  000014                     	ds	1
  1302  000015                     ??_strlen:
  1303  000015                     ??_ADC_GetConversionResult:
  1304  000015                     ___awmod@divisor:
  1305                           	opt stack 0
  1306  000015                     memset@c:
  1307                           	opt stack 0
  1308  000015                     strcat@from:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x14
  1312  000015                     	ds	1
  1313  000016                     ??__esp8266_waitFor:
  1314  000016                     ___ftpack@exp:
  1315                           	opt stack 0
  1316  000016                     __div_to_l_@f2:
  1317                           	opt stack 0
  1318  000016                     __tdiv_to_l_@f2:
  1319                           	opt stack 0
  1320  000016                     ___ftge@ff2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x15
  1324  000016                     	ds	1
  1325  000017                     ___awmod@counter:
  1326                           	opt stack 0
  1327  000017                     ___ftpack@sign:
  1328                           	opt stack 0
  1329  000017                     memset@n:
  1330                           	opt stack 0
  1331  000017                     strcat@cp:
  1332                           	opt stack 0
  1333  000017                     strlen@cp:
  1334                           	opt stack 0
  1335  000017                     ___lldiv@divisor:
  1336                           	opt stack 0
  1337  000017                     __esp8266_waitResponse@strings:
  1338                           	opt stack 0
  1339                           
  1340                           ; 12 bytes @ 0x16
  1341  000017                     	ds	1
  1342  000018                     ??___ftpack:
  1343  000018                     __esp8266_waitFor@received:
  1344                           	opt stack 0
  1345  000018                     ___awmod@sign:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x17
  1349  000018                     	ds	1
  1350  000019                     ??__tdiv_to_l_:
  1351  000019                     ??___ftge:
  1352  000019                     ?___awdiv:
  1353                           	opt stack 0
  1354  000019                     __esp8266_waitFor@counter:
  1355                           	opt stack 0
  1356  000019                     print_@text:
  1357                           	opt stack 0
  1358  000019                     print_ln@text:
  1359                           	opt stack 0
  1360  000019                     ___awdiv@dividend:
  1361                           	opt stack 0
  1362  000019                     memset@p:
  1363                           	opt stack 0
  1364  000019                     __div_to_l_@quot:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x18
  1368  000019                     	ds	2
  1369  00001B                     ?___lltoft:
  1370                           	opt stack 0
  1371  00001B                     ?___lwtoft:
  1372                           	opt stack 0
  1373  00001B                     __esp8266_waitFor@so_far:
  1374                           	opt stack 0
  1375  00001B                     print_@length:
  1376                           	opt stack 0
  1377  00001B                     print_ln@length:
  1378                           	opt stack 0
  1379  00001B                     ___awdiv@divisor:
  1380                           	opt stack 0
  1381  00001B                     ___lwtoft@c:
  1382                           	opt stack 0
  1383  00001B                     ___lldiv@quotient:
  1384                           	opt stack 0
  1385  00001B                     ___lltoft@c:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x1A
  1389  00001B                     	ds	1
  1390  00001C                     ??_print_ln:
  1391  00001C                     ??_print_:
  1392  00001C                     esp8266_ip@store_in:
  1393                           	opt stack 0
  1394  00001C                     __tdiv_to_l_@quot:
  1395                           	opt stack 0
  1396                           
  1397                           ; 4 bytes @ 0x1B
  1398  00001C                     	ds	1
  1399  00001D                     ___awdiv@counter:
  1400                           	opt stack 0
  1401  00001D                     __div_to_l_@cntr:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x1C
  1405  00001D                     	ds	1
  1406  00001E                     esp8266_ip@i:
  1407                           	opt stack 0
  1408  00001E                     ___awdiv@sign:
  1409                           	opt stack 0
  1410  00001E                     __div_to_l_@exp1:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x1D
  1414  00001E                     	ds	1
  1415  00001F                     ??___lltoft:
  1416  00001F                     esp8266_ip@received:
  1417                           	opt stack 0
  1418  00001F                     ___lldiv@counter:
  1419                           	opt stack 0
  1420  00001F                     print_@i:
  1421                           	opt stack 0
  1422  00001F                     print_ln@i:
  1423                           	opt stack 0
  1424  00001F                     ___awdiv@quotient:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x1E
  1428  00001F                     	ds	1
  1429  000020                     ?___llmod:
  1430                           	opt stack 0
  1431  000020                     __tdiv_to_l_@cntr:
  1432                           	opt stack 0
  1433  000020                     ___llmod@dividend:
  1434                           	opt stack 0
  1435                           
  1436                           ; 4 bytes @ 0x1F
  1437  000020                     	ds	1
  1438  000021                     ?___wmul:
  1439                           	opt stack 0
  1440  000021                     __tdiv_to_l_@exp1:
  1441                           	opt stack 0
  1442  000021                     ___wmul@multiplier:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x20
  1446  000021                     	ds	2
  1447  000023                     ___lltoft@exp:
  1448                           	opt stack 0
  1449  000023                     ___wmul@multiplicand:
  1450                           	opt stack 0
  1451  000023                     __esp8266_waitResponse@lengths:
  1452                           	opt stack 0
  1453                           
  1454                           ; 6 bytes @ 0x22
  1455  000023                     	ds	1
  1456  000024                     ___llmod@divisor:
  1457                           	opt stack 0
  1458                           
  1459                           ; 4 bytes @ 0x23
  1460  000024                     	ds	1
  1461  000025                     ___wmul@product:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x24
  1465  000025                     	ds	2
  1466  000027                     ?___ftmul:
  1467                           	opt stack 0
  1468  000027                     ___ftmul@f1:
  1469                           	opt stack 0
  1470                           
  1471                           ; 3 bytes @ 0x26
  1472  000027                     	ds	1
  1473  000028                     ___llmod@counter:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x27
  1477  000028                     	ds	1
  1478  000029                     __esp8266_waitResponse@responses:
  1479                           	opt stack 0
  1480                           
  1481                           ; 6 bytes @ 0x28
  1482  000029                     	ds	1
  1483  00002A                     ___ftmul@f2:
  1484                           	opt stack 0
  1485                           
  1486                           ; 3 bytes @ 0x29
  1487  00002A                     	ds	3
  1488  00002D                     ??___ftmul:
  1489                           
  1490                           ; 1 bytes @ 0x2C
  1491  00002D                     	ds	2
  1492  00002F                     __esp8266_waitResponse@so_far:
  1493                           	opt stack 0
  1494                           
  1495                           ; 6 bytes @ 0x2E
  1496  00002F                     	ds	1
  1497  000030                     ___ftmul@exp:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x2F
  1501  000030                     	ds	1
  1502  000031                     ___ftmul@f3_as_product:
  1503                           	opt stack 0
  1504                           
  1505                           ; 3 bytes @ 0x30
  1506  000031                     	ds	3
  1507  000034                     ___ftmul@cntr:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x33
  1511  000034                     	ds	1
  1512  000035                     __esp8266_waitResponse@received:
  1513                           	opt stack 0
  1514  000035                     ___ftmul@sign:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x34
  1518  000035                     	ds	1
  1519  000036                     ??___ftdiv:
  1520  000036                     ?_fround:
  1521                           	opt stack 0
  1522  000036                     ?_scale:
  1523                           	opt stack 0
  1524  000036                     __esp8266_waitResponse@response:
  1525                           	opt stack 0
  1526                           
  1527                           ; 1 bytes @ 0x35
  1528  000036                     	ds	1
  1529  000037                     __esp8266_waitResponse@continue_loop:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x36
  1533  000037                     	ds	1
  1534  000038                     __esp8266_waitResponse@i:
  1535                           	opt stack 0
  1536                           
  1537                           ; 1 bytes @ 0x37
  1538  000038                     	ds	1
  1539  000039                     esp8266_mode@mode:
  1540                           	opt stack 0
  1541  000039                     esp8266_server@mode:
  1542                           	opt stack 0
  1543  000039                     esp8266_CIPMUX@mode:
  1544                           	opt stack 0
  1545  000039                     esp8266_SLEEP@mode:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x38
  1549  000039                     	ds	1
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           postdec1	equ	0xFE5
  1557                           fsr1l	equ	0xFE1
  1558                           
  1559 ;;
  1560 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1561 ;;
  1562 ;; *************** function _main *****************
  1563 ;; Defined at:
  1564 ;;		line 46 in file "main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  alldata        80   43[BANK1 ] unsigned char [80]
  1569 ;;  GPSd_          29   14[BANK1 ] unsigned char [29]
  1570 ;;  wait            8  123[BANK1 ] unsigned char [8]
  1571 ;;  data_test       6  131[BANK1 ] unsigned char [6]
  1572 ;;  oldtimecount    2  139[BANK1 ] unsigned int 
  1573 ;;  m_TASK          2  137[BANK1 ] int 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1583 ;;      Params:         0       0       0       0       0       0       0
  1584 ;;      Locals:         0       0     127       0       0       0       0
  1585 ;;      Temps:          0       0       2       0       0       0       0
  1586 ;;      Totals:         0       0     129       0       0       0       0
  1587 ;;Total ram usage:      129 bytes
  1588 ;; Hardware stack levels required when called:    7
  1589 ;; This function calls:
  1590 ;;		_ADC_Initialize
  1591 ;;		_ESP_Initialize
  1592 ;;		_EUSART1_Initialize
  1593 ;;		_EUSART2_Initialize
  1594 ;;		_SYSTEM_Initialize
  1595 ;;		_TMR0_Initialize
  1596 ;;		__esp8266_waitFor
  1597 ;;		_esp8266_ip
  1598 ;;		_esp8266_send
  1599 ;;		_get_pm
  1600 ;;		_memset
  1601 ;;		_print_ln
  1602 ;;		_strcat
  1603 ;;		_strlen
  1604 ;; This function is called by:
  1605 ;;		Startup code after reset
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text0
  1610  00113E                     __ptext0:
  1611                           	opt stack 0
  1612  00113E                     _main:
  1613                           	opt stack 24
  1614                           
  1615                           ;main.c: 50: SYSTEM_Initialize();
  1616                           
  1617                           ;incstack = 0
  1618  00113E  EC17  F014         	call	_SYSTEM_Initialize	;wreg free
  1619                           
  1620                           ;main.c: 51: ADC_Initialize();
  1621  001142  EC45  F014         	call	_ADC_Initialize	;wreg free
  1622                           
  1623                           ;main.c: 52: EUSART1_Initialize();
  1624  001146  ECAF  F011         	call	_EUSART1_Initialize	;wreg free
  1625                           
  1626                           ;main.c: 53: EUSART2_Initialize();
  1627  00114A  EC89  F011         	call	_EUSART2_Initialize	;wreg free
  1628                           
  1629                           ;main.c: 54: TMR0_Initialize();
  1630  00114E  EC28  F014         	call	_TMR0_Initialize	;wreg free
  1631                           
  1632                           ;main.c: 61: (INTCONbits.GIE = 1);
  1633  001152  8EF2               	bsf	intcon,7,c	;volatile
  1634                           
  1635                           ;main.c: 67: (INTCONbits.PEIE = 1);
  1636  001154  8CF2               	bsf	intcon,6,c	;volatile
  1637                           
  1638                           ;main.c: 73: int m_TASK=1;
  1639  001156  0E00               	movlw	0
  1640  001158  0101               	movlb	1	; () banked
  1641  00115A  6F8A               	movwf	(main@m_TASK+1)& (0+255),b
  1642  00115C  0E01               	movlw	1
  1643  00115E  6F89               	movwf	main@m_TASK& (0+255),b
  1644                           
  1645                           ; BSR set to: 1
  1646                           ;main.c: 74: unsigned int oldtimecount =0;
  1647  001160  0E00               	movlw	0
  1648  001162  6F8C               	movwf	(main@oldtimecount+1)& (0+255),b
  1649  001164  0E00               	movlw	0
  1650  001166  6F8B               	movwf	main@oldtimecount& (0+255),b
  1651  001168                     
  1652                           ; BSR set to: 1
  1653                           ;main.c: 77: {
  1654                           ;main.c: 78: ESP_Initialize();
  1655                           
  1656                           ; BSR set to: 1
  1657  001168  EC9B  F009         	call	_ESP_Initialize	;wreg free
  1658                           
  1659                           ;main.c: 79: }while(ESP_flag == 0);
  1660  00116C  0101               	movlb	1	; () banked
  1661  00116E  51C5               	movf	_ESP_flag& (0+255),w,b
  1662  001170  11C6               	iorwf	(_ESP_flag+1)& (0+255),w,b
  1663  001172  B4D8               	btfsc	status,2,c
  1664  001174  D7F9               	goto	l641
  1665                           
  1666                           ; BSR set to: 1
  1667                           ;main.c: 80: oldtimecount = timecount;
  1668  001176  C1C7  F18B         	movff	_timecount,main@oldtimecount
  1669  00117A  C1C8  F18C         	movff	_timecount+1,main@oldtimecount+1
  1670  00117E                     
  1671                           ; BSR set to: 1
  1672                           
  1673                           ; BSR set to: 1
  1674                           
  1675                           ; BSR set to: 1
  1676  00117E  C18B  F10C         	movff	main@oldtimecount,??_main
  1677  001182  C18C  F10D         	movff	main@oldtimecount+1,??_main+1
  1678  001186  1F0C               	comf	??_main& (0+255),f,b
  1679  001188  1F0D               	comf	(??_main+1)& (0+255),f,b
  1680  00118A  4B0C               	infsnz	??_main& (0+255),f,b
  1681  00118C  2B0D               	incf	(??_main+1)& (0+255),f,b
  1682  00118E  51C7               	movf	_timecount& (0+255),w,b
  1683  001190  270C               	addwf	??_main& (0+255),f,b
  1684  001192  51C8               	movf	(_timecount+1)& (0+255),w,b
  1685  001194  230D               	addwfc	(??_main+1)& (0+255),f,b
  1686  001196  0E10               	movlw	16
  1687  001198  5D0C               	subwf	??_main& (0+255),w,b
  1688  00119A  0E27               	movlw	39
  1689  00119C  590D               	subwfb	(??_main+1)& (0+255),w,b
  1690  00119E  A0D8               	btfss	status,0,c
  1691  0011A0  D7EE               	goto	l644
  1692                           
  1693                           ; BSR set to: 1
  1694                           ;main.c: 84: esp8266_ip(ip);
  1695                           
  1696                           ; BSR set to: 1
  1697  0011A2  0EF7               	movlw	low main@ip
  1698  0011A4  6E1C               	movwf	esp8266_ip@store_in,c
  1699  0011A6  0E01               	movlw	high main@ip
  1700  0011A8  6E1D               	movwf	esp8266_ip@store_in+1,c
  1701  0011AA  EC3B  F00F         	call	_esp8266_ip	;wreg free
  1702                           
  1703                           ;main.c: 86: char data_test[6] = "hello";
  1704  0011AE  EE21  F0BF         	lfsr	2,main@F7011
  1705  0011B2  EE11  F083         	lfsr	1,main@data_test
  1706  0011B6  0E05               	movlw	5
  1707  0011B8                     u6681:
  1708  0011B8  CFDB FFE3          	movff	plusw2,plusw1
  1709  0011BC  06E8               	decf	wreg,f,c
  1710  0011BE  E2FC               	bc	u6681
  1711                           
  1712                           ;main.c: 87: char wait[8]="CONNECT";
  1713  0011C0  EE21  F0B7         	lfsr	2,main@F7013
  1714  0011C4  EE11  F07B         	lfsr	1,main@wait
  1715  0011C8  0E07               	movlw	7
  1716  0011CA                     u6691:
  1717  0011CA  CFDB FFE3          	movff	plusw2,plusw1
  1718  0011CE  06E8               	decf	wreg,f,c
  1719  0011D0  E2FC               	bc	u6691
  1720                           
  1721                           ;main.c: 88: char GPSd_[]="lat:22.626852,lng:120.266734";
  1722  0011D2  EE21  F08D         	lfsr	2,main@F7015
  1723  0011D6  EE11  F00E         	lfsr	1,main@GPSd_
  1724  0011DA  0E1C               	movlw	28
  1725  0011DC                     u6701:
  1726  0011DC  CFDB FFE3          	movff	plusw2,plusw1
  1727  0011E0  06E8               	decf	wreg,f,c
  1728  0011E2  E2FC               	bc	u6701
  1729                           
  1730                           ;main.c: 89: char alldata[80];
  1731                           ;main.c: 90: _esp8266_waitFor(wait);
  1732  0011E4  0E7B               	movlw	low main@wait
  1733  0011E6  6E14               	movwf	__esp8266_waitFor@string,c
  1734  0011E8  0E01               	movlw	high main@wait
  1735  0011EA  6E15               	movwf	__esp8266_waitFor@string+1,c
  1736  0011EC  ECED  F00E         	call	__esp8266_waitFor	;wreg free
  1737                           
  1738                           ;main.c: 91: print_ln(data_test,strlen(data_test));
  1739  0011F0  0E83               	movlw	low main@data_test
  1740  0011F2  6E19               	movwf	print_ln@text,c
  1741  0011F4  0E01               	movlw	high main@data_test
  1742  0011F6  6E1A               	movwf	print_ln@text+1,c
  1743  0011F8  0E83               	movlw	low main@data_test
  1744  0011FA  6E13               	movwf	strlen@s,c
  1745  0011FC  0E01               	movlw	high main@data_test
  1746  0011FE  6E14               	movwf	strlen@s+1,c
  1747  001200  EC9A  F012         	call	_strlen	;wreg free
  1748  001204  5013               	movf	?_strlen,w,c
  1749  001206  6E1B               	movwf	print_ln@length,c
  1750  001208  EC19  F012         	call	_print_ln	;wreg free
  1751                           
  1752                           ;main.c: 96: switch(m_TASK){
  1753                           
  1754                           ;main.c: 94: while(1){
  1755  00120C  D07D               	goto	l6594
  1756  00120E                     
  1757                           ;main.c: 98: get_pm();
  1758  00120E  EC3D  F006         	call	_get_pm	;wreg free
  1759                           
  1760                           ;main.c: 99: m_TASK = 2;
  1761  001212  0E00               	movlw	0
  1762  001214  0101               	movlb	1	; () banked
  1763  001216  6F8A               	movwf	(main@m_TASK+1)& (0+255),b
  1764  001218  0E02               	movlw	2
  1765  00121A  6F89               	movwf	main@m_TASK& (0+255),b
  1766                           
  1767                           ; BSR set to: 1
  1768                           ;main.c: 100: oldtimecount = timecount;
  1769  00121C  C1C7  F18B         	movff	_timecount,main@oldtimecount
  1770  001220  C1C8  F18C         	movff	_timecount+1,main@oldtimecount+1
  1771                           
  1772                           ;main.c: 101: break;
  1773  001224  D071               	goto	l6594
  1774  001226                     
  1775                           ; BSR set to: 1
  1776                           ;main.c: 104: if((timecount-oldtimecount)<10000){
  1777                           
  1778                           ; BSR set to: 1
  1779  001226  C18B  F10C         	movff	main@oldtimecount,??_main
  1780  00122A  C18C  F10D         	movff	main@oldtimecount+1,??_main+1
  1781  00122E  1F0C               	comf	??_main& (0+255),f,b
  1782  001230  1F0D               	comf	(??_main+1)& (0+255),f,b
  1783  001232  4B0C               	infsnz	??_main& (0+255),f,b
  1784  001234  2B0D               	incf	(??_main+1)& (0+255),f,b
  1785  001236  51C7               	movf	_timecount& (0+255),w,b
  1786  001238  270C               	addwf	??_main& (0+255),f,b
  1787  00123A  51C8               	movf	(_timecount+1)& (0+255),w,b
  1788  00123C  230D               	addwfc	(??_main+1)& (0+255),f,b
  1789  00123E  0E10               	movlw	16
  1790  001240  5D0C               	subwf	??_main& (0+255),w,b
  1791  001242  0E27               	movlw	39
  1792  001244  590D               	subwfb	(??_main+1)& (0+255),w,b
  1793  001246  B0D8               	btfsc	status,0,c
  1794  001248  D004               	goto	l657
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;main.c: 105: m_TASK=2;
  1798  00124A  0E00               	movlw	0
  1799  00124C  6F8A               	movwf	(main@m_TASK+1)& (0+255),b
  1800  00124E  0E02               	movlw	2
  1801  001250  D05A               	goto	L3
  1802  001252                     l657:
  1803                           
  1804                           ; BSR set to: 1
  1805                           ;main.c: 107: else{
  1806                           ;main.c: 108: print_ln(data_test,strlen(data_test));
  1807                           
  1808                           ; BSR set to: 1
  1809  001252  0E83               	movlw	low main@data_test
  1810  001254  6E19               	movwf	print_ln@text,c
  1811  001256  0E01               	movlw	high main@data_test
  1812  001258  6E1A               	movwf	print_ln@text+1,c
  1813  00125A  0E83               	movlw	low main@data_test
  1814  00125C  6E13               	movwf	strlen@s,c
  1815  00125E  0E01               	movlw	high main@data_test
  1816  001260  6E14               	movwf	strlen@s+1,c
  1817  001262  EC9A  F012         	call	_strlen	;wreg free
  1818  001266  5013               	movf	?_strlen,w,c
  1819  001268  6E1B               	movwf	print_ln@length,c
  1820  00126A  EC19  F012         	call	_print_ln	;wreg free
  1821                           
  1822                           ;main.c: 110: m_TASK = 3;
  1823  00126E  0E00               	movlw	0
  1824  001270  0101               	movlb	1	; () banked
  1825  001272  6F8A               	movwf	(main@m_TASK+1)& (0+255),b
  1826  001274  0E03               	movlw	3
  1827  001276  D047               	goto	L3
  1828  001278                     
  1829                           ; BSR set to: 1
  1830                           ;main.c: 115: strcat(alldata,pdust);
  1831                           
  1832                           ; BSR set to: 1
  1833  001278  0E2B               	movlw	low main@alldata
  1834  00127A  6E13               	movwf	strcat@to,c
  1835  00127C  0E01               	movlw	high main@alldata
  1836  00127E  6E14               	movwf	strcat@to+1,c
  1837  001280  0EE2               	movlw	low _pdust
  1838  001282  6E15               	movwf	strcat@from,c
  1839  001284  0E01               	movlw	high _pdust
  1840  001286  6E16               	movwf	strcat@from+1,c
  1841  001288  ECF8  F011         	call	_strcat	;wreg free
  1842                           
  1843                           ;main.c: 116: strcat(alldata,GPSd_);
  1844  00128C  0E2B               	movlw	low main@alldata
  1845  00128E  6E13               	movwf	strcat@to,c
  1846  001290  0E01               	movlw	high main@alldata
  1847  001292  6E14               	movwf	strcat@to+1,c
  1848  001294  0E0E               	movlw	low main@GPSd_
  1849  001296  6E15               	movwf	strcat@from,c
  1850  001298  0E01               	movlw	high main@GPSd_
  1851  00129A  6E16               	movwf	strcat@from+1,c
  1852  00129C  ECF8  F011         	call	_strcat	;wreg free
  1853                           
  1854                           ;main.c: 118: esp8266_send(alldata);
  1855  0012A0  0E2B               	movlw	low main@alldata
  1856  0012A2  0101               	movlb	1	; () banked
  1857  0012A4  6F00               	movwf	esp8266_send@data& (0+255),b
  1858  0012A6  0E01               	movlw	high main@alldata
  1859  0012A8  6F01               	movwf	(esp8266_send@data+1)& (0+255),b
  1860  0012AA  EC50  F010         	call	_esp8266_send	;wreg free
  1861                           
  1862                           ;main.c: 119: memset(alldata,'\0',sizeof(alldata));
  1863  0012AE  0E2B               	movlw	low main@alldata
  1864  0012B0  6E13               	movwf	memset@p1,c
  1865  0012B2  0E01               	movlw	high main@alldata
  1866  0012B4  6E14               	movwf	memset@p1+1,c
  1867  0012B6  0E00               	movlw	0
  1868  0012B8  6E16               	movwf	memset@c+1,c
  1869  0012BA  0E00               	movlw	0
  1870  0012BC  6E15               	movwf	memset@c,c
  1871  0012BE  0E00               	movlw	0
  1872  0012C0  6E18               	movwf	memset@n+1,c
  1873  0012C2  0E50               	movlw	80
  1874  0012C4  6E17               	movwf	memset@n,c
  1875  0012C6  EC4F  F013         	call	_memset	;wreg free
  1876                           
  1877                           ;main.c: 120: m_TASK = 4 ;
  1878  0012CA  0E00               	movlw	0
  1879  0012CC  0101               	movlb	1	; () banked
  1880  0012CE  6F8A               	movwf	(main@m_TASK+1)& (0+255),b
  1881  0012D0  0E04               	movlw	4
  1882  0012D2  6F89               	movwf	main@m_TASK& (0+255),b
  1883  0012D4                     
  1884                           ; BSR set to: 1
  1885                           ;main.c: 122: oldtimecount = timecount;
  1886                           
  1887                           ; BSR set to: 1
  1888  0012D4  C1C7  F18B         	movff	_timecount,main@oldtimecount
  1889  0012D8  C1C8  F18C         	movff	_timecount+1,main@oldtimecount+1
  1890  0012DC                     
  1891                           ; BSR set to: 1
  1892                           
  1893                           ; BSR set to: 1
  1894                           
  1895                           ; BSR set to: 1
  1896  0012DC  C18B  F10C         	movff	main@oldtimecount,??_main
  1897  0012E0  C18C  F10D         	movff	main@oldtimecount+1,??_main+1
  1898  0012E4  1F0C               	comf	??_main& (0+255),f,b
  1899  0012E6  1F0D               	comf	(??_main+1)& (0+255),f,b
  1900  0012E8  4B0C               	infsnz	??_main& (0+255),f,b
  1901  0012EA  2B0D               	incf	(??_main+1)& (0+255),f,b
  1902  0012EC  51C7               	movf	_timecount& (0+255),w,b
  1903  0012EE  270C               	addwf	??_main& (0+255),f,b
  1904  0012F0  51C8               	movf	(_timecount+1)& (0+255),w,b
  1905  0012F2  230D               	addwfc	(??_main+1)& (0+255),f,b
  1906  0012F4  0E50               	movlw	80
  1907  0012F6  5D0C               	subwf	??_main& (0+255),w,b
  1908  0012F8  0EC3               	movlw	195
  1909  0012FA  590D               	subwfb	(??_main+1)& (0+255),w,b
  1910  0012FC  A0D8               	btfss	status,0,c
  1911  0012FE  D7EE               	goto	l662
  1912  001300                     
  1913                           ; BSR set to: 1
  1914                           ;main.c: 128: m_TASK = 1;
  1915                           
  1916                           ; BSR set to: 1
  1917  001300  0E00               	movlw	0
  1918  001302  6F8A               	movwf	(main@m_TASK+1)& (0+255),b
  1919  001304  0E01               	movlw	1
  1920  001306                     L3:
  1921  001306  6F89               	movwf	main@m_TASK& (0+255),b
  1922  001308                     l6594:
  1923                           
  1924                           ; BSR set to: 1
  1925                           
  1926                           ; BSR set to: 1
  1927                           ;main.c: 130: }
  1928  001308  C189  F10C         	movff	main@m_TASK,??_main
  1929  00130C  C18A  F10D         	movff	main@m_TASK+1,??_main+1
  1930                           
  1931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1932                           ; Switch size 1, requested type "space"
  1933                           ; Number of cases is 1, Range of values is 0 to 0
  1934                           ; switch strategies available:
  1935                           ; Name         Instructions Cycles
  1936                           ; simple_byte            4     3 (average)
  1937                           ;	Chosen strategy is simple_byte
  1938  001310  0101               	movlb	1	; () banked
  1939  001312  510D               	movf	(??_main+1)& (0+255),w,b
  1940  001314  0A00               	xorlw	0	; case 0
  1941  001316  A4D8               	btfss	status,2,c
  1942  001318  D7F3               	goto	l664
  1943                           
  1944                           ; BSR set to: 1
  1945                           ; Switch size 1, requested type "space"
  1946                           ; Number of cases is 4, Range of values is 1 to 4
  1947                           ; switch strategies available:
  1948                           ; Name         Instructions Cycles
  1949                           ; simple_byte           13     7 (average)
  1950                           ;	Chosen strategy is simple_byte
  1951  00131A  510C               	movf	??_main& (0+255),w,b
  1952  00131C  0A01               	xorlw	1	; case 1
  1953  00131E  B4D8               	btfsc	status,2,c
  1954  001320  D776               	goto	l654
  1955  001322  0A03               	xorlw	3	; case 2
  1956  001324  B4D8               	btfsc	status,2,c
  1957  001326  D77F               	goto	l656
  1958  001328  0A01               	xorlw	1	; case 3
  1959  00132A  B4D8               	btfsc	status,2,c
  1960  00132C  D7A5               	goto	l659
  1961  00132E  0A07               	xorlw	7	; case 4
  1962  001330  B4D8               	btfsc	status,2,c
  1963  001332  D7D0               	goto	l660
  1964  001334  D7E5               	goto	l664
  1965  001336                     __end_of_main:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           intcon	equ	0xFF2
  1972                           postinc0	equ	0xFEE
  1973                           wreg	equ	0xFE8
  1974                           postdec1	equ	0xFE5
  1975                           plusw1	equ	0xFE3
  1976                           fsr1l	equ	0xFE1
  1977                           plusw2	equ	0xFDB
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _strcat *****************
  1981 ;; Defined at:
  1982 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;  to              2   18[COMRAM] PTR unsigned char 
  1985 ;;		 -> main@alldata(80), 
  1986 ;;  from            2   20[COMRAM] PTR const unsigned char 
  1987 ;;		 -> pdust(21), main@GPSd_(29), 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  cp              2   22[COMRAM] PTR unsigned char 
  1990 ;;		 -> main@alldata(80), 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  2   18[COMRAM] PTR unsigned char 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2000 ;;      Params:         4       0       0       0       0       0       0
  2001 ;;      Locals:         2       0       0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0
  2003 ;;      Totals:         6       0       0       0       0       0       0
  2004 ;;Total ram usage:        6 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    2
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_main
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text1
  2015  0023F0                     __ptext1:
  2016                           	opt stack 0
  2017  0023F0                     _strcat:
  2018                           	opt stack 28
  2019                           
  2020                           ; BSR set to: 1
  2021                           ;incstack = 0
  2022  0023F0  C013  F017         	movff	strcat@to,strcat@cp
  2023  0023F4  C014  F018         	movff	strcat@to+1,strcat@cp+1
  2024  0023F8  D002               	goto	l1461
  2025  0023FA  4A17               	infsnz	strcat@cp,f,c
  2026  0023FC  2A18               	incf	strcat@cp+1,f,c
  2027  0023FE                     l1461:
  2028  0023FE  C017  FFD9         	movff	strcat@cp,fsr2l
  2029  002402  C018  FFDA         	movff	strcat@cp+1,fsr2h
  2030  002406  50DF               	movf	indf2,w,c
  2031  002408  B4D8               	btfsc	status,2,c
  2032  00240A  D005               	goto	l1464
  2033  00240C  D7F6               	goto	l1462
  2034  00240E  4A17               	infsnz	strcat@cp,f,c
  2035  002410  2A18               	incf	strcat@cp+1,f,c
  2036  002412  4A15               	infsnz	strcat@from,f,c
  2037  002414  2A16               	incf	strcat@from+1,f,c
  2038  002416                     l1464:
  2039  002416  C015  FFD9         	movff	strcat@from,fsr2l
  2040  00241A  C016  FFDA         	movff	strcat@from+1,fsr2h
  2041  00241E  C017  FFE1         	movff	strcat@cp,fsr1l
  2042  002422  C018  FFE2         	movff	strcat@cp+1,fsr1h
  2043  002426  CFDF FFE7          	movff	indf2,indf1
  2044  00242A  50E7               	movf	indf1,w,c
  2045  00242C  B4D8               	btfsc	status,2,c
  2046  00242E  0012               	return	
  2047  002430  D7EE               	goto	l1465
  2048  002432                     __end_of_strcat:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           intcon	equ	0xFF2
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           indf1	equ	0xFE7
  2058                           postdec1	equ	0xFE5
  2059                           plusw1	equ	0xFE3
  2060                           fsr1h	equ	0xFE2
  2061                           fsr1l	equ	0xFE1
  2062                           indf2	equ	0xFDF
  2063                           plusw2	equ	0xFDB
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _print_ln *****************
  2069 ;; Defined at:
  2070 ;;		line 145 in file "main.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  text            2   24[COMRAM] PTR unsigned char 
  2073 ;;		 -> DataRead(25), main@data_test(6), 
  2074 ;;  length          1   26[COMRAM] unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  i               2   30[COMRAM] int 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         3       0       0       0       0       0       0
  2087 ;;      Locals:         2       0       0       0       0       0       0
  2088 ;;      Temps:          3       0       0       0       0       0       0
  2089 ;;      Totals:         8       0       0       0       0       0       0
  2090 ;;Total ram usage:        8 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    3
  2093 ;; This function calls:
  2094 ;;		_EUSART1_Write
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;;		_GPS_read_data
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text2
  2102  002432                     __ptext2:
  2103                           	opt stack 0
  2104  002432                     _print_ln:
  2105                           	opt stack 27
  2106                           
  2107                           ;main.c: 147: for(int i = 0 ; i<length ; i++){
  2108                           
  2109                           ;incstack = 0
  2110  002432  0E00               	movlw	0
  2111  002434  6E20               	movwf	print_ln@i+1,c
  2112  002436  0E00               	movlw	0
  2113  002438  6E1F               	movwf	print_ln@i,c
  2114  00243A  D00B               	goto	l676
  2115  00243C                     
  2116                           ;main.c: 148: EUSART1_Write(text[i]);
  2117  00243C  501F               	movf	print_ln@i,w,c
  2118  00243E  2419               	addwf	print_ln@text,w,c
  2119  002440  6ED9               	movwf	fsr2l,c
  2120  002442  5020               	movf	print_ln@i+1,w,c
  2121  002444  201A               	addwfc	print_ln@text+1,w,c
  2122  002446  6EDA               	movwf	fsr2h,c
  2123  002448  50DF               	movf	indf2,w,c
  2124  00244A  ECB7  F012         	call	_EUSART1_Write
  2125  00244E  4A1F               	infsnz	print_ln@i,f,c
  2126  002450  2A20               	incf	print_ln@i+1,f,c
  2127  002452                     l676:
  2128  002452  501B               	movf	print_ln@length,w,c
  2129  002454  6E1C               	movwf	??_print_ln& (0+255),c
  2130  002456  6A1D               	clrf	(??_print_ln+1)& (0+255),c
  2131  002458  501C               	movf	??_print_ln,w,c
  2132  00245A  5C1F               	subwf	print_ln@i,w,c
  2133  00245C  5020               	movf	print_ln@i+1,w,c
  2134  00245E  0A80               	xorlw	128
  2135  002460  6E1E               	movwf	(??_print_ln+2)& (0+255),c
  2136  002462  501D               	movf	??_print_ln+1,w,c
  2137  002464  0A80               	xorlw	128
  2138  002466  581E               	subwfb	(??_print_ln+2)& (0+255),w,c
  2139  002468  A0D8               	btfss	status,0,c
  2140  00246A  D7E8               	goto	l677
  2141                           
  2142                           ;main.c: 149: }
  2143                           ;main.c: 150: EUSART1_Write('\n');
  2144  00246C  0E0A               	movlw	10
  2145  00246E  ECB7  F012         	call	_EUSART1_Write
  2146  002472  0012               	return		;funcret
  2147  002474                     __end_of_print_ln:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           tblptrh	equ	0xFF7
  2151                           tblptrl	equ	0xFF6
  2152                           tablat	equ	0xFF5
  2153                           intcon	equ	0xFF2
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           indf1	equ	0xFE7
  2157                           postdec1	equ	0xFE5
  2158                           plusw1	equ	0xFE3
  2159                           fsr1h	equ	0xFE2
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           plusw2	equ	0xFDB
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function _memset *****************
  2168 ;; Defined at:
  2169 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/memset.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  p1              2   18[COMRAM] PTR void 
  2172 ;;		 -> GPS_read_data@Databuf(25), main@alldata(80), 
  2173 ;;  c               2   20[COMRAM] int 
  2174 ;;  n               2   22[COMRAM] unsigned int 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  p               2   24[COMRAM] PTR unsigned char 
  2177 ;;		 -> GPS_read_data@Databuf(25), main@alldata(80), 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  2   18[COMRAM] PTR void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2187 ;;      Params:         6       0       0       0       0       0       0
  2188 ;;      Locals:         2       0       0       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0
  2190 ;;      Totals:         8       0       0       0       0       0       0
  2191 ;;Total ram usage:        8 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    2
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;;		_GPS_read_data
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text3
  2203  00269E                     __ptext3:
  2204                           	opt stack 0
  2205  00269E                     _memset:
  2206                           	opt stack 28
  2207                           
  2208                           ;incstack = 0
  2209  00269E  C013  F019         	movff	memset@p1,memset@p
  2210  0026A2  C014  F01A         	movff	memset@p1+1,memset@p+1
  2211  0026A6  D008               	goto	l1331
  2212  0026A8                     l4852:
  2213  0026A8  C019  FFD9         	movff	memset@p,fsr2l
  2214  0026AC  C01A  FFDA         	movff	memset@p+1,fsr2h
  2215  0026B0  C015  FFDF         	movff	memset@c,indf2
  2216  0026B4  4A19               	infsnz	memset@p,f,c
  2217  0026B6  2A1A               	incf	memset@p+1,f,c
  2218  0026B8                     l1331:
  2219  0026B8  0617               	decf	memset@n,f,c
  2220  0026BA  A0D8               	btfss	status,0,c
  2221  0026BC  0618               	decf	memset@n+1,f,c
  2222  0026BE  2817               	incf	memset@n,w,c
  2223  0026C0  E1F3               	bnz	l4852
  2224  0026C2  2818               	incf	memset@n+1,w,c
  2225  0026C4  B4D8               	btfsc	status,2,c
  2226  0026C6  0012               	return	
  2227  0026C8  D7EF               	goto	l1332
  2228  0026CA                     __end_of_memset:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           intcon	equ	0xFF2
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           indf1	equ	0xFE7
  2238                           postdec1	equ	0xFE5
  2239                           plusw1	equ	0xFE3
  2240                           fsr1h	equ	0xFE2
  2241                           fsr1l	equ	0xFE1
  2242                           indf2	equ	0xFDF
  2243                           plusw2	equ	0xFDB
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _get_pm *****************
  2249 ;; Defined at:
  2250 ;;		line 173 in file "main.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  p_V            32    0        unsigned char [32]
  2255 ;;  p_calV         15    0        unsigned char [15]
  2256 ;;  TASK            2   10[BANK1 ] int 
  2257 ;;  oldtimecount    2    8[BANK1 ] unsigned int 
  2258 ;;  oldtimecount    2    6[BANK1 ] unsigned int 
  2259 ;;  oldtimecount    2    4[BANK1 ] unsigned int 
  2260 ;;  oldtimecount    2    2[BANK1 ] unsigned int 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  1    wreg      void 
  2263 ;; Registers used:
  2264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2270 ;;      Params:         0       0       0       0       0       0       0
  2271 ;;      Locals:         0       0      10       0       0       0       0
  2272 ;;      Temps:          0       0       2       0       0       0       0
  2273 ;;      Totals:         0       0      12       0       0       0       0
  2274 ;;Total ram usage:       12 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    6
  2277 ;; This function calls:
  2278 ;;		_ADC_GetConversionResult
  2279 ;;		_ADC_IsConversionDone
  2280 ;;		_ADC_SelectChannel
  2281 ;;		_ADC_StartConversion
  2282 ;;		_EUSART1_Write
  2283 ;;		___ftadd
  2284 ;;		___ftdiv
  2285 ;;		___ftmul
  2286 ;;		___lwtoft
  2287 ;;		_print_
  2288 ;;		_sprintf
  2289 ;;		_strlen
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text4
  2296  000C7A                     __ptext4:
  2297                           	opt stack 0
  2298  000C7A                     _get_pm:
  2299                           	opt stack 24
  2300                           
  2301                           ;main.c: 174: int TASK =1;
  2302                           
  2303                           ;incstack = 0
  2304  000C7A  0E00               	movlw	0
  2305  000C7C  0101               	movlb	1	; () banked
  2306  000C7E  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2307  000C80  0E01               	movlw	1
  2308  000C82  6F0A               	movwf	get_pm@TASK& (0+255),b
  2309                           
  2310                           ;main.c: 175: unsigned int oldtimecount1 =0;
  2311  000C84  0E00               	movlw	0
  2312  000C86  6F03               	movwf	(get_pm@oldtimecount1+1)& (0+255),b
  2313  000C88  0E00               	movlw	0
  2314  000C8A  6F02               	movwf	get_pm@oldtimecount1& (0+255),b
  2315                           
  2316                           ;main.c: 176: unsigned int oldtimecount2 =0;
  2317  000C8C  0E00               	movlw	0
  2318  000C8E  6F05               	movwf	(get_pm@oldtimecount2+1)& (0+255),b
  2319  000C90  0E00               	movlw	0
  2320  000C92  6F04               	movwf	get_pm@oldtimecount2& (0+255),b
  2321                           
  2322                           ;main.c: 177: unsigned int oldtimecount3 =0;
  2323  000C94  0E00               	movlw	0
  2324  000C96  6F07               	movwf	(get_pm@oldtimecount3+1)& (0+255),b
  2325  000C98  0E00               	movlw	0
  2326  000C9A  6F06               	movwf	get_pm@oldtimecount3& (0+255),b
  2327                           
  2328                           ;main.c: 178: unsigned int oldtimecount4 =0;
  2329  000C9C  0E00               	movlw	0
  2330  000C9E  6F09               	movwf	(get_pm@oldtimecount4+1)& (0+255),b
  2331  000CA0  0E00               	movlw	0
  2332  000CA2  6F08               	movwf	get_pm@oldtimecount4& (0+255),b
  2333                           
  2334                           ;main.c: 185: while (TASK!=7)
  2335  000CA4  D118               	goto	l695
  2336  000CA6                     l694:
  2337                           
  2338                           ; BSR set to: 1
  2339                           ;main.c: 191: LATAbits.LATA5 = 0;
  2340  000CA6  9A89               	bcf	3977,5,c	;volatile
  2341                           
  2342                           ;main.c: 192: oldtimecount1 = timecount;
  2343  000CA8  C1C7  F102         	movff	_timecount,get_pm@oldtimecount1
  2344  000CAC  C1C8  F103         	movff	_timecount+1,get_pm@oldtimecount1+1
  2345                           
  2346                           ; BSR set to: 1
  2347                           ;main.c: 193: TASK = 2;
  2348  000CB0  0E00               	movlw	0
  2349  000CB2  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2350  000CB4  0E02               	movlw	2
  2351  000CB6  D0F1               	goto	L6
  2352  000CB8                     
  2353                           ; BSR set to: 1
  2354                           ;main.c: 198: if( (timecount - oldtimecount1)<14 )
  2355                           
  2356                           ; BSR set to: 1
  2357  000CB8  C102  F100         	movff	get_pm@oldtimecount1,??_get_pm
  2358  000CBC  C103  F101         	movff	get_pm@oldtimecount1+1,??_get_pm+1
  2359  000CC0  1F00               	comf	??_get_pm& (0+255),f,b
  2360  000CC2  1F01               	comf	(??_get_pm+1)& (0+255),f,b
  2361  000CC4  4B00               	infsnz	??_get_pm& (0+255),f,b
  2362  000CC6  2B01               	incf	(??_get_pm+1)& (0+255),f,b
  2363  000CC8  51C7               	movf	_timecount& (0+255),w,b
  2364  000CCA  2700               	addwf	??_get_pm& (0+255),f,b
  2365  000CCC  51C8               	movf	(_timecount+1)& (0+255),w,b
  2366  000CCE  2301               	addwfc	(??_get_pm+1)& (0+255),f,b
  2367  000CD0  5101               	movf	(??_get_pm+1)& (0+255),w,b
  2368  000CD2  E104               	bnz	l6374
  2369  000CD4  0E0E               	movlw	14
  2370  000CD6  5D00               	subwf	??_get_pm& (0+255),w,b
  2371  000CD8  A0D8               	btfss	status,0,c
  2372  000CDA  D0FD               	goto	l695
  2373  000CDC                     l6374:
  2374                           
  2375                           ; BSR set to: 1
  2376                           ;main.c: 203: else
  2377                           ;main.c: 204: {
  2378                           ;main.c: 205: ADC_SelectChannel(channel_AN9);
  2379  000CDC  0E09               	movlw	9
  2380  000CDE  EC39  F014         	call	_ADC_SelectChannel
  2381                           
  2382                           ;main.c: 206: ADC_StartConversion();
  2383  000CE2  EC9A  F014         	call	_ADC_StartConversion	;wreg free
  2384                           
  2385                           ;main.c: 207: TASK =3;
  2386  000CE6  0E00               	movlw	0
  2387  000CE8  0101               	movlb	1	; () banked
  2388  000CEA  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2389  000CEC  0E03               	movlw	3
  2390  000CEE  D0D5               	goto	L6
  2391  000CF0                     
  2392                           ; BSR set to: 1
  2393                           ;main.c: 215: if(ADC_IsConversionDone()){
  2394                           
  2395                           ; BSR set to: 1
  2396  000CF0  EC7B  F014         	call	_ADC_IsConversionDone	;wreg free
  2397  000CF4  0900               	iorlw	0
  2398  000CF6  B4D8               	btfsc	status,2,c
  2399  000CF8  D0EE               	goto	l695
  2400                           
  2401                           ;main.c: 216: voltsMeasured = ADC_GetConversionResult();
  2402  000CFA  EC50  F014         	call	_ADC_GetConversionResult	;wreg free
  2403  000CFE  C013  F094         	movff	?_ADC_GetConversionResult,_voltsMeasured
  2404  000D02  C014  F095         	movff	?_ADC_GetConversionResult+1,_voltsMeasured+1
  2405                           
  2406                           ;main.c: 217: TASK = 4;
  2407  000D06  0E00               	movlw	0
  2408  000D08  0101               	movlb	1	; () banked
  2409  000D0A  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2410  000D0C  0E04               	movlw	4
  2411  000D0E  6F0A               	movwf	get_pm@TASK& (0+255),b
  2412                           
  2413                           ; BSR set to: 1
  2414                           ;main.c: 218: oldtimecount2 = timecount;
  2415  000D10  C1C7  F104         	movff	_timecount,get_pm@oldtimecount2
  2416  000D14  C1C8  F105         	movff	_timecount+1,get_pm@oldtimecount2+1
  2417                           
  2418                           ; BSR set to: 1
  2419                           ;main.c: 220: }
  2420                           ;main.c: 221: break;
  2421  000D18  D0DE               	goto	l695
  2422  000D1A                     
  2423                           ; BSR set to: 1
  2424                           ;main.c: 224: if( (timecount - oldtimecount2) < 2 ) {
  2425                           
  2426                           ; BSR set to: 1
  2427  000D1A  C104  F100         	movff	get_pm@oldtimecount2,??_get_pm
  2428  000D1E  C105  F101         	movff	get_pm@oldtimecount2+1,??_get_pm+1
  2429  000D22  1F00               	comf	??_get_pm& (0+255),f,b
  2430  000D24  1F01               	comf	(??_get_pm+1)& (0+255),f,b
  2431  000D26  4B00               	infsnz	??_get_pm& (0+255),f,b
  2432  000D28  2B01               	incf	(??_get_pm+1)& (0+255),f,b
  2433  000D2A  51C7               	movf	_timecount& (0+255),w,b
  2434  000D2C  2700               	addwf	??_get_pm& (0+255),f,b
  2435  000D2E  51C8               	movf	(_timecount+1)& (0+255),w,b
  2436  000D30  2301               	addwfc	(??_get_pm+1)& (0+255),f,b
  2437  000D32  5101               	movf	(??_get_pm+1)& (0+255),w,b
  2438  000D34  E104               	bnz	l702
  2439  000D36  0E02               	movlw	2
  2440  000D38  5D00               	subwf	??_get_pm& (0+255),w,b
  2441  000D3A  A0D8               	btfss	status,0,c
  2442  000D3C  D0CC               	goto	l695
  2443  000D3E                     l702:
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;main.c: 227: else{
  2447                           ;main.c: 228: LATAbits.LATA5 = 1;
  2448  000D3E  8A89               	bsf	3977,5,c	;volatile
  2449                           
  2450                           ; BSR set to: 1
  2451                           ;main.c: 229: TASK = 5;
  2452  000D40  0E00               	movlw	0
  2453  000D42  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2454  000D44  0E05               	movlw	5
  2455  000D46  6F0A               	movwf	get_pm@TASK& (0+255),b
  2456                           
  2457                           ; BSR set to: 1
  2458                           ;main.c: 230: oldtimecount3 = timecount;
  2459  000D48  C1C7  F106         	movff	_timecount,get_pm@oldtimecount3
  2460  000D4C  C1C8  F107         	movff	_timecount+1,get_pm@oldtimecount3+1
  2461                           
  2462                           ; BSR set to: 1
  2463                           ;main.c: 231: }
  2464                           ;main.c: 233: break;
  2465  000D50  D0C2               	goto	l695
  2466  000D52                     
  2467                           ; BSR set to: 1
  2468                           ;main.c: 236: if( (timecount - oldtimecount3) < 484 )
  2469                           
  2470                           ; BSR set to: 1
  2471  000D52  C106  F100         	movff	get_pm@oldtimecount3,??_get_pm
  2472  000D56  C107  F101         	movff	get_pm@oldtimecount3+1,??_get_pm+1
  2473  000D5A  1F00               	comf	??_get_pm& (0+255),f,b
  2474  000D5C  1F01               	comf	(??_get_pm+1)& (0+255),f,b
  2475  000D5E  4B00               	infsnz	??_get_pm& (0+255),f,b
  2476  000D60  2B01               	incf	(??_get_pm+1)& (0+255),f,b
  2477  000D62  51C7               	movf	_timecount& (0+255),w,b
  2478  000D64  2700               	addwf	??_get_pm& (0+255),f,b
  2479  000D66  51C8               	movf	(_timecount+1)& (0+255),w,b
  2480  000D68  2301               	addwfc	(??_get_pm+1)& (0+255),f,b
  2481  000D6A  0EE4               	movlw	228
  2482  000D6C  5D00               	subwf	??_get_pm& (0+255),w,b
  2483  000D6E  0E01               	movlw	1
  2484  000D70  5901               	subwfb	(??_get_pm+1)& (0+255),w,b
  2485  000D72  A0D8               	btfss	status,0,c
  2486  000D74  D0B0               	goto	l695
  2487                           
  2488                           ; BSR set to: 1
  2489                           ;main.c: 240: else{
  2490                           ;main.c: 242: calcVoltage = (float)voltsMeasured * 5.0f / 1024.0f;
  2491                           
  2492                           ; BSR set to: 1
  2493                           
  2494                           ; BSR set to: 1
  2495                           ;main.c: 239: }
  2496                           
  2497                           ; BSR set to: 1
  2498                           ;main.c: 237: {
  2499                           ;main.c: 238: break;
  2500  000D76  0E00               	movlw	0
  2501  000D78  6E2A               	movwf	___ftmul@f2,c
  2502  000D7A  0EA0               	movlw	160
  2503  000D7C  6E2B               	movwf	___ftmul@f2+1,c
  2504  000D7E  0E40               	movlw	64
  2505  000D80  6E2C               	movwf	___ftmul@f2+2,c
  2506  000D82  C094  F01B         	movff	_voltsMeasured,___lwtoft@c
  2507  000D86  C095  F01C         	movff	_voltsMeasured+1,___lwtoft@c+1
  2508  000D8A  ECF3  F013         	call	___lwtoft	;wreg free
  2509  000D8E  C01B  F027         	movff	?___lwtoft,___ftmul@f1
  2510  000D92  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
  2511  000D96  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
  2512  000D9A  ECA8  F00D         	call	___ftmul	;wreg free
  2513  000D9E  C027  F09D         	movff	?___ftmul,___ftdiv@f1
  2514  000DA2  C028  F09E         	movff	?___ftmul+1,___ftdiv@f1+1
  2515  000DA6  C029  F09F         	movff	?___ftmul+2,___ftdiv@f1+2
  2516  000DAA  0E00               	movlw	0
  2517  000DAC  0100               	movlb	0	; () banked
  2518  000DAE  6FA0               	movwf	___ftdiv@f2& (0+255),b
  2519  000DB0  0E80               	movlw	128
  2520  000DB2  6FA1               	movwf	(___ftdiv@f2+1)& (0+255),b
  2521  000DB4  0E44               	movlw	68
  2522  000DB6  6FA2               	movwf	(___ftdiv@f2+2)& (0+255),b
  2523  000DB8  EC22  F00E         	call	___ftdiv	;wreg free
  2524  000DBC  C09D  F09A         	movff	?___ftdiv,_calcVoltage
  2525  000DC0  C09E  F09B         	movff	?___ftdiv+1,_calcVoltage+1
  2526  000DC4  C09F  F09C         	movff	?___ftdiv+2,_calcVoltage+2
  2527                           
  2528                           ;main.c: 243: dustDensity = (15 * calcVoltage - 0.0999f);
  2529  000DC8  0E00               	movlw	0
  2530  000DCA  6E2A               	movwf	___ftmul@f2,c
  2531  000DCC  0E70               	movlw	112
  2532  000DCE  6E2B               	movwf	___ftmul@f2+1,c
  2533  000DD0  0E41               	movlw	65
  2534  000DD2  6E2C               	movwf	___ftmul@f2+2,c
  2535  000DD4  C09A  F027         	movff	_calcVoltage,___ftmul@f1
  2536  000DD8  C09B  F028         	movff	_calcVoltage+1,___ftmul@f1+1
  2537  000DDC  C09C  F029         	movff	_calcVoltage+2,___ftmul@f1+2
  2538  000DE0  ECA8  F00D         	call	___ftmul	;wreg free
  2539  000DE4  C027  F0A4         	movff	?___ftmul,___ftadd@f1
  2540  000DE8  C028  F0A5         	movff	?___ftmul+1,___ftadd@f1+1
  2541  000DEC  C029  F0A6         	movff	?___ftmul+2,___ftadd@f1+2
  2542  000DF0  0E98               	movlw	152
  2543  000DF2  0100               	movlb	0	; () banked
  2544  000DF4  6FA7               	movwf	___ftadd@f2& (0+255),b
  2545  000DF6  0ECC               	movlw	204
  2546  000DF8  6FA8               	movwf	(___ftadd@f2+1)& (0+255),b
  2547  000DFA  0EBD               	movlw	189
  2548  000DFC  6FA9               	movwf	(___ftadd@f2+2)& (0+255),b
  2549  000DFE  EC92  F00A         	call	___ftadd	;wreg free
  2550  000E02  C0A4  F091         	movff	?___ftadd,_dustDensity
  2551  000E06  C0A5  F092         	movff	?___ftadd+1,_dustDensity+1
  2552  000E0A  C0A6  F093         	movff	?___ftadd+2,_dustDensity+2
  2553                           
  2554                           ;main.c: 246: char p_V[32] , p_calV[15];
  2555                           ;main.c: 249: sprintf(pdust , "averagepm25:%f," , dustDensity );
  2556  000E0E  0EE2               	movlw	low _pdust
  2557  000E10  0100               	movlb	0	; () banked
  2558  000E12  6FB6               	movwf	sprintf@sp& (0+255),b
  2559  000E14  0E01               	movlw	high _pdust
  2560  000E16  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  2561  000E18  0E13               	movlw	low STR_42
  2562  000E1A  6FB8               	movwf	sprintf@f& (0+255),b
  2563  000E1C  0E7F               	movlw	high STR_42
  2564  000E1E  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  2565  000E20  C091  F0BA         	movff	_dustDensity,?_sprintf+4
  2566  000E24  C092  F0BB         	movff	_dustDensity+1,?_sprintf+5
  2567  000E28  C093  F0BC         	movff	_dustDensity+2,?_sprintf+6
  2568  000E2C  EC8B  F000         	call	_sprintf	;wreg free
  2569                           
  2570                           ;main.c: 258: print_(pdust , strlen(pdust));
  2571  000E30  0EE2               	movlw	low _pdust
  2572  000E32  6E19               	movwf	print_@text,c
  2573  000E34  0E01               	movlw	high _pdust
  2574  000E36  6E1A               	movwf	print_@text+1,c
  2575  000E38  0EE2               	movlw	low _pdust
  2576  000E3A  6E13               	movwf	strlen@s,c
  2577  000E3C  0E01               	movlw	high _pdust
  2578  000E3E  6E14               	movwf	strlen@s+1,c
  2579  000E40  EC9A  F012         	call	_strlen	;wreg free
  2580  000E44  5013               	movf	?_strlen,w,c
  2581  000E46  6E1B               	movwf	print_@length,c
  2582  000E48  EC7C  F012         	call	_print_	;wreg free
  2583                           
  2584                           ;main.c: 261: TASK = 6;
  2585  000E4C  0E00               	movlw	0
  2586  000E4E  0101               	movlb	1	; () banked
  2587  000E50  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2588  000E52  0E06               	movlw	6
  2589  000E54  6F0A               	movwf	get_pm@TASK& (0+255),b
  2590                           
  2591                           ; BSR set to: 1
  2592                           ;main.c: 262: oldtimecount4 = timecount ;
  2593  000E56  C1C7  F108         	movff	_timecount,get_pm@oldtimecount4
  2594  000E5A  C1C8  F109         	movff	_timecount+1,get_pm@oldtimecount4+1
  2595                           
  2596                           ; BSR set to: 1
  2597                           ;main.c: 263: }
  2598                           ;main.c: 265: break;
  2599  000E5E  D03B               	goto	l695
  2600  000E60                     
  2601                           ; BSR set to: 1
  2602                           ;main.c: 267: if( (timecount - oldtimecount4) < 50000 ){
  2603                           
  2604                           ; BSR set to: 1
  2605  000E60  C108  F100         	movff	get_pm@oldtimecount4,??_get_pm
  2606  000E64  C109  F101         	movff	get_pm@oldtimecount4+1,??_get_pm+1
  2607  000E68  1F00               	comf	??_get_pm& (0+255),f,b
  2608  000E6A  1F01               	comf	(??_get_pm+1)& (0+255),f,b
  2609  000E6C  4B00               	infsnz	??_get_pm& (0+255),f,b
  2610  000E6E  2B01               	incf	(??_get_pm+1)& (0+255),f,b
  2611  000E70  51C7               	movf	_timecount& (0+255),w,b
  2612  000E72  2700               	addwf	??_get_pm& (0+255),f,b
  2613  000E74  51C8               	movf	(_timecount+1)& (0+255),w,b
  2614  000E76  2301               	addwfc	(??_get_pm+1)& (0+255),f,b
  2615  000E78  0E50               	movlw	80
  2616  000E7A  5D00               	subwf	??_get_pm& (0+255),w,b
  2617  000E7C  0EC3               	movlw	195
  2618  000E7E  5901               	subwfb	(??_get_pm+1)& (0+255),w,b
  2619  000E80  A0D8               	btfss	status,0,c
  2620  000E82  D029               	goto	l695
  2621                           
  2622                           ; BSR set to: 1
  2623                           ;main.c: 271: else
  2624                           ;main.c: 272: {
  2625                           ;main.c: 273: EUSART1_Write(0x0D);
  2626                           
  2627                           ; BSR set to: 1
  2628                           
  2629                           ; BSR set to: 1
  2630                           ;main.c: 269: }
  2631                           
  2632                           ; BSR set to: 1
  2633                           ;main.c: 268: break;
  2634  000E84  0E0D               	movlw	13
  2635  000E86  ECB7  F012         	call	_EUSART1_Write
  2636                           
  2637                           ;main.c: 274: TASK = 7;
  2638  000E8A  0E00               	movlw	0
  2639  000E8C  0101               	movlb	1	; () banked
  2640  000E8E  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2641  000E90  0E07               	movlw	7
  2642  000E92  D003               	goto	L6
  2643  000E94                     
  2644                           ; BSR set to: 1
  2645                           ;main.c: 282: TASK = 1;
  2646                           
  2647                           ; BSR set to: 1
  2648  000E94  0E00               	movlw	0
  2649  000E96  6F0B               	movwf	(get_pm@TASK+1)& (0+255),b
  2650  000E98  0E01               	movlw	1
  2651  000E9A                     L6:
  2652  000E9A  6F0A               	movwf	get_pm@TASK& (0+255),b
  2653                           
  2654                           ;main.c: 283: }
  2655  000E9C  D01C               	goto	l695
  2656  000E9E                     
  2657                           ; BSR set to: 1
  2658                           
  2659                           ; BSR set to: 1
  2660  000E9E  C10A  F100         	movff	get_pm@TASK,??_get_pm
  2661  000EA2  C10B  F101         	movff	get_pm@TASK+1,??_get_pm+1
  2662                           
  2663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2664                           ; Switch size 1, requested type "space"
  2665                           ; Number of cases is 1, Range of values is 0 to 0
  2666                           ; switch strategies available:
  2667                           ; Name         Instructions Cycles
  2668                           ; simple_byte            4     3 (average)
  2669                           ;	Chosen strategy is simple_byte
  2670  000EA6  5101               	movf	(??_get_pm+1)& (0+255),w,b
  2671  000EA8  0A00               	xorlw	0	; case 0
  2672  000EAA  A4D8               	btfss	status,2,c
  2673  000EAC  D7F3               	goto	l710
  2674                           
  2675                           ; BSR set to: 1
  2676                           ; Switch size 1, requested type "space"
  2677                           ; Number of cases is 6, Range of values is 1 to 6
  2678                           ; switch strategies available:
  2679                           ; Name         Instructions Cycles
  2680                           ; simple_byte           19    10 (average)
  2681                           ;	Chosen strategy is simple_byte
  2682  000EAE  5100               	movf	??_get_pm& (0+255),w,b
  2683  000EB0  0A01               	xorlw	1	; case 1
  2684  000EB2  B4D8               	btfsc	status,2,c
  2685  000EB4  D6F8               	goto	l694
  2686  000EB6  0A03               	xorlw	3	; case 2
  2687  000EB8  B4D8               	btfsc	status,2,c
  2688  000EBA  D6FE               	goto	l696
  2689  000EBC  0A01               	xorlw	1	; case 3
  2690  000EBE  B4D8               	btfsc	status,2,c
  2691  000EC0  D717               	goto	l699
  2692  000EC2  0A07               	xorlw	7	; case 4
  2693  000EC4  B4D8               	btfsc	status,2,c
  2694  000EC6  D729               	goto	l701
  2695  000EC8  0A01               	xorlw	1	; case 5
  2696  000ECA  B4D8               	btfsc	status,2,c
  2697  000ECC  D742               	goto	l704
  2698  000ECE  0A03               	xorlw	3	; case 6
  2699  000ED0  B4D8               	btfsc	status,2,c
  2700  000ED2  D7C6               	goto	l707
  2701  000ED4  D7DF               	goto	l710
  2702  000ED6                     l695:
  2703                           
  2704                           ; BSR set to: 1
  2705                           
  2706                           ; BSR set to: 1
  2707  000ED6  0E07               	movlw	7
  2708  000ED8  0101               	movlb	1	; () banked
  2709  000EDA  190A               	xorwf	get_pm@TASK& (0+255),w,b
  2710  000EDC  110B               	iorwf	(get_pm@TASK+1)& (0+255),w,b
  2711  000EDE  B4D8               	btfsc	status,2,c
  2712  000EE0  0012               	return	
  2713  000EE2  D7DD               	goto	l693
  2714  000EE4                     __end_of_get_pm:
  2715                           	opt stack 0
  2716                           tblptru	equ	0xFF8
  2717                           tblptrh	equ	0xFF7
  2718                           tblptrl	equ	0xFF6
  2719                           tablat	equ	0xFF5
  2720                           intcon	equ	0xFF2
  2721                           postinc0	equ	0xFEE
  2722                           wreg	equ	0xFE8
  2723                           indf1	equ	0xFE7
  2724                           postdec1	equ	0xFE5
  2725                           plusw1	equ	0xFE3
  2726                           fsr1h	equ	0xFE2
  2727                           fsr1l	equ	0xFE1
  2728                           indf2	equ	0xFDF
  2729                           plusw2	equ	0xFDB
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _print_ *****************
  2735 ;; Defined at:
  2736 ;;		line 138 in file "main.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  text            2   24[COMRAM] PTR unsigned char 
  2739 ;;		 -> pdust(21), 
  2740 ;;  length          1   26[COMRAM] unsigned char 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  i               2   30[COMRAM] int 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2752 ;;      Params:         3       0       0       0       0       0       0
  2753 ;;      Locals:         2       0       0       0       0       0       0
  2754 ;;      Temps:          3       0       0       0       0       0       0
  2755 ;;      Totals:         8       0       0       0       0       0       0
  2756 ;;Total ram usage:        8 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    3
  2759 ;; This function calls:
  2760 ;;		_EUSART1_Write
  2761 ;; This function is called by:
  2762 ;;		_get_pm
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text5
  2767  0024F8                     __ptext5:
  2768                           	opt stack 0
  2769  0024F8                     _print_:
  2770                           	opt stack 26
  2771                           
  2772                           ;main.c: 140: for(int i = 0 ; i<length ; i++){
  2773                           
  2774                           ; BSR set to: 1
  2775                           ;incstack = 0
  2776  0024F8  0E00               	movlw	0
  2777  0024FA  6E20               	movwf	print_@i+1,c
  2778  0024FC  0E00               	movlw	0
  2779  0024FE  6E1F               	movwf	print_@i,c
  2780  002500  D00B               	goto	l670
  2781  002502                     
  2782                           ;main.c: 141: EUSART1_Write(text[i]);
  2783  002502  501F               	movf	print_@i,w,c
  2784  002504  2419               	addwf	print_@text,w,c
  2785  002506  6ED9               	movwf	fsr2l,c
  2786  002508  5020               	movf	print_@i+1,w,c
  2787  00250A  201A               	addwfc	print_@text+1,w,c
  2788  00250C  6EDA               	movwf	fsr2h,c
  2789  00250E  50DF               	movf	indf2,w,c
  2790  002510  ECB7  F012         	call	_EUSART1_Write
  2791  002514  4A1F               	infsnz	print_@i,f,c
  2792  002516  2A20               	incf	print_@i+1,f,c
  2793  002518                     l670:
  2794  002518  501B               	movf	print_@length,w,c
  2795  00251A  6E1C               	movwf	??_print_& (0+255),c
  2796  00251C  6A1D               	clrf	(??_print_+1)& (0+255),c
  2797  00251E  501C               	movf	??_print_,w,c
  2798  002520  5C1F               	subwf	print_@i,w,c
  2799  002522  5020               	movf	print_@i+1,w,c
  2800  002524  0A80               	xorlw	128
  2801  002526  6E1E               	movwf	(??_print_+2)& (0+255),c
  2802  002528  501D               	movf	??_print_+1,w,c
  2803  00252A  0A80               	xorlw	128
  2804  00252C  581E               	subwfb	(??_print_+2)& (0+255),w,c
  2805  00252E  B0D8               	btfsc	status,0,c
  2806  002530  0012               	return	
  2807  002532  D7E7               	goto	l671
  2808  002534                     __end_of_print_:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           intcon	equ	0xFF2
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           indf1	equ	0xFE7
  2818                           postdec1	equ	0xFE5
  2819                           plusw1	equ	0xFE3
  2820                           fsr1h	equ	0xFE2
  2821                           fsr1l	equ	0xFE1
  2822                           indf2	equ	0xFDF
  2823                           plusw2	equ	0xFDB
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function ___lwtoft *****************
  2829 ;; Defined at:
  2830 ;;		line 28 in file "/Applications/microchip/xc8/v1.45/sources/common/lwtoft.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  c               2   26[COMRAM] unsigned int 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;		None
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  3   26[COMRAM] float 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0, cstack
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2844 ;;      Params:         3       0       0       0       0       0       0
  2845 ;;      Locals:         0       0       0       0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0
  2847 ;;      Totals:         3       0       0       0       0       0       0
  2848 ;;Total ram usage:        3 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    3
  2851 ;; This function calls:
  2852 ;;		___ftpack
  2853 ;; This function is called by:
  2854 ;;		_get_pm
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text6
  2859  0027E6                     __ptext6:
  2860                           	opt stack 0
  2861  0027E6                     ___lwtoft:
  2862                           	opt stack 26
  2863                           
  2864                           ;incstack = 0
  2865  0027E6  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  2866  0027EA  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  2867  0027EE  6A15               	clrf	___ftpack@arg+2,c
  2868  0027F0  0E8E               	movlw	142
  2869  0027F2  6E16               	movwf	___ftpack@exp,c
  2870  0027F4  0E00               	movlw	0
  2871  0027F6  6E17               	movwf	___ftpack@sign,c
  2872  0027F8  EC96  F00E         	call	___ftpack	;wreg free
  2873  0027FC  C013  F01B         	movff	?___ftpack,?___lwtoft
  2874  002800  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  2875  002804  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  2876  002808  0012               	return	
  2877  00280A                     __end_of___lwtoft:
  2878                           	opt stack 0
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           intcon	equ	0xFF2
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           indf1	equ	0xFE7
  2887                           postdec1	equ	0xFE5
  2888                           plusw1	equ	0xFE3
  2889                           fsr1h	equ	0xFE2
  2890                           fsr1l	equ	0xFE1
  2891                           indf2	equ	0xFDF
  2892                           plusw2	equ	0xFDB
  2893                           fsr2h	equ	0xFDA
  2894                           fsr2l	equ	0xFD9
  2895                           status	equ	0xFD8
  2896                           
  2897 ;; *************** function ___ftdiv *****************
  2898 ;; Defined at:
  2899 ;;		line 54 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdiv.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  f1              3    0[BANK0 ] float 
  2902 ;;  f2              3    3[BANK0 ] float 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  f3              3    7[BANK0 ] float 
  2905 ;;  sign            1   11[BANK0 ] unsigned char 
  2906 ;;  exp             1   10[BANK0 ] unsigned char 
  2907 ;;  cntr            1    6[BANK0 ] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  3    0[BANK0 ] float 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2917 ;;      Params:         0       6       0       0       0       0       0
  2918 ;;      Locals:         0       6       0       0       0       0       0
  2919 ;;      Temps:          3       0       0       0       0       0       0
  2920 ;;      Totals:         3      12       0       0       0       0       0
  2921 ;;Total ram usage:       15 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    3
  2924 ;; This function calls:
  2925 ;;		___ftpack
  2926 ;; This function is called by:
  2927 ;;		_get_pm
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text7
  2932  001C44                     __ptext7:
  2933                           	opt stack 0
  2934  001C44                     ___ftdiv:
  2935                           	opt stack 26
  2936                           
  2937                           ;incstack = 0
  2938  001C44  C09F  F036         	movff	___ftdiv@f1+2,??___ftdiv
  2939  001C48  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  2940  001C4A  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  2941  001C4C  0100               	movlb	0	; () banked
  2942  001C4E  359E               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2943  001C50  3636               	rlcf	??___ftdiv& (0+255),f,c
  2944  001C52  E301               	bnc	u6301
  2945  001C54  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  2946  001C56                     u6301:
  2947  001C56  5036               	movf	??___ftdiv,w,c
  2948  001C58  6FA7               	movwf	___ftdiv@exp& (0+255),b
  2949  001C5A  51A7               	movf	___ftdiv@exp& (0+255),w,b
  2950  001C5C  A4D8               	btfss	status,2,c
  2951  001C5E  D007               	goto	l1165
  2952                           
  2953                           ; BSR set to: 0
  2954  001C60  0E00               	movlw	0
  2955  001C62  6F9D               	movwf	?___ftdiv& (0+255),b
  2956  001C64  0E00               	movlw	0
  2957  001C66  6F9E               	movwf	(?___ftdiv+1)& (0+255),b
  2958  001C68  0E00               	movlw	0
  2959  001C6A  6F9F               	movwf	(?___ftdiv+2)& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962  001C6C  0012               	return	
  2963  001C6E                     l1165:
  2964                           
  2965                           ; BSR set to: 0
  2966                           
  2967                           ; BSR set to: 0
  2968  001C6E  C0A2  F036         	movff	___ftdiv@f2+2,??___ftdiv
  2969  001C72  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  2970  001C74  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  2971  001C76  35A1               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  2972  001C78  3636               	rlcf	??___ftdiv& (0+255),f,c
  2973  001C7A  E301               	bnc	u6321
  2974  001C7C  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  2975  001C7E                     u6321:
  2976  001C7E  5036               	movf	??___ftdiv,w,c
  2977  001C80  6FA8               	movwf	___ftdiv@sign& (0+255),b
  2978  001C82  51A8               	movf	___ftdiv@sign& (0+255),w,b
  2979  001C84  A4D8               	btfss	status,2,c
  2980  001C86  D007               	goto	l1167
  2981                           
  2982                           ; BSR set to: 0
  2983  001C88  0E00               	movlw	0
  2984  001C8A  6F9D               	movwf	?___ftdiv& (0+255),b
  2985  001C8C  0E00               	movlw	0
  2986  001C8E  6F9E               	movwf	(?___ftdiv+1)& (0+255),b
  2987  001C90  0E00               	movlw	0
  2988  001C92  6F9F               	movwf	(?___ftdiv+2)& (0+255),b
  2989                           
  2990                           ; BSR set to: 0
  2991  001C94  0012               	return	
  2992  001C96                     l1167:
  2993                           
  2994                           ; BSR set to: 0
  2995                           
  2996                           ; BSR set to: 0
  2997  001C96  0E00               	movlw	0
  2998  001C98  6FA4               	movwf	___ftdiv@f3& (0+255),b
  2999  001C9A  0E00               	movlw	0
  3000  001C9C  6FA5               	movwf	(___ftdiv@f3+1)& (0+255),b
  3001  001C9E  0E00               	movlw	0
  3002  001CA0  6FA6               	movwf	(___ftdiv@f3+2)& (0+255),b
  3003                           
  3004                           ; BSR set to: 0
  3005  001CA2  51A8               	movf	___ftdiv@sign& (0+255),w,b
  3006  001CA4  0F89               	addlw	137
  3007  001CA6  5FA7               	subwf	___ftdiv@exp& (0+255),f,b
  3008                           
  3009                           ; BSR set to: 0
  3010  001CA8  C09F  F0A8         	movff	___ftdiv@f1+2,___ftdiv@sign
  3011                           
  3012                           ; BSR set to: 0
  3013  001CAC  51A2               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3014  001CAE  1BA8               	xorwf	___ftdiv@sign& (0+255),f,b
  3015                           
  3016                           ; BSR set to: 0
  3017  001CB0  0E80               	movlw	128
  3018  001CB2  17A8               	andwf	___ftdiv@sign& (0+255),f,b
  3019                           
  3020                           ; BSR set to: 0
  3021  001CB4  8F9E               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3022                           
  3023                           ; BSR set to: 0
  3024  001CB6  0EFF               	movlw	255
  3025  001CB8  179D               	andwf	___ftdiv@f1& (0+255),f,b
  3026  001CBA  0EFF               	movlw	255
  3027  001CBC  179E               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3028  001CBE  0E00               	movlw	0
  3029  001CC0  179F               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3030                           
  3031                           ; BSR set to: 0
  3032  001CC2  8FA1               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3033                           
  3034                           ; BSR set to: 0
  3035  001CC4  0EFF               	movlw	255
  3036  001CC6  17A0               	andwf	___ftdiv@f2& (0+255),f,b
  3037  001CC8  0EFF               	movlw	255
  3038  001CCA  17A1               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3039  001CCC  0E00               	movlw	0
  3040  001CCE  17A2               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3041                           
  3042                           ; BSR set to: 0
  3043  001CD0  0E18               	movlw	24
  3044  001CD2  6FA3               	movwf	___ftdiv@cntr& (0+255),b
  3045  001CD4                     
  3046                           ; BSR set to: 0
  3047                           
  3048                           ; BSR set to: 0
  3049  001CD4  90D8               	bcf	status,0,c
  3050  001CD6  37A4               	rlcf	___ftdiv@f3& (0+255),f,b
  3051  001CD8  37A5               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3052  001CDA  37A6               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3053                           
  3054                           ; BSR set to: 0
  3055  001CDC  51A0               	movf	___ftdiv@f2& (0+255),w,b
  3056  001CDE  5D9D               	subwf	___ftdiv@f1& (0+255),w,b
  3057  001CE0  51A1               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3058  001CE2  599E               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3059  001CE4  51A2               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3060  001CE6  599F               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3061  001CE8  A0D8               	btfss	status,0,c
  3062  001CEA  D007               	goto	l1169
  3063                           
  3064                           ; BSR set to: 0
  3065  001CEC  51A0               	movf	___ftdiv@f2& (0+255),w,b
  3066  001CEE  5F9D               	subwf	___ftdiv@f1& (0+255),f,b
  3067  001CF0  51A1               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3068  001CF2  5B9E               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3069  001CF4  51A2               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3070  001CF6  5B9F               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3071                           
  3072                           ; BSR set to: 0
  3073  001CF8  81A4               	bsf	___ftdiv@f3& (0+255),0,b
  3074  001CFA                     l1169:
  3075                           
  3076                           ; BSR set to: 0
  3077  001CFA  90D8               	bcf	status,0,c
  3078  001CFC  379D               	rlcf	___ftdiv@f1& (0+255),f,b
  3079  001CFE  379E               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3080  001D00  379F               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3081                           
  3082                           ; BSR set to: 0
  3083  001D02  2FA3               	decfsz	___ftdiv@cntr& (0+255),f,b
  3084  001D04  D7E7               	goto	l1168
  3085                           
  3086                           ; BSR set to: 0
  3087                           
  3088                           ; BSR set to: 0
  3089  001D06  C0A4  F013         	movff	___ftdiv@f3,___ftpack@arg
  3090  001D0A  C0A5  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3091  001D0E  C0A6  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3092  001D12  C0A7  F016         	movff	___ftdiv@exp,___ftpack@exp
  3093  001D16  C0A8  F017         	movff	___ftdiv@sign,___ftpack@sign
  3094  001D1A  EC96  F00E         	call	___ftpack	;wreg free
  3095  001D1E  C013  F09D         	movff	?___ftpack,?___ftdiv
  3096  001D22  C014  F09E         	movff	?___ftpack+1,?___ftdiv+1
  3097  001D26  C015  F09F         	movff	?___ftpack+2,?___ftdiv+2
  3098  001D2A  0012               	return	
  3099  001D2C                     __end_of___ftdiv:
  3100                           	opt stack 0
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           intcon	equ	0xFF2
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           indf1	equ	0xFE7
  3109                           postdec1	equ	0xFE5
  3110                           plusw1	equ	0xFE3
  3111                           fsr1h	equ	0xFE2
  3112                           fsr1l	equ	0xFE1
  3113                           indf2	equ	0xFDF
  3114                           plusw2	equ	0xFDB
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _ADC_StartConversion *****************
  3120 ;; Defined at:
  3121 ;;		line 89 in file "mcc_generated_files/adc.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		None
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3135 ;;      Params:         0       0       0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0
  3138 ;;      Totals:         0       0       0       0       0       0       0
  3139 ;;Total ram usage:        0 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    2
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_get_pm
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text8
  3150  002934                     __ptext8:
  3151                           	opt stack 0
  3152  002934                     _ADC_StartConversion:
  3153                           	opt stack 27
  3154                           
  3155                           ;adc.c: 92: ADCON0bits.GO_nDONE = 1;
  3156                           
  3157                           ;incstack = 0
  3158  002934  82C2               	bsf	4034,1,c	;volatile
  3159  002936  0012               	return		;funcret
  3160  002938                     __end_of_ADC_StartConversion:
  3161                           	opt stack 0
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           intcon	equ	0xFF2
  3167                           postinc0	equ	0xFEE
  3168                           wreg	equ	0xFE8
  3169                           indf1	equ	0xFE7
  3170                           postdec1	equ	0xFE5
  3171                           plusw1	equ	0xFE3
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           plusw2	equ	0xFDB
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _ADC_SelectChannel *****************
  3181 ;; Defined at:
  3182 ;;		line 81 in file "mcc_generated_files/adc.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  channel         1    wreg     enum E6661
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  channel         1   19[COMRAM] enum E6661
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3196 ;;      Params:         0       0       0       0       0       0       0
  3197 ;;      Locals:         1       0       0       0       0       0       0
  3198 ;;      Temps:          1       0       0       0       0       0       0
  3199 ;;      Totals:         2       0       0       0       0       0       0
  3200 ;;Total ram usage:        2 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    2
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_get_pm
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text9
  3211  002872                     __ptext9:
  3212                           	opt stack 0
  3213  002872                     _ADC_SelectChannel:
  3214                           	opt stack 27
  3215                           
  3216                           ;incstack = 0
  3217                           ;ADC_SelectChannel@channel stored from wreg
  3218  002872  6E14               	movwf	ADC_SelectChannel@channel,c
  3219                           
  3220                           ;adc.c: 84: ADCON0bits.CHS = channel;
  3221  002874  C014  F013         	movff	ADC_SelectChannel@channel,??_ADC_SelectChannel
  3222  002878  4613               	rlncf	??_ADC_SelectChannel,f,c
  3223  00287A  4613               	rlncf	??_ADC_SelectChannel,f,c
  3224  00287C  50C2               	movf	4034,w,c	;volatile
  3225  00287E  1813               	xorwf	??_ADC_SelectChannel,w,c
  3226  002880  0B83               	andlw	-125
  3227  002882  1813               	xorwf	??_ADC_SelectChannel,w,c
  3228  002884  6EC2               	movwf	4034,c	;volatile
  3229                           
  3230                           ;adc.c: 86: ADCON0bits.ADON = 1;
  3231  002886  80C2               	bsf	4034,0,c	;volatile
  3232  002888  0012               	return		;funcret
  3233  00288A                     __end_of_ADC_SelectChannel:
  3234                           	opt stack 0
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           intcon	equ	0xFF2
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           indf1	equ	0xFE7
  3243                           postdec1	equ	0xFE5
  3244                           plusw1	equ	0xFE3
  3245                           fsr1h	equ	0xFE2
  3246                           fsr1l	equ	0xFE1
  3247                           indf2	equ	0xFDF
  3248                           plusw2	equ	0xFDB
  3249                           fsr2h	equ	0xFDA
  3250                           fsr2l	equ	0xFD9
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function _ADC_IsConversionDone *****************
  3254 ;; Defined at:
  3255 ;;		line 96 in file "mcc_generated_files/adc.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      unsigned char 
  3262 ;; Registers used:
  3263 ;;		wreg
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3269 ;;      Params:         0       0       0       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0
  3272 ;;      Totals:         0       0       0       0       0       0       0
  3273 ;;Total ram usage:        0 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    2
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_get_pm
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text10
  3284  0028F6                     __ptext10:
  3285                           	opt stack 0
  3286  0028F6                     _ADC_IsConversionDone:
  3287                           	opt stack 27
  3288                           
  3289                           ;adc.c: 99: return ((bool)(!ADCON0bits.GO_nDONE));
  3290                           
  3291                           ;incstack = 0
  3292  0028F6  B2C2               	btfsc	4034,1,c	;volatile
  3293  0028F8  D002               	goto	u5920
  3294  0028FA  0E01               	movlw	1
  3295  0028FC  0012               	return	
  3296  0028FE                     u5920:
  3297  0028FE  0E00               	movlw	0
  3298  002900  0012               	return	
  3299  002902                     __end_of_ADC_IsConversionDone:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           intcon	equ	0xFF2
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf1	equ	0xFE7
  3309                           postdec1	equ	0xFE5
  3310                           plusw1	equ	0xFE3
  3311                           fsr1h	equ	0xFE2
  3312                           fsr1l	equ	0xFE1
  3313                           indf2	equ	0xFDF
  3314                           plusw2	equ	0xFDB
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _ADC_GetConversionResult *****************
  3320 ;; Defined at:
  3321 ;;		line 102 in file "mcc_generated_files/adc.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  2   18[COMRAM] unsigned int 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         2       0       0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0
  3337 ;;      Temps:          2       0       0       0       0       0       0
  3338 ;;      Totals:         4       0       0       0       0       0       0
  3339 ;;Total ram usage:        4 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_get_pm
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text11
  3350  0028A0                     __ptext11:
  3351                           	opt stack 0
  3352  0028A0                     _ADC_GetConversionResult:
  3353                           	opt stack 27
  3354                           
  3355                           ;adc.c: 105: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  3356                           
  3357                           ;incstack = 0
  3358  0028A0  50C4               	movf	4036,w,c	;volatile
  3359  0028A2  6E16               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  3360  0028A4  6A15               	clrf	??_ADC_GetConversionResult& (0+255),c
  3361  0028A6  50C3               	movf	4035,w,c	;volatile
  3362  0028A8  2415               	addwf	??_ADC_GetConversionResult,w,c
  3363  0028AA  6E13               	movwf	?_ADC_GetConversionResult,c
  3364  0028AC  0E00               	movlw	0
  3365  0028AE  2016               	addwfc	??_ADC_GetConversionResult+1,w,c
  3366  0028B0  6E14               	movwf	?_ADC_GetConversionResult+1,c
  3367  0028B2  0012               	return	
  3368  0028B4                     __end_of_ADC_GetConversionResult:
  3369                           	opt stack 0
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           intcon	equ	0xFF2
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           indf1	equ	0xFE7
  3378                           postdec1	equ	0xFE5
  3379                           plusw1	equ	0xFE3
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           plusw2	equ	0xFDB
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _esp8266_send *****************
  3389 ;; Defined at:
  3390 ;;		line 207 in file "mcc_generated_files/esp8266.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  data            2    0[BANK1 ] PTR unsigned char 
  3393 ;;		 -> main@alldata(80), 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  length_str      6    2[BANK1 ] unsigned char [6]
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3405 ;;      Params:         0       0       2       0       0       0       0
  3406 ;;      Locals:         0       0       6       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0
  3408 ;;      Totals:         0       0       8       0       0       0       0
  3409 ;;Total ram usage:        8 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    6
  3412 ;; This function calls:
  3413 ;;		_EUSART1_Read
  3414 ;;		__esp8266_print
  3415 ;;		__esp8266_waitResponse
  3416 ;;		_sprintf
  3417 ;;		_strlen
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text12
  3424  0020A0                     __ptext12:
  3425                           	opt stack 0
  3426  0020A0                     _esp8266_send:
  3427                           	opt stack 24
  3428                           
  3429                           ;esp8266.c: 208: unsigned char length_str[6] = "\0\0\0\0\0";
  3430                           
  3431                           ;incstack = 0
  3432  0020A0  EE20  F086         	lfsr	2,esp8266_send@F6994
  3433  0020A4  EE11  F002         	lfsr	1,esp8266_send@length_str
  3434  0020A8  0E05               	movlw	5
  3435  0020AA                     u6411:
  3436  0020AA  CFDB FFE3          	movff	plusw2,plusw1
  3437  0020AE  06E8               	decf	wreg,f,c
  3438  0020B0  E2FC               	bc	u6411
  3439                           
  3440                           ;esp8266.c: 209: sprintf(length_str, "%u", strlen(data));
  3441  0020B2  0E02               	movlw	low esp8266_send@length_str
  3442  0020B4  0100               	movlb	0	; () banked
  3443  0020B6  6FB6               	movwf	sprintf@sp& (0+255),b
  3444  0020B8  0E01               	movlw	high esp8266_send@length_str
  3445  0020BA  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3446  0020BC  0EFB               	movlw	low STR_20
  3447  0020BE  6FB8               	movwf	sprintf@f& (0+255),b
  3448  0020C0  0E7F               	movlw	high STR_20
  3449  0020C2  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3450  0020C4  C100  F013         	movff	esp8266_send@data,strlen@s
  3451  0020C8  C101  F014         	movff	esp8266_send@data+1,strlen@s+1
  3452  0020CC  EC9A  F012         	call	_strlen	;wreg free
  3453  0020D0  C013  F0BA         	movff	?_strlen,?_sprintf+4
  3454  0020D4  C014  F0BB         	movff	?_strlen+1,?_sprintf+5
  3455  0020D8  EC8B  F000         	call	_sprintf	;wreg free
  3456                           
  3457                           ;esp8266.c: 211: _esp8266_print("AT+CIPSEND=0,");
  3458  0020DC  0E31               	movlw	low STR_23
  3459  0020DE  6E14               	movwf	__esp8266_print@ptr,c
  3460  0020E0  0E7F               	movlw	high STR_23
  3461  0020E2  6E15               	movwf	__esp8266_print@ptr+1,c
  3462  0020E4  EC60  F011         	call	__esp8266_print	;wreg free
  3463                           
  3464                           ;esp8266.c: 212: _esp8266_print(length_str);
  3465  0020E8  0E02               	movlw	low esp8266_send@length_str
  3466  0020EA  6E14               	movwf	__esp8266_print@ptr,c
  3467  0020EC  0E01               	movlw	high esp8266_send@length_str
  3468  0020EE  6E15               	movwf	__esp8266_print@ptr+1,c
  3469  0020F0  EC60  F011         	call	__esp8266_print	;wreg free
  3470                           
  3471                           ;esp8266.c: 213: _esp8266_print("\r\n");
  3472  0020F4  0ECD               	movlw	low (STR_26+2)
  3473  0020F6  6E14               	movwf	__esp8266_print@ptr,c
  3474  0020F8  0E7F               	movlw	high (STR_26+2)
  3475  0020FA  6E15               	movwf	__esp8266_print@ptr+1,c
  3476  0020FC  EC60  F011         	call	__esp8266_print	;wreg free
  3477  002100  ECF0  F012         	call	_EUSART1_Read	;wreg free
  3478  002104  0A3E               	xorlw	62
  3479  002106  A4D8               	btfss	status,2,c
  3480  002108  D7FB               	goto	l389
  3481                           
  3482                           ;esp8266.c: 215: _esp8266_print(data);
  3483  00210A  C100  F014         	movff	esp8266_send@data,__esp8266_print@ptr
  3484  00210E  C101  F015         	movff	esp8266_send@data+1,__esp8266_print@ptr+1
  3485  002112  EC60  F011         	call	__esp8266_print	;wreg free
  3486                           
  3487                           ;esp8266.c: 216: if (_esp8266_waitResponse() == 1) {
  3488  002116  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
  3489                           
  3490                           ;esp8266.c: 217: return 1;
  3491                           ;	Return value of _esp8266_send is never used
  3492  00211A  0012               	return	
  3493  00211C                     __end_of_esp8266_send:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           intcon	equ	0xFF2
  3500                           postinc0	equ	0xFEE
  3501                           wreg	equ	0xFE8
  3502                           indf1	equ	0xFE7
  3503                           postdec1	equ	0xFE5
  3504                           plusw1	equ	0xFE3
  3505                           fsr1h	equ	0xFE2
  3506                           fsr1l	equ	0xFE1
  3507                           indf2	equ	0xFDF
  3508                           plusw2	equ	0xFDB
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _strlen *****************
  3514 ;; Defined at:
  3515 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strlen.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  s               2   18[COMRAM] PTR const unsigned char 
  3518 ;;		 -> DataRead(25), pdust(21), main@alldata(80), main@data_test(6), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  cp              2   22[COMRAM] PTR const unsigned char 
  3521 ;;		 -> DataRead(25), pdust(21), main@alldata(80), main@data_test(6), 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  2   18[COMRAM] unsigned int 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3531 ;;      Params:         2       0       0       0       0       0       0
  3532 ;;      Locals:         2       0       0       0       0       0       0
  3533 ;;      Temps:          2       0       0       0       0       0       0
  3534 ;;      Totals:         6       0       0       0       0       0       0
  3535 ;;Total ram usage:        6 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    2
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_esp8266_send
  3542 ;;		_main
  3543 ;;		_get_pm
  3544 ;;		_GPS_read_data
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text13
  3549  002534                     __ptext13:
  3550                           	opt stack 0
  3551  002534                     _strlen:
  3552                           	opt stack 28
  3553                           
  3554                           ;incstack = 0
  3555  002534  C013  F017         	movff	strlen@s,strlen@cp
  3556  002538  C014  F018         	movff	strlen@s+1,strlen@cp+1
  3557  00253C  D002               	goto	l1484
  3558  00253E  4A17               	infsnz	strlen@cp,f,c
  3559  002540  2A18               	incf	strlen@cp+1,f,c
  3560  002542                     l1484:
  3561  002542  C017  FFD9         	movff	strlen@cp,fsr2l
  3562  002546  C018  FFDA         	movff	strlen@cp+1,fsr2h
  3563  00254A  50DF               	movf	indf2,w,c
  3564  00254C  A4D8               	btfss	status,2,c
  3565  00254E  D7F7               	goto	l1485
  3566  002550  C013  F015         	movff	strlen@s,??_strlen
  3567  002554  C014  F016         	movff	strlen@s+1,??_strlen+1
  3568  002558  1E15               	comf	??_strlen,f,c
  3569  00255A  1E16               	comf	??_strlen+1,f,c
  3570  00255C  4A15               	infsnz	??_strlen,f,c
  3571  00255E  2A16               	incf	??_strlen+1,f,c
  3572  002560  5017               	movf	strlen@cp,w,c
  3573  002562  2415               	addwf	??_strlen,w,c
  3574  002564  6E13               	movwf	?_strlen,c
  3575  002566  5018               	movf	strlen@cp+1,w,c
  3576  002568  2016               	addwfc	??_strlen+1,w,c
  3577  00256A  6E14               	movwf	?_strlen+1,c
  3578  00256C  0012               	return	
  3579  00256E                     __end_of_strlen:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           intcon	equ	0xFF2
  3586                           postinc0	equ	0xFEE
  3587                           wreg	equ	0xFE8
  3588                           indf1	equ	0xFE7
  3589                           postdec1	equ	0xFE5
  3590                           plusw1	equ	0xFE3
  3591                           fsr1h	equ	0xFE2
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           plusw2	equ	0xFDB
  3595                           fsr2h	equ	0xFDA
  3596                           fsr2l	equ	0xFD9
  3597                           status	equ	0xFD8
  3598                           
  3599 ;; *************** function _sprintf *****************
  3600 ;; Defined at:
  3601 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  sp              2   25[BANK0 ] PTR unsigned char 
  3604 ;;		 -> pdust(21), esp8266_send@length_str(6), esp8266_start@port_str(5), 
  3605 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3606 ;;		 -> STR_42(16), STR_22(3), STR_20(3), 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  tmpval          4   53[BANK0 ] struct .
  3609 ;;  val             4   47[BANK0 ] unsigned long 
  3610 ;;  fval            3   57[BANK0 ] unsigned long 
  3611 ;;  cp              3    0        PTR const unsigned char 
  3612 ;;  exp             2   51[BANK0 ] int 
  3613 ;;  prec            2   45[BANK0 ] int 
  3614 ;;  flag            2   43[BANK0 ] unsigned short 
  3615 ;;  ap              2   41[BANK0 ] PTR void [1]
  3616 ;;		 -> ?_sprintf(2), 
  3617 ;;  len             2    0        unsigned int 
  3618 ;;  width           2    0        int 
  3619 ;;  c               1   60[BANK0 ] char 
  3620 ;;  d               1    0        unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  2   25[BANK0 ] int 
  3623 ;; Registers used:
  3624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3630 ;;      Params:         0       7       0       0       0       0       0
  3631 ;;      Locals:         0      23       0       0       0       0       0
  3632 ;;      Temps:          0       6       0       0       0       0       0
  3633 ;;      Totals:         0      36       0       0       0       0       0
  3634 ;;Total ram usage:       36 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    5
  3637 ;; This function calls:
  3638 ;;		___awdiv
  3639 ;;		___ftadd
  3640 ;;		___ftge
  3641 ;;		___ftmul
  3642 ;;		___ftneg
  3643 ;;		___ftsub
  3644 ;;		___fttol
  3645 ;;		___lldiv
  3646 ;;		___llmod
  3647 ;;		___lltoft
  3648 ;;		___wmul
  3649 ;;		__div_to_l_
  3650 ;;		__tdiv_to_l_
  3651 ;;		_fround
  3652 ;;		_scale
  3653 ;; This function is called by:
  3654 ;;		_esp8266_send
  3655 ;;		_get_pm
  3656 ;;		_esp8266_start
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text14
  3661  000116                     __ptext14:
  3662                           	opt stack 0
  3663  000116                     _sprintf:
  3664                           	opt stack 24
  3665                           
  3666                           ;doprnt.c: 494: va_list ap;
  3667                           ;doprnt.c: 499: signed char c;
  3668                           ;doprnt.c: 501: int width;
  3669                           ;doprnt.c: 504: int prec;
  3670                           ;doprnt.c: 508: unsigned short flag;
  3671                           ;doprnt.c: 515: char d;
  3672                           ;doprnt.c: 516: double fval;
  3673                           ;doprnt.c: 517: int exp;
  3674                           ;doprnt.c: 523: union {
  3675                           ;doprnt.c: 524: unsigned long vd;
  3676                           ;doprnt.c: 525: double integ;
  3677                           ;doprnt.c: 526: } tmpval;
  3678                           ;doprnt.c: 528: unsigned long val;
  3679                           ;doprnt.c: 529: unsigned len;
  3680                           ;doprnt.c: 530: const char * cp;
  3681                           ;doprnt.c: 533: *ap = __va_start();
  3682                           
  3683                           ;incstack = 0
  3684  000116  0EBA               	movlw	low (?_sprintf+4)
  3685  000118  0100               	movlb	0	; () banked
  3686  00011A  6FC6               	movwf	sprintf@ap& (0+255),b
  3687  00011C  0E00               	movlw	high (?_sprintf+4)
  3688  00011E  6FC7               	movwf	(sprintf@ap+1)& (0+255),b
  3689                           
  3690                           ;doprnt.c: 536: while(c = *f++) {
  3691  000120  D389               	goto	u6260
  3692  000122                     
  3693                           ; BSR set to: 0
  3694                           ;doprnt.c: 538: if(c != '%')
  3695                           
  3696                           ; BSR set to: 0
  3697  000122  0E25               	movlw	37
  3698  000124  19D9               	xorwf	sprintf@c& (0+255),w,b
  3699  000126  B4D8               	btfsc	status,2,c
  3700  000128  D009               	goto	l816
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;doprnt.c: 540: {
  3704                           ;doprnt.c: 541: ((*sp++ = (c)));
  3705  00012A  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  3706  00012E  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  3707  000132  C0D9  FFDF         	movff	sprintf@c,indf2
  3708                           
  3709                           ; BSR set to: 0
  3710  000136  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3711  000138  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3712                           
  3713                           ;doprnt.c: 542: continue;
  3714  00013A  D37C               	goto	u6260
  3715  00013C                     l816:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;doprnt.c: 543: }
  3719                           ;doprnt.c: 548: flag = 0;
  3720                           
  3721                           ; BSR set to: 0
  3722  00013C  0E00               	movlw	0
  3723  00013E  6FC9               	movwf	(sprintf@flag+1)& (0+255),b
  3724  000140  0E00               	movlw	0
  3725  000142  6FC8               	movwf	sprintf@flag& (0+255),b
  3726                           
  3727                           ;doprnt.c: 635: switch(c = *f++) {
  3728  000144  D005               	goto	l817
  3729  000146                     
  3730                           ; BSR set to: 0
  3731                           ;doprnt.c: 663: flag |= 0x400;
  3732                           
  3733                           ; BSR set to: 0
  3734  000146  85C9               	bsf	(sprintf@flag+1)& (0+255),2,b
  3735                           
  3736                           ;doprnt.c: 664: break;
  3737  000148  D017               	goto	l821
  3738  00014A                     
  3739                           ; BSR set to: 0
  3740                           ;doprnt.c: 818: flag |= 0xC0;
  3741                           
  3742                           ; BSR set to: 0
  3743  00014A  0EC0               	movlw	192
  3744  00014C  13C8               	iorwf	sprintf@flag& (0+255),f,b
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;doprnt.c: 822: }
  3748                           
  3749                           ;doprnt.c: 819: break;
  3750  00014E  D014               	goto	l821
  3751  000150                     l817:
  3752                           
  3753                           ; BSR set to: 0
  3754                           
  3755                           ; BSR set to: 0
  3756  000150  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3757  000154  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3758  000158  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3759  00015A  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3760  00015C                     	if	0	;tblptru may be non-zero
  3761  00015C                     	endif
  3762  00015C                     	if	0	;tblptru may be non-zero
  3763  00015C                     	endif
  3764  00015C  0008               	tblrd		*
  3765  00015E  CFF5 F0D9          	movff	tablat,sprintf@c
  3766  000162  51D9               	movf	sprintf@c& (0+255),w,b
  3767                           
  3768                           ; Switch size 1, requested type "space"
  3769                           ; Number of cases is 3, Range of values is 0 to 117
  3770                           ; switch strategies available:
  3771                           ; Name         Instructions Cycles
  3772                           ; simple_byte           10     6 (average)
  3773                           ;	Chosen strategy is simple_byte
  3774  000164  0A00               	xorlw	0	; case 0
  3775  000166  B4D8               	btfsc	status,2,c
  3776  000168  D371               	goto	u6270
  3777  00016A  0A66               	xorlw	102	; case 102
  3778  00016C  B4D8               	btfsc	status,2,c
  3779  00016E  D7EB               	goto	l820
  3780  000170  0A13               	xorlw	19	; case 117
  3781  000172  B4D8               	btfsc	status,2,c
  3782  000174  D7EA               	goto	l823
  3783  000176  D35E               	goto	u6260
  3784  000178                     l821:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;doprnt.c: 825: if(flag & (0x700)) {
  3788                           
  3789                           ; BSR set to: 0
  3790  000178  0E07               	movlw	7
  3791  00017A  15C9               	andwf	(sprintf@flag+1)& (0+255),w,b
  3792  00017C  B4D8               	btfsc	status,2,c
  3793  00017E  D2C6               	goto	l824
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 829: prec = 6;
  3797  000180  0E00               	movlw	0
  3798  000182  6FCB               	movwf	(sprintf@prec+1)& (0+255),b
  3799  000184  0E06               	movlw	6
  3800  000186  6FCA               	movwf	sprintf@prec& (0+255),b
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3804  000188  C0C6  FFD9         	movff	sprintf@ap,fsr2l
  3805  00018C  C0C7  FFDA         	movff	sprintf@ap+1,fsr2h
  3806  000190  CFDE F0D6          	movff	postinc2,sprintf@fval
  3807  000194  CFDE F0D7          	movff	postinc2,sprintf@fval+1
  3808  000198  CFDD F0D8          	movff	postdec2,sprintf@fval+2
  3809                           
  3810                           ; BSR set to: 0
  3811  00019C  0E03               	movlw	3
  3812  00019E  27C6               	addwf	sprintf@ap& (0+255),f,b
  3813  0001A0  0E00               	movlw	0
  3814  0001A2  23C7               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 831: if(fval < 0.0) {
  3818  0001A4  AFD8               	btfss	(sprintf@fval+2)& (0+255),7,b
  3819  0001A6  D011               	goto	l825
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;doprnt.c: 832: fval = -fval;
  3823  0001A8  C0D6  F013         	movff	sprintf@fval,___ftneg@f1
  3824  0001AC  C0D7  F014         	movff	sprintf@fval+1,___ftneg@f1+1
  3825  0001B0  C0D8  F015         	movff	sprintf@fval+2,___ftneg@f1+2
  3826  0001B4  EC05  F014         	call	___ftneg	;wreg free
  3827  0001B8  C013  F0D6         	movff	?___ftneg,sprintf@fval
  3828  0001BC  C014  F0D7         	movff	?___ftneg+1,sprintf@fval+1
  3829  0001C0  C015  F0D8         	movff	?___ftneg+2,sprintf@fval+2
  3830                           
  3831                           ;doprnt.c: 833: flag |= 0x03;
  3832  0001C4  0E03               	movlw	3
  3833  0001C6  0100               	movlb	0	; () banked
  3834  0001C8  13C8               	iorwf	sprintf@flag& (0+255),f,b
  3835  0001CA                     l825:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 834: }
  3839                           ;doprnt.c: 835: exp = 0;
  3840                           
  3841                           ; BSR set to: 0
  3842  0001CA  0E00               	movlw	0
  3843  0001CC  6FD1               	movwf	(sprintf@exp+1)& (0+255),b
  3844  0001CE  0E00               	movlw	0
  3845  0001D0  6FD0               	movwf	sprintf@exp& (0+255),b
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;doprnt.c: 836: if( fval!=0) {
  3849  0001D2  51D6               	movf	sprintf@fval& (0+255),w,b
  3850  0001D4  11D7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3851  0001D6  11D8               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3852  0001D8  B4D8               	btfsc	status,2,c
  3853  0001DA  D086               	goto	l830
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3857  0001DC  0E82               	movlw	130
  3858  0001DE  6FBD               	movwf	??_sprintf& (0+255),b
  3859  0001E0  0EFF               	movlw	255
  3860  0001E2  6FBE               	movwf	(??_sprintf+1)& (0+255),b
  3861  0001E4  C0D6  F0BF         	movff	sprintf@fval,??_sprintf+2
  3862  0001E8  C0D7  F0C0         	movff	sprintf@fval+1,??_sprintf+3
  3863  0001EC  C0D8  F0C1         	movff	sprintf@fval+2,??_sprintf+4
  3864  0001F0  C0D9  F0C2         	movff	sprintf@fval+3,??_sprintf+5
  3865  0001F4  0E10               	movlw	16
  3866  0001F6  D005               	goto	u6020
  3867  0001F8                     u6025:
  3868  0001F8  90D8               	bcf	status,0,c
  3869  0001FA  33C2               	rrcf	(??_sprintf+5)& (0+255),f,b
  3870  0001FC  33C1               	rrcf	(??_sprintf+4)& (0+255),f,b
  3871  0001FE  33C0               	rrcf	(??_sprintf+3)& (0+255),f,b
  3872  000200  33BF               	rrcf	(??_sprintf+2)& (0+255),f,b
  3873  000202                     u6020:
  3874  000202  2EE8               	decfsz	wreg,f,c
  3875  000204  D7F9               	goto	u6025
  3876  000206  51BF               	movf	(??_sprintf+2)& (0+255),w,b
  3877  000208  25BD               	addwf	??_sprintf& (0+255),w,b
  3878  00020A  6FD0               	movwf	sprintf@exp& (0+255),b
  3879  00020C  0E00               	movlw	0
  3880  00020E  21BE               	addwfc	(??_sprintf+1)& (0+255),w,b
  3881  000210  6FD1               	movwf	(sprintf@exp+1)& (0+255),b
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;doprnt.c: 838: exp--;
  3885  000212  07D0               	decf	sprintf@exp& (0+255),f,b
  3886  000214  A0D8               	btfss	status,0,c
  3887  000216  07D1               	decf	(sprintf@exp+1)& (0+255),f,b
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;doprnt.c: 839: exp *= 3;
  3891  000218  C0D0  F021         	movff	sprintf@exp,___wmul@multiplier
  3892  00021C  C0D1  F022         	movff	sprintf@exp+1,___wmul@multiplier+1
  3893  000220  0E00               	movlw	0
  3894  000222  6E24               	movwf	___wmul@multiplicand+1,c
  3895  000224  0E03               	movlw	3
  3896  000226  6E23               	movwf	___wmul@multiplicand,c
  3897  000228  ECCD  F013         	call	___wmul	;wreg free
  3898  00022C  C021  F0D0         	movff	?___wmul,sprintf@exp
  3899  000230  C022  F0D1         	movff	?___wmul+1,sprintf@exp+1
  3900                           
  3901                           ;doprnt.c: 840: exp /= 10;
  3902  000234  C0D0  F019         	movff	sprintf@exp,___awdiv@dividend
  3903  000238  C0D1  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  3904  00023C  0E00               	movlw	0
  3905  00023E  6E1C               	movwf	___awdiv@divisor+1,c
  3906  000240  0E0A               	movlw	10
  3907  000242  6E1B               	movwf	___awdiv@divisor,c
  3908  000244  ECCD  F00F         	call	___awdiv	;wreg free
  3909  000248  C019  F0D0         	movff	?___awdiv,sprintf@exp
  3910  00024C  C01A  F0D1         	movff	?___awdiv+1,sprintf@exp+1
  3911                           
  3912                           ;doprnt.c: 841: if(exp < 0)
  3913  000250  0100               	movlb	0	; () banked
  3914  000252  AFD1               	btfss	(sprintf@exp+1)& (0+255),7,b
  3915  000254  D003               	goto	l827
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;doprnt.c: 842: exp--;
  3919  000256  07D0               	decf	sprintf@exp& (0+255),f,b
  3920  000258  A0D8               	btfss	status,0,c
  3921  00025A  07D1               	decf	(sprintf@exp+1)& (0+255),f,b
  3922  00025C                     l827:
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3926                           
  3927                           ; BSR set to: 0
  3928  00025C  51D0               	movf	sprintf@exp& (0+255),w,b
  3929  00025E  0800               	sublw	0
  3930  000260  EC2D  F004         	call	_scale
  3931  000264  C036  F0D2         	movff	?_scale,sprintf@tmpval
  3932  000268  C037  F0D3         	movff	?_scale+1,sprintf@tmpval+1
  3933  00026C  C038  F0D4         	movff	?_scale+2,sprintf@tmpval+2
  3934                           
  3935                           ;doprnt.c: 847: tmpval.integ *= fval;
  3936  000270  C0D2  F027         	movff	sprintf@tmpval,___ftmul@f1
  3937  000274  C0D3  F028         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3938  000278  C0D4  F029         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3939  00027C  C0D6  F02A         	movff	sprintf@fval,___ftmul@f2
  3940  000280  C0D7  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  3941  000284  C0D8  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  3942  000288  ECA8  F00D         	call	___ftmul	;wreg free
  3943  00028C  C027  F0D2         	movff	?___ftmul,sprintf@tmpval
  3944  000290  C028  F0D3         	movff	?___ftmul+1,sprintf@tmpval+1
  3945  000294  C029  F0D4         	movff	?___ftmul+2,sprintf@tmpval+2
  3946                           
  3947                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3948  000298  C0D2  F013         	movff	sprintf@tmpval,___ftge@ff1
  3949  00029C  C0D3  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3950  0002A0  C0D4  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3951  0002A4  0E00               	movlw	0
  3952  0002A6  6E16               	movwf	___ftge@ff2,c
  3953  0002A8  0E80               	movlw	128
  3954  0002AA  6E17               	movwf	___ftge@ff2+1,c
  3955  0002AC  0E3F               	movlw	63
  3956  0002AE  6E18               	movwf	___ftge@ff2+2,c
  3957  0002B0  EC85  F00F         	call	___ftge	;wreg free
  3958  0002B4  B0D8               	btfsc	status,0,c
  3959  0002B6  D005               	goto	l828
  3960                           
  3961                           ;doprnt.c: 849: exp--;
  3962  0002B8  0100               	movlb	0	; () banked
  3963  0002BA  07D0               	decf	sprintf@exp& (0+255),f,b
  3964  0002BC  A0D8               	btfss	status,0,c
  3965  0002BE  07D1               	decf	(sprintf@exp+1)& (0+255),f,b
  3966  0002C0  D013               	goto	l830
  3967  0002C2                     l828:
  3968                           
  3969                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3970                           
  3971                           ; BSR set to: 0
  3972  0002C2  C0D2  F013         	movff	sprintf@tmpval,___ftge@ff1
  3973  0002C6  C0D3  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3974  0002CA  C0D4  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3975  0002CE  0E00               	movlw	0
  3976  0002D0  6E16               	movwf	___ftge@ff2,c
  3977  0002D2  0E20               	movlw	32
  3978  0002D4  6E17               	movwf	___ftge@ff2+1,c
  3979  0002D6  0E41               	movlw	65
  3980  0002D8  6E18               	movwf	___ftge@ff2+2,c
  3981  0002DA  EC85  F00F         	call	___ftge	;wreg free
  3982  0002DE  A0D8               	btfss	status,0,c
  3983  0002E0  D003               	goto	l830
  3984                           
  3985                           ;doprnt.c: 851: exp++;
  3986  0002E2  0100               	movlb	0	; () banked
  3987  0002E4  4BD0               	infsnz	sprintf@exp& (0+255),f,b
  3988  0002E6  2BD1               	incf	(sprintf@exp+1)& (0+255),f,b
  3989  0002E8                     l830:
  3990                           
  3991                           ;doprnt.c: 852: }
  3992                           ;doprnt.c: 1112: if(prec <= 12)
  3993                           
  3994                           ; BSR set to: 0
  3995                           
  3996                           ; BSR set to: 0
  3997                           
  3998                           ; BSR set to: 0
  3999  0002E8  0100               	movlb	0	; () banked
  4000  0002EA  BFCB               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4001  0002EC  D006               	goto	u6060
  4002  0002EE  51CB               	movf	(sprintf@prec+1)& (0+255),w,b
  4003  0002F0  E11B               	bnz	l6000
  4004  0002F2  0E0D               	movlw	13
  4005  0002F4  5DCA               	subwf	sprintf@prec& (0+255),w,b
  4006  0002F6  B0D8               	btfsc	status,0,c
  4007  0002F8  D017               	goto	l831
  4008  0002FA                     u6060:
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;doprnt.c: 1113: fval += fround(prec);
  4012  0002FA  C0D6  F0A4         	movff	sprintf@fval,___ftadd@f1
  4013  0002FE  C0D7  F0A5         	movff	sprintf@fval+1,___ftadd@f1+1
  4014  000302  C0D8  F0A6         	movff	sprintf@fval+2,___ftadd@f1+2
  4015  000306  51CA               	movf	sprintf@prec& (0+255),w,b
  4016  000308  EC72  F007         	call	_fround
  4017  00030C  C036  F0A7         	movff	?_fround,___ftadd@f2
  4018  000310  C037  F0A8         	movff	?_fround+1,___ftadd@f2+1
  4019  000314  C038  F0A9         	movff	?_fround+2,___ftadd@f2+2
  4020  000318  EC92  F00A         	call	___ftadd	;wreg free
  4021  00031C  C0A4  F0D6         	movff	?___ftadd,sprintf@fval
  4022  000320  C0A5  F0D7         	movff	?___ftadd+1,sprintf@fval+1
  4023  000324  C0A6  F0D8         	movff	?___ftadd+2,sprintf@fval+2
  4024  000328                     l831:
  4025  000328                     l6000:
  4026                           
  4027                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4028  000328  0100               	movlb	0	; () banked
  4029  00032A  BFD1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4030  00032C  D006               	goto	u6070
  4031  00032E  51D1               	movf	(sprintf@exp+1)& (0+255),w,b
  4032  000330  E11F               	bnz	l6008
  4033  000332  0E0A               	movlw	10
  4034  000334  5DD0               	subwf	sprintf@exp& (0+255),w,b
  4035  000336  B0D8               	btfsc	status,0,c
  4036  000338  D01B               	goto	u6100
  4037  00033A                     u6070:
  4038                           
  4039                           ; BSR set to: 0
  4040  00033A  51D6               	movf	sprintf@fval& (0+255),w,b
  4041  00033C  11D7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4042  00033E  11D8               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4043  000340  B4D8               	btfsc	status,2,c
  4044  000342  D055               	goto	l832
  4045                           
  4046                           ; BSR set to: 0
  4047  000344  C0D6  F0A1         	movff	sprintf@fval,___fttol@f1
  4048  000348  C0D7  F0A2         	movff	sprintf@fval+1,___fttol@f1+1
  4049  00034C  C0D8  F0A3         	movff	sprintf@fval+2,___fttol@f1+2
  4050  000350  EC2C  F00D         	call	___fttol	;wreg free
  4051  000354  0100               	movlb	0	; () banked
  4052  000356  51A1               	movf	?___fttol& (0+255),w,b
  4053  000358  11A2               	iorwf	(?___fttol+1)& (0+255),w,b
  4054  00035A  11A3               	iorwf	(?___fttol+2)& (0+255),w,b
  4055  00035C  11A4               	iorwf	(?___fttol+3)& (0+255),w,b
  4056  00035E  B4D8               	btfsc	status,2,c
  4057                           
  4058                           ; BSR set to: 0
  4059  000360  BFD1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4060  000362  D045               	goto	l832
  4061  000364  51D1               	movf	(sprintf@exp+1)& (0+255),w,b
  4062  000366  E104               	bnz	l6008
  4063  000368  0E02               	movlw	2
  4064  00036A  5DD0               	subwf	sprintf@exp& (0+255),w,b
  4065  00036C  A0D8               	btfss	status,0,c
  4066  00036E  D03F               	goto	l832
  4067  000370                     u6100:
  4068  000370                     l6008:
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4072  000370  C0D2  F013         	movff	sprintf@tmpval,___ftge@ff1
  4073  000374  C0D3  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4074  000378  C0D4  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4075  00037C  0E70               	movlw	112
  4076  00037E  6E16               	movwf	___ftge@ff2,c
  4077  000380  0E89               	movlw	137
  4078  000382  6E17               	movwf	___ftge@ff2+1,c
  4079  000384  0E40               	movlw	64
  4080  000386  6E18               	movwf	___ftge@ff2+2,c
  4081  000388  EC85  F00F         	call	___ftge	;wreg free
  4082  00038C  B0D8               	btfsc	status,0,c
  4083  00038E  D003               	goto	l835
  4084                           
  4085                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4086  000390  0100               	movlb	0	; () banked
  4087  000392  0EF7               	movlw	247
  4088  000394  D002               	goto	L7
  4089  000396                     l835:
  4090                           
  4091                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4092                           
  4093                           ; BSR set to: 0
  4094  000396  0100               	movlb	0	; () banked
  4095  000398  0EF8               	movlw	248
  4096  00039A                     L7:
  4097  00039A  27D0               	addwf	sprintf@exp& (0+255),f,b
  4098  00039C  0EFF               	movlw	255
  4099  00039E  23D1               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;doprnt.c: 1124: }
  4103                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4104                           
  4105                           ; BSR set to: 0
  4106  0003A0  51D0               	movf	sprintf@exp& (0+255),w,b
  4107  0003A2  EC2D  F004         	call	_scale
  4108  0003A6  C036  F0D2         	movff	?_scale,sprintf@tmpval
  4109  0003AA  C037  F0D3         	movff	?_scale+1,sprintf@tmpval+1
  4110  0003AE  C038  F0D4         	movff	?_scale+2,sprintf@tmpval+2
  4111                           
  4112                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4113  0003B2  C0D6  F013         	movff	sprintf@fval,__tdiv_to_l_@f1
  4114  0003B6  C0D7  F014         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4115  0003BA  C0D8  F015         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4116  0003BE  C0D2  F016         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4117  0003C2  C0D3  F017         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4118  0003C6  C0D4  F018         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4119  0003CA  EC69  F00B         	call	__tdiv_to_l_	;wreg free
  4120  0003CE  C013  F0CC         	movff	?__tdiv_to_l_,sprintf@val
  4121  0003D2  C014  F0CD         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4122  0003D6  C015  F0CE         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4123  0003DA  C016  F0CF         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4124                           
  4125                           ;doprnt.c: 1129: fval = 0.0;
  4126  0003DE  0E00               	movlw	0
  4127  0003E0  0100               	movlb	0	; () banked
  4128  0003E2  6FD6               	movwf	sprintf@fval& (0+255),b
  4129  0003E4  0E00               	movlw	0
  4130  0003E6  6FD7               	movwf	(sprintf@fval+1)& (0+255),b
  4131  0003E8  0E00               	movlw	0
  4132  0003EA  6FD8               	movwf	(sprintf@fval+2)& (0+255),b
  4133                           
  4134                           ;doprnt.c: 1130: } else {
  4135  0003EC  D033               	goto	l841
  4136  0003EE                     l832:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4140                           
  4141                           ; BSR set to: 0
  4142  0003EE  C0D6  F0A1         	movff	sprintf@fval,___fttol@f1
  4143  0003F2  C0D7  F0A2         	movff	sprintf@fval+1,___fttol@f1+1
  4144  0003F6  C0D8  F0A3         	movff	sprintf@fval+2,___fttol@f1+2
  4145  0003FA  EC2C  F00D         	call	___fttol	;wreg free
  4146  0003FE  C0A1  F0CC         	movff	?___fttol,sprintf@val
  4147  000402  C0A2  F0CD         	movff	?___fttol+1,sprintf@val+1
  4148  000406  C0A3  F0CE         	movff	?___fttol+2,sprintf@val+2
  4149  00040A  C0A4  F0CF         	movff	?___fttol+3,sprintf@val+3
  4150                           
  4151                           ;doprnt.c: 1132: fval -= (double)val;
  4152  00040E  C0D6  F0B0         	movff	sprintf@fval,___ftsub@f1
  4153  000412  C0D7  F0B1         	movff	sprintf@fval+1,___ftsub@f1+1
  4154  000416  C0D8  F0B2         	movff	sprintf@fval+2,___ftsub@f1+2
  4155  00041A  C0CC  F01B         	movff	sprintf@val,___lltoft@c
  4156  00041E  C0CD  F01C         	movff	sprintf@val+1,___lltoft@c+1
  4157  000422  C0CE  F01D         	movff	sprintf@val+2,___lltoft@c+2
  4158  000426  C0CF  F01E         	movff	sprintf@val+3,___lltoft@c+3
  4159  00042A  EC32  F011         	call	___lltoft	;wreg free
  4160  00042E  C01B  F0B3         	movff	?___lltoft,___ftsub@f2
  4161  000432  C01C  F0B4         	movff	?___lltoft+1,___ftsub@f2+1
  4162  000436  C01D  F0B5         	movff	?___lltoft+2,___ftsub@f2+2
  4163  00043A  EC3A  F012         	call	___ftsub	;wreg free
  4164  00043E  C0B0  F0D6         	movff	?___ftsub,sprintf@fval
  4165  000442  C0B1  F0D7         	movff	?___ftsub+1,sprintf@fval+1
  4166  000446  C0B2  F0D8         	movff	?___ftsub+2,sprintf@fval+2
  4167                           
  4168                           ;doprnt.c: 1133: exp = 0;
  4169  00044A  0E00               	movlw	0
  4170  00044C  0100               	movlb	0	; () banked
  4171  00044E  6FD1               	movwf	(sprintf@exp+1)& (0+255),b
  4172  000450  0E00               	movlw	0
  4173  000452  6FD0               	movwf	sprintf@exp& (0+255),b
  4174  000454                     l841:
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;doprnt.c: 1134: }
  4178                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4179                           
  4180                           ; BSR set to: 0
  4181  000454  0E01               	movlw	1
  4182  000456  6FD9               	movwf	sprintf@c& (0+255),b
  4183  000458                     l6028:
  4184                           
  4185                           ; BSR set to: 0
  4186  000458  0E0A               	movlw	10
  4187  00045A  19D9               	xorwf	sprintf@c& (0+255),w,b
  4188  00045C  B4D8               	btfsc	status,2,c
  4189  00045E  D018               	goto	u6140
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;doprnt.c: 1137: if(val < dpowers[c])
  4193                           
  4194                           ; BSR set to: 0
  4195                           
  4196                           ; BSR set to: 0
  4197  000460  51D9               	movf	sprintf@c& (0+255),w,b
  4198  000462  0D04               	mullw	4
  4199  000464  0E91               	movlw	low _dpowers
  4200  000466  24F3               	addwf	prodl,w,c
  4201  000468  6EF6               	movwf	tblptrl,c
  4202  00046A  0E7E               	movlw	high _dpowers
  4203  00046C  20F4               	addwfc	prodh,w,c
  4204  00046E  6EF7               	movwf	tblptrh,c
  4205  000470                     	if	0	;There are less than 3 active tblptr bytes
  4206  000470                     	endif
  4207  000470  0009               	tblrd		*+
  4208  000472  50F5               	movf	tablat,w,c
  4209  000474  5DCC               	subwf	sprintf@val& (0+255),w,b
  4210  000476  0009               	tblrd		*+
  4211  000478  50F5               	movf	tablat,w,c
  4212  00047A  59CD               	subwfb	(sprintf@val+1)& (0+255),w,b
  4213  00047C  0009               	tblrd		*+
  4214  00047E  50F5               	movf	tablat,w,c
  4215  000480  59CE               	subwfb	(sprintf@val+2)& (0+255),w,b
  4216  000482  0009               	tblrd		*+
  4217  000484  50F5               	movf	tablat,w,c
  4218  000486  59CF               	subwfb	(sprintf@val+3)& (0+255),w,b
  4219  000488  A0D8               	btfss	status,0,c
  4220  00048A  D002               	goto	u6140
  4221                           
  4222                           ; BSR set to: 0
  4223                           
  4224                           ; BSR set to: 0
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 1138: break;
  4228  00048C  2BD9               	incf	sprintf@c& (0+255),f,b
  4229  00048E  D7E4               	goto	l6028
  4230  000490                     u6140:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;doprnt.c: 1175: {
  4234                           ;doprnt.c: 1188: if(flag & 0x03)
  4235                           
  4236                           ; BSR set to: 0
  4237  000490  0E03               	movlw	3
  4238  000492  15C8               	andwf	sprintf@flag& (0+255),w,b
  4239  000494  6FBD               	movwf	??_sprintf& (0+255),b
  4240  000496  0E00               	movlw	0
  4241  000498  15C9               	andwf	(sprintf@flag+1)& (0+255),w,b
  4242  00049A  6FBE               	movwf	(??_sprintf+1)& (0+255),b
  4243  00049C  51BD               	movf	??_sprintf& (0+255),w,b
  4244  00049E  11BE               	iorwf	(??_sprintf+1)& (0+255),w,b
  4245  0004A0  B4D8               	btfsc	status,2,c
  4246  0004A2  D050               	goto	l846
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4250  0004A4  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4251  0004A8  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4252  0004AC  0E2D               	movlw	45
  4253  0004AE  D047               	goto	L8
  4254  0004B0                     
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 1200: {
  4257                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4258                           
  4259                           ; BSR set to: 0
  4260  0004B0  C0CC  F013         	movff	sprintf@val,___lldiv@dividend
  4261  0004B4  C0CD  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  4262  0004B8  C0CE  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  4263  0004BC  C0CF  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  4264  0004C0  51D9               	movf	sprintf@c& (0+255),w,b
  4265  0004C2  0D04               	mullw	4
  4266  0004C4  0E91               	movlw	low _dpowers
  4267  0004C6  24F3               	addwf	prodl,w,c
  4268  0004C8  6EF6               	movwf	tblptrl,c
  4269  0004CA  0E7E               	movlw	high _dpowers
  4270  0004CC  20F4               	addwfc	prodh,w,c
  4271  0004CE  6EF7               	movwf	tblptrh,c
  4272  0004D0                     	if	0	;There are less than 3 active tblptr bytes
  4273  0004D0                     	endif
  4274  0004D0  0009               	tblrd		*+
  4275  0004D2  CFF5 F017          	movff	tablat,___lldiv@divisor
  4276  0004D6  0009               	tblrd		*+
  4277  0004D8  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4278  0004DC  0009               	tblrd		*+
  4279  0004DE  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4280  0004E2  000A               	tblrd		*-
  4281  0004E4  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4282  0004E8  EC0F  F010         	call	___lldiv	;wreg free
  4283  0004EC  C013  F0D2         	movff	?___lldiv,sprintf@tmpval
  4284  0004F0  C014  F0D3         	movff	?___lldiv+1,sprintf@tmpval+1
  4285  0004F4  C015  F0D4         	movff	?___lldiv+2,sprintf@tmpval+2
  4286  0004F8  C016  F0D5         	movff	?___lldiv+3,sprintf@tmpval+3
  4287                           
  4288                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4289  0004FC  C0D2  F020         	movff	sprintf@tmpval,___llmod@dividend
  4290  000500  C0D3  F021         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4291  000504  C0D4  F022         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4292  000508  C0D5  F023         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4293  00050C  0E0A               	movlw	10
  4294  00050E  6E24               	movwf	___llmod@divisor,c
  4295  000510  0E00               	movlw	0
  4296  000512  6E25               	movwf	___llmod@divisor+1,c
  4297  000514  0E00               	movlw	0
  4298  000516  6E26               	movwf	___llmod@divisor+2,c
  4299  000518  0E00               	movlw	0
  4300  00051A  6E27               	movwf	___llmod@divisor+3,c
  4301  00051C  ECFF  F010         	call	___llmod	;wreg free
  4302  000520  C020  F0D2         	movff	?___llmod,sprintf@tmpval
  4303  000524  C021  F0D3         	movff	?___llmod+1,sprintf@tmpval+1
  4304  000528  C022  F0D4         	movff	?___llmod+2,sprintf@tmpval+2
  4305  00052C  C023  F0D5         	movff	?___llmod+3,sprintf@tmpval+3
  4306                           
  4307                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4308  000530  0100               	movlb	0	; () banked
  4309  000532  51D2               	movf	sprintf@tmpval& (0+255),w,b
  4310  000534  0F30               	addlw	48
  4311  000536  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4312  00053A  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4313  00053E                     L8:
  4314  00053E  6EDF               	movwf	indf2,c
  4315                           
  4316                           ; BSR set to: 0
  4317  000540  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4318  000542  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4319  000544                     l846:
  4320                           
  4321                           ; BSR set to: 0
  4322                           
  4323                           ; BSR set to: 0
  4324  000544  07D9               	decf	sprintf@c& (0+255),f,b
  4325  000546  29D9               	incf	sprintf@c& (0+255),w,b
  4326  000548  B4D8               	btfsc	status,2,c
  4327  00054A  D00C               	goto	l849
  4328  00054C  D7B1               	goto	l847
  4329  00054E                     l6056:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4333  00054E  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4334  000552  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4335  000556  0E30               	movlw	48
  4336  000558  6EDF               	movwf	indf2,c
  4337                           
  4338                           ; BSR set to: 0
  4339  00055A  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4340  00055C  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;doprnt.c: 1209: exp--;
  4344  00055E  07D0               	decf	sprintf@exp& (0+255),f,b
  4345  000560  A0D8               	btfss	status,0,c
  4346  000562  07D1               	decf	(sprintf@exp+1)& (0+255),f,b
  4347  000564                     l849:
  4348                           
  4349                           ; BSR set to: 0
  4350                           
  4351                           ; BSR set to: 0
  4352  000564  BFD1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4353  000566  D005               	goto	u6170
  4354  000568  51D1               	movf	(sprintf@exp+1)& (0+255),w,b
  4355  00056A  E1F1               	bnz	l6056
  4356  00056C  05D0               	decf	sprintf@exp& (0+255),w,b
  4357  00056E  B0D8               	btfsc	status,0,c
  4358  000570  D7EE               	goto	l850
  4359  000572                     u6170:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;doprnt.c: 1210: }
  4363                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4364                           
  4365                           ; BSR set to: 0
  4366  000572  BFCB               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4367  000574  D009               	goto	l852
  4368  000576  51CB               	movf	(sprintf@prec+1)& (0+255),w,b
  4369  000578  E104               	bnz	u6180
  4370  00057A  0E09               	movlw	9
  4371  00057C  5DCA               	subwf	sprintf@prec& (0+255),w,b
  4372  00057E  A0D8               	btfss	status,0,c
  4373  000580  D003               	goto	l852
  4374  000582                     u6180:
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4378  000582  0E08               	movlw	8
  4379  000584  6FD9               	movwf	sprintf@c& (0+255),b
  4380  000586  D002               	goto	l853
  4381  000588                     l852:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;doprnt.c: 1213: else
  4385                           ;doprnt.c: 1214: c = prec;
  4386  000588  C0CA  F0D9         	movff	sprintf@prec,sprintf@c
  4387  00058C                     l853:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1215: prec -= c;
  4391                           
  4392                           ; BSR set to: 0
  4393  00058C  51D9               	movf	sprintf@c& (0+255),w,b
  4394  00058E  5FCA               	subwf	sprintf@prec& (0+255),f,b
  4395  000590  0E00               	movlw	0
  4396  000592  BFD9               	btfsc	sprintf@c& (0+255),7,b
  4397  000594  0EFF               	movlw	255
  4398  000596  5BCB               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;doprnt.c: 1219: if(c)
  4402  000598  51D9               	movf	sprintf@c& (0+255),w,b
  4403  00059A  B4D8               	btfsc	status,2,c
  4404  00059C  D008               	goto	l854
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4408  00059E  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4409  0005A2  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4410  0005A6  0E2E               	movlw	46
  4411  0005A8  6EDF               	movwf	indf2,c
  4412                           
  4413                           ; BSR set to: 0
  4414  0005AA  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4415  0005AC  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4416  0005AE                     l854:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4420                           
  4421                           ; BSR set to: 0
  4422  0005AE  51D9               	movf	sprintf@c& (0+255),w,b
  4423  0005B0  EC2D  F004         	call	_scale
  4424  0005B4  C036  F0C3         	movff	?_scale,_sprintf$2238
  4425  0005B8  C037  F0C4         	movff	?_scale+1,_sprintf$2238+1
  4426  0005BC  C038  F0C5         	movff	?_scale+2,_sprintf$2238+2
  4427                           
  4428                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4429  0005C0  C0D6  F02A         	movff	sprintf@fval,___ftmul@f2
  4430  0005C4  C0D7  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  4431  0005C8  C0D8  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  4432  0005CC  C0C3  F027         	movff	_sprintf$2238,___ftmul@f1
  4433  0005D0  C0C4  F028         	movff	_sprintf$2238+1,___ftmul@f1+1
  4434  0005D4  C0C5  F029         	movff	_sprintf$2238+2,___ftmul@f1+2
  4435  0005D8  ECA8  F00D         	call	___ftmul	;wreg free
  4436  0005DC  C027  F0A1         	movff	?___ftmul,___fttol@f1
  4437  0005E0  C028  F0A2         	movff	?___ftmul+1,___fttol@f1+1
  4438  0005E4  C029  F0A3         	movff	?___ftmul+2,___fttol@f1+2
  4439  0005E8  EC2C  F00D         	call	___fttol	;wreg free
  4440  0005EC  C0A1  F0CC         	movff	?___fttol,sprintf@val
  4441  0005F0  C0A2  F0CD         	movff	?___fttol+1,sprintf@val+1
  4442  0005F4  C0A3  F0CE         	movff	?___fttol+2,sprintf@val+2
  4443  0005F8  C0A4  F0CF         	movff	?___fttol+3,sprintf@val+3
  4444                           
  4445                           ;doprnt.c: 1228: while(c--) {
  4446  0005FC  D071               	goto	l855
  4447  0005FE                     
  4448                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4449  0005FE  C0CC  F013         	movff	sprintf@val,___lldiv@dividend
  4450  000602  C0CD  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  4451  000606  C0CE  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  4452  00060A  C0CF  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  4453  00060E  0100               	movlb	0	; () banked
  4454  000610  51D9               	movf	sprintf@c& (0+255),w,b
  4455  000612  0D04               	mullw	4
  4456  000614  0E91               	movlw	low _dpowers
  4457  000616  24F3               	addwf	prodl,w,c
  4458  000618  6EF6               	movwf	tblptrl,c
  4459  00061A  0E7E               	movlw	high _dpowers
  4460  00061C  20F4               	addwfc	prodh,w,c
  4461  00061E  6EF7               	movwf	tblptrh,c
  4462  000620                     	if	0	;There are less than 3 active tblptr bytes
  4463  000620                     	endif
  4464  000620  0009               	tblrd		*+
  4465  000622  CFF5 F017          	movff	tablat,___lldiv@divisor
  4466  000626  0009               	tblrd		*+
  4467  000628  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4468  00062C  0009               	tblrd		*+
  4469  00062E  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4470  000632  000A               	tblrd		*-
  4471  000634  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4472  000638  EC0F  F010         	call	___lldiv	;wreg free
  4473  00063C  C013  F0D2         	movff	?___lldiv,sprintf@tmpval
  4474  000640  C014  F0D3         	movff	?___lldiv+1,sprintf@tmpval+1
  4475  000644  C015  F0D4         	movff	?___lldiv+2,sprintf@tmpval+2
  4476  000648  C016  F0D5         	movff	?___lldiv+3,sprintf@tmpval+3
  4477                           
  4478                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4479  00064C  C0D2  F020         	movff	sprintf@tmpval,___llmod@dividend
  4480  000650  C0D3  F021         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4481  000654  C0D4  F022         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4482  000658  C0D5  F023         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4483  00065C  0E0A               	movlw	10
  4484  00065E  6E24               	movwf	___llmod@divisor,c
  4485  000660  0E00               	movlw	0
  4486  000662  6E25               	movwf	___llmod@divisor+1,c
  4487  000664  0E00               	movlw	0
  4488  000666  6E26               	movwf	___llmod@divisor+2,c
  4489  000668  0E00               	movlw	0
  4490  00066A  6E27               	movwf	___llmod@divisor+3,c
  4491  00066C  ECFF  F010         	call	___llmod	;wreg free
  4492  000670  C020  F0D2         	movff	?___llmod,sprintf@tmpval
  4493  000674  C021  F0D3         	movff	?___llmod+1,sprintf@tmpval+1
  4494  000678  C022  F0D4         	movff	?___llmod+2,sprintf@tmpval+2
  4495  00067C  C023  F0D5         	movff	?___llmod+3,sprintf@tmpval+3
  4496                           
  4497                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4498  000680  0100               	movlb	0	; () banked
  4499  000682  51D2               	movf	sprintf@tmpval& (0+255),w,b
  4500  000684  0F30               	addlw	48
  4501  000686  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4502  00068A  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4503  00068E  6EDF               	movwf	indf2,c
  4504                           
  4505                           ; BSR set to: 0
  4506  000690  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4507  000692  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;doprnt.c: 1232: val %= dpowers[c];
  4511  000694  C0CC  F020         	movff	sprintf@val,___llmod@dividend
  4512  000698  C0CD  F021         	movff	sprintf@val+1,___llmod@dividend+1
  4513  00069C  C0CE  F022         	movff	sprintf@val+2,___llmod@dividend+2
  4514  0006A0  C0CF  F023         	movff	sprintf@val+3,___llmod@dividend+3
  4515  0006A4  51D9               	movf	sprintf@c& (0+255),w,b
  4516  0006A6  0D04               	mullw	4
  4517  0006A8  0E91               	movlw	low _dpowers
  4518  0006AA  24F3               	addwf	prodl,w,c
  4519  0006AC  6EF6               	movwf	tblptrl,c
  4520  0006AE  0E7E               	movlw	high _dpowers
  4521  0006B0  20F4               	addwfc	prodh,w,c
  4522  0006B2  6EF7               	movwf	tblptrh,c
  4523  0006B4                     	if	0	;There are less than 3 active tblptr bytes
  4524  0006B4                     	endif
  4525  0006B4  0009               	tblrd		*+
  4526  0006B6  CFF5 F024          	movff	tablat,___llmod@divisor
  4527  0006BA  0009               	tblrd		*+
  4528  0006BC  CFF5 F025          	movff	tablat,___llmod@divisor+1
  4529  0006C0  0009               	tblrd		*+
  4530  0006C2  CFF5 F026          	movff	tablat,___llmod@divisor+2
  4531  0006C6  000A               	tblrd		*-
  4532  0006C8  CFF5 F027          	movff	tablat,___llmod@divisor+3
  4533  0006CC  ECFF  F010         	call	___llmod	;wreg free
  4534  0006D0  C020  F0CC         	movff	?___llmod,sprintf@val
  4535  0006D4  C021  F0CD         	movff	?___llmod+1,sprintf@val+1
  4536  0006D8  C022  F0CE         	movff	?___llmod+2,sprintf@val+2
  4537  0006DC  C023  F0CF         	movff	?___llmod+3,sprintf@val+3
  4538  0006E0                     l855:
  4539  0006E0  0100               	movlb	0	; () banked
  4540  0006E2  07D9               	decf	sprintf@c& (0+255),f,b
  4541  0006E4  29D9               	incf	sprintf@c& (0+255),w,b
  4542  0006E6  B4D8               	btfsc	status,2,c
  4543  0006E8  D00C               	goto	l858
  4544  0006EA  D789               	goto	l856
  4545  0006EC                     
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4548                           
  4549                           ; BSR set to: 0
  4550  0006EC  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4551  0006F0  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4552  0006F4  0E30               	movlw	48
  4553  0006F6  6EDF               	movwf	indf2,c
  4554                           
  4555                           ; BSR set to: 0
  4556  0006F8  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4557  0006FA  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 1237: prec--;
  4561  0006FC  07CA               	decf	sprintf@prec& (0+255),f,b
  4562  0006FE  A0D8               	btfss	status,0,c
  4563  000700  07CB               	decf	(sprintf@prec+1)& (0+255),f,b
  4564  000702                     l858:
  4565                           
  4566                           ; BSR set to: 0
  4567                           
  4568                           ; BSR set to: 0
  4569  000702  51CA               	movf	sprintf@prec& (0+255),w,b
  4570  000704  11CB               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4571  000706  B4D8               	btfsc	status,2,c
  4572  000708  D095               	goto	u6260
  4573  00070A  D7F0               	goto	l859
  4574  00070C                     l824:
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;doprnt.c: 1246: }
  4578                           ;doprnt.c: 1273: {
  4579                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4580                           
  4581                           ; BSR set to: 0
  4582  00070C  C0C6  FFD9         	movff	sprintf@ap,fsr2l
  4583  000710  C0C7  FFDA         	movff	sprintf@ap+1,fsr2h
  4584  000714  CFDE F0BD          	movff	postinc2,??_sprintf
  4585  000718  CFDD F0BE          	movff	postdec2,??_sprintf+1
  4586  00071C  C0BD  F0CC         	movff	??_sprintf,sprintf@val
  4587  000720  C0BE  F0CD         	movff	??_sprintf+1,sprintf@val+1
  4588  000724  6BCE               	clrf	(sprintf@val+2)& (0+255),b
  4589  000726  6BCF               	clrf	(sprintf@val+3)& (0+255),b
  4590                           
  4591                           ; BSR set to: 0
  4592  000728  0E02               	movlw	2
  4593  00072A  27C6               	addwf	sprintf@ap& (0+255),f,b
  4594  00072C  0E00               	movlw	0
  4595  00072E  23C7               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;doprnt.c: 1287: }
  4599                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4600  000730  0E01               	movlw	1
  4601  000732  6FD9               	movwf	sprintf@c& (0+255),b
  4602  000734                     l6106:
  4603                           
  4604                           ; BSR set to: 0
  4605  000734  0E0A               	movlw	10
  4606  000736  19D9               	xorwf	sprintf@c& (0+255),w,b
  4607  000738  B4D8               	btfsc	status,2,c
  4608  00073A  D018               	goto	u6240
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;doprnt.c: 1306: if(val < dpowers[c])
  4612                           
  4613                           ; BSR set to: 0
  4614                           
  4615                           ; BSR set to: 0
  4616  00073C  51D9               	movf	sprintf@c& (0+255),w,b
  4617  00073E  0D04               	mullw	4
  4618  000740  0E91               	movlw	low _dpowers
  4619  000742  24F3               	addwf	prodl,w,c
  4620  000744  6EF6               	movwf	tblptrl,c
  4621  000746  0E7E               	movlw	high _dpowers
  4622  000748  20F4               	addwfc	prodh,w,c
  4623  00074A  6EF7               	movwf	tblptrh,c
  4624  00074C                     	if	0	;There are less than 3 active tblptr bytes
  4625  00074C                     	endif
  4626  00074C  0009               	tblrd		*+
  4627  00074E  50F5               	movf	tablat,w,c
  4628  000750  5DCC               	subwf	sprintf@val& (0+255),w,b
  4629  000752  0009               	tblrd		*+
  4630  000754  50F5               	movf	tablat,w,c
  4631  000756  59CD               	subwfb	(sprintf@val+1)& (0+255),w,b
  4632  000758  0009               	tblrd		*+
  4633  00075A  50F5               	movf	tablat,w,c
  4634  00075C  59CE               	subwfb	(sprintf@val+2)& (0+255),w,b
  4635  00075E  0009               	tblrd		*+
  4636  000760  50F5               	movf	tablat,w,c
  4637  000762  59CF               	subwfb	(sprintf@val+3)& (0+255),w,b
  4638  000764  A0D8               	btfss	status,0,c
  4639  000766  D002               	goto	u6240
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;doprnt.c: 1307: break;
  4647  000768  2BD9               	incf	sprintf@c& (0+255),f,b
  4648  00076A  D7E4               	goto	l6106
  4649  00076C                     u6240:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;doprnt.c: 1422: {
  4653                           ;doprnt.c: 1438: if(flag & 0x03)
  4654                           
  4655                           ; BSR set to: 0
  4656  00076C  0E03               	movlw	3
  4657  00076E  15C8               	andwf	sprintf@flag& (0+255),w,b
  4658  000770  6FBD               	movwf	??_sprintf& (0+255),b
  4659  000772  0E00               	movlw	0
  4660  000774  15C9               	andwf	(sprintf@flag+1)& (0+255),w,b
  4661  000776  6FBE               	movwf	(??_sprintf+1)& (0+255),b
  4662  000778  51BD               	movf	??_sprintf& (0+255),w,b
  4663  00077A  11BE               	iorwf	(??_sprintf+1)& (0+255),w,b
  4664  00077C  B4D8               	btfsc	status,2,c
  4665  00077E  D008               	goto	l864
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4669  000780  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4670  000784  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4671  000788  0E2D               	movlw	45
  4672  00078A  6EDF               	movwf	indf2,c
  4673                           
  4674                           ; BSR set to: 0
  4675  00078C  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4676  00078E  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4677  000790                     l864:
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;doprnt.c: 1469: }
  4681                           ;doprnt.c: 1472: prec = c;
  4682                           
  4683                           ; BSR set to: 0
  4684  000790  51D9               	movf	sprintf@c& (0+255),w,b
  4685  000792  6FCA               	movwf	sprintf@prec& (0+255),b
  4686  000794  6BCB               	clrf	(sprintf@prec+1)& (0+255),b
  4687  000796  BFCA               	btfsc	sprintf@prec& (0+255),7,b
  4688  000798  07CB               	decf	(sprintf@prec+1)& (0+255),f,b
  4689                           
  4690                           ;doprnt.c: 1474: while(prec--) {
  4691  00079A  D044               	goto	l865
  4692  00079C                     l6126:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;doprnt.c: 1478: {
  4696                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4697  00079C  C0CA  F0BD         	movff	sprintf@prec,??_sprintf
  4698  0007A0  C0CB  F0BE         	movff	sprintf@prec+1,??_sprintf+1
  4699  0007A4  90D8               	bcf	status,0,c
  4700  0007A6  37BD               	rlcf	??_sprintf& (0+255),f,b
  4701  0007A8  37BE               	rlcf	(??_sprintf+1)& (0+255),f,b
  4702  0007AA  90D8               	bcf	status,0,c
  4703  0007AC  37BD               	rlcf	??_sprintf& (0+255),f,b
  4704  0007AE  37BE               	rlcf	(??_sprintf+1)& (0+255),f,b
  4705  0007B0  0E91               	movlw	low _dpowers
  4706  0007B2  25BD               	addwf	??_sprintf& (0+255),w,b
  4707  0007B4  6EF6               	movwf	tblptrl,c
  4708  0007B6  0E7E               	movlw	high _dpowers
  4709  0007B8  21BE               	addwfc	(??_sprintf+1)& (0+255),w,b
  4710  0007BA  6EF7               	movwf	tblptrh,c
  4711  0007BC                     	if	0	;There are less than 3 active tblptr bytes
  4712  0007BC                     	endif
  4713  0007BC  0009               	tblrd		*+
  4714  0007BE  CFF5 F017          	movff	tablat,___lldiv@divisor
  4715  0007C2  0009               	tblrd		*+
  4716  0007C4  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4717  0007C8  0009               	tblrd		*+
  4718  0007CA  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4719  0007CE  000A               	tblrd		*-
  4720  0007D0  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4721  0007D4  C0CC  F013         	movff	sprintf@val,___lldiv@dividend
  4722  0007D8  C0CD  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  4723  0007DC  C0CE  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  4724  0007E0  C0CF  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  4725  0007E4  EC0F  F010         	call	___lldiv	;wreg free
  4726  0007E8  C013  F020         	movff	?___lldiv,___llmod@dividend
  4727  0007EC  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  4728  0007F0  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  4729  0007F4  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  4730  0007F8  0E0A               	movlw	10
  4731  0007FA  6E24               	movwf	___llmod@divisor,c
  4732  0007FC  0E00               	movlw	0
  4733  0007FE  6E25               	movwf	___llmod@divisor+1,c
  4734  000800  0E00               	movlw	0
  4735  000802  6E26               	movwf	___llmod@divisor+2,c
  4736  000804  0E00               	movlw	0
  4737  000806  6E27               	movwf	___llmod@divisor+3,c
  4738  000808  ECFF  F010         	call	___llmod	;wreg free
  4739  00080C  5020               	movf	?___llmod,w,c
  4740  00080E  0F30               	addlw	48
  4741  000810  0100               	movlb	0	; () banked
  4742  000812  6FD9               	movwf	sprintf@c& (0+255),b
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;doprnt.c: 1523: }
  4746                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4747  000814  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4748  000818  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4749  00081C  C0D9  FFDF         	movff	sprintf@c,indf2
  4750                           
  4751                           ; BSR set to: 0
  4752  000820  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4753  000822  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4754  000824                     l865:
  4755                           
  4756                           ; BSR set to: 0
  4757                           
  4758                           ; BSR set to: 0
  4759  000824  07CA               	decf	sprintf@prec& (0+255),f,b
  4760  000826  A0D8               	btfss	status,0,c
  4761  000828  07CB               	decf	(sprintf@prec+1)& (0+255),f,b
  4762  00082A  29CA               	incf	sprintf@prec& (0+255),w,b
  4763  00082C  E1B7               	bnz	l6126
  4764  00082E  29CB               	incf	(sprintf@prec+1)& (0+255),w,b
  4765  000830  A4D8               	btfss	status,2,c
  4766  000832  D7B4               	goto	l866
  4767  000834                     u6260:
  4768                           
  4769                           ; BSR set to: 0
  4770                           
  4771                           ; BSR set to: 0
  4772                           
  4773                           ; BSR set to: 0
  4774  000834  C0B8  FFF6         	movff	sprintf@f,tblptrl
  4775  000838  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  4776  00083C  4BB8               	infsnz	sprintf@f& (0+255),f,b
  4777  00083E  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  4778  000840                     	if	0	;tblptru may be non-zero
  4779  000840                     	endif
  4780  000840                     	if	0	;tblptru may be non-zero
  4781  000840                     	endif
  4782  000840  0008               	tblrd		*
  4783  000842  CFF5 F0D9          	movff	tablat,sprintf@c
  4784  000846  51D9               	movf	sprintf@c& (0+255),w,b
  4785  000848  A4D8               	btfss	status,2,c
  4786  00084A  D46B               	goto	l815
  4787  00084C                     u6270:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;doprnt.c: 1538: *sp = 0;
  4791                           
  4792                           ; BSR set to: 0
  4793                           
  4794                           ;doprnt.c: 1525: }
  4795                           ;doprnt.c: 1533: }
  4796                           ;doprnt.c: 1535: alldone:
  4797                           
  4798                           ; BSR set to: 0
  4799  00084C  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4800  000850  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4801  000854  0E00               	movlw	0
  4802  000856  6EDF               	movwf	indf2,c
  4803  000858  0012               	return	
  4804  00085A                     __end_of_sprintf:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           intcon	equ	0xFF2
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           indf1	equ	0xFE7
  4816                           postdec1	equ	0xFE5
  4817                           plusw1	equ	0xFE3
  4818                           fsr1h	equ	0xFE2
  4819                           fsr1l	equ	0xFE1
  4820                           indf2	equ	0xFDF
  4821                           postinc2	equ	0xFDE
  4822                           postdec2	equ	0xFDD
  4823                           plusw2	equ	0xFDB
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _scale *****************
  4829 ;; Defined at:
  4830 ;;		line 425 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  scl             1    wreg     char 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  scl             1    3[BANK0 ] char 
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  3   53[COMRAM] char 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4844 ;;      Params:         3       0       0       0       0       0       0
  4845 ;;      Locals:         0       4       0       0       0       0       0
  4846 ;;      Temps:          0       0       0       0       0       0       0
  4847 ;;      Totals:         3       4       0       0       0       0       0
  4848 ;;Total ram usage:        7 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:    4
  4851 ;; This function calls:
  4852 ;;		___awdiv
  4853 ;;		___awmod
  4854 ;;		___ftmul
  4855 ;;		___wmul
  4856 ;; This function is called by:
  4857 ;;		_sprintf
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text15
  4862  00085A                     __ptext15:
  4863                           	opt stack 0
  4864  00085A                     _scale:
  4865                           	opt stack 24
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;incstack = 0
  4869                           ;scale@scl stored from wreg
  4870  00085A  0100               	movlb	0	; () banked
  4871  00085C  6FA0               	movwf	scale@scl& (0+255),b
  4872                           
  4873                           ;doprnt.c: 428: if(scl < 0) {
  4874  00085E  0100               	movlb	0	; () banked
  4875  000860  AFA0               	btfss	scale@scl& (0+255),7,b
  4876  000862  D106               	goto	l804
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;doprnt.c: 429: scl = -scl;
  4880  000864  6DA0               	negf	scale@scl& (0+255),b
  4881                           
  4882                           ;doprnt.c: 430: if(scl>=110)
  4883  000866  51A0               	movf	scale@scl& (0+255),w,b
  4884  000868  0A80               	xorlw	128
  4885  00086A  0F12               	addlw	-238
  4886  00086C  A0D8               	btfss	status,0,c
  4887  00086E  D093               	goto	l805
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4891  000870  0E00               	movlw	0
  4892  000872  6E24               	movwf	___wmul@multiplicand+1,c
  4893  000874  0E03               	movlw	3
  4894  000876  6E23               	movwf	___wmul@multiplicand,c
  4895  000878  0E00               	movlw	0
  4896  00087A  6E1C               	movwf	___awdiv@divisor+1,c
  4897  00087C  0E0A               	movlw	10
  4898  00087E  6E1B               	movwf	___awdiv@divisor,c
  4899  000880  0E00               	movlw	0
  4900  000882  6E16               	movwf	___awmod@divisor+1,c
  4901  000884  0E64               	movlw	100
  4902  000886  6E15               	movwf	___awmod@divisor,c
  4903  000888  51A0               	movf	scale@scl& (0+255),w,b
  4904  00088A  6E13               	movwf	___awmod@dividend,c
  4905  00088C  6A14               	clrf	___awmod@dividend+1,c
  4906  00088E  BE13               	btfsc	___awmod@dividend,7,c
  4907  000890  0614               	decf	___awmod@dividend+1,f,c
  4908  000892  ECC7  F010         	call	___awmod	;wreg free
  4909  000896  C013  F019         	movff	?___awmod,___awdiv@dividend
  4910  00089A  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4911  00089E  ECCD  F00F         	call	___awdiv	;wreg free
  4912  0008A2  0E09               	movlw	9
  4913  0008A4  2419               	addwf	?___awdiv,w,c
  4914  0008A6  6E21               	movwf	___wmul@multiplier,c
  4915  0008A8  0E00               	movlw	0
  4916  0008AA  201A               	addwfc	?___awdiv+1,w,c
  4917  0008AC  6E22               	movwf	___wmul@multiplier+1,c
  4918  0008AE  ECCD  F013         	call	___wmul	;wreg free
  4919  0008B2  0EE0               	movlw	low __npowers_
  4920  0008B4  2421               	addwf	?___wmul,w,c
  4921  0008B6  6EF6               	movwf	tblptrl,c
  4922  0008B8  0E7E               	movlw	high __npowers_
  4923  0008BA  2022               	addwfc	?___wmul+1,w,c
  4924  0008BC  6EF7               	movwf	tblptrh,c
  4925  0008BE                     	if	0	;There are less than 3 active tblptr bytes
  4926  0008BE                     	endif
  4927  0008BE  0009               	tblrd		*+
  4928  0008C0  CFF5 F02A          	movff	tablat,___ftmul@f2
  4929  0008C4  0009               	tblrd		*+
  4930  0008C6  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4931  0008CA  000A               	tblrd		*-
  4932  0008CC  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4933  0008D0  0E00               	movlw	0
  4934  0008D2  6E1C               	movwf	___awdiv@divisor+1,c
  4935  0008D4  0E64               	movlw	100
  4936  0008D6  6E1B               	movwf	___awdiv@divisor,c
  4937  0008D8  0100               	movlb	0	; () banked
  4938  0008DA  51A0               	movf	scale@scl& (0+255),w,b
  4939  0008DC  6E19               	movwf	___awdiv@dividend,c
  4940  0008DE  6A1A               	clrf	___awdiv@dividend+1,c
  4941  0008E0  BE19               	btfsc	___awdiv@dividend,7,c
  4942  0008E2  061A               	decf	___awdiv@dividend+1,f,c
  4943  0008E4  ECCD  F00F         	call	___awdiv	;wreg free
  4944  0008E8  0E12               	movlw	18
  4945  0008EA  2419               	addwf	?___awdiv,w,c
  4946  0008EC  6E21               	movwf	___wmul@multiplier,c
  4947  0008EE  0E00               	movlw	0
  4948  0008F0  201A               	addwfc	?___awdiv+1,w,c
  4949  0008F2  6E22               	movwf	___wmul@multiplier+1,c
  4950  0008F4  0E00               	movlw	0
  4951  0008F6  6E24               	movwf	___wmul@multiplicand+1,c
  4952  0008F8  0E03               	movlw	3
  4953  0008FA  6E23               	movwf	___wmul@multiplicand,c
  4954  0008FC  ECCD  F013         	call	___wmul	;wreg free
  4955  000900  0EE0               	movlw	low __npowers_
  4956  000902  2421               	addwf	?___wmul,w,c
  4957  000904  6EF6               	movwf	tblptrl,c
  4958  000906  0E7E               	movlw	high __npowers_
  4959  000908  2022               	addwfc	?___wmul+1,w,c
  4960  00090A  6EF7               	movwf	tblptrh,c
  4961  00090C                     	if	0	;There are less than 3 active tblptr bytes
  4962  00090C                     	endif
  4963  00090C  0009               	tblrd		*+
  4964  00090E  CFF5 F027          	movff	tablat,___ftmul@f1
  4965  000912  0009               	tblrd		*+
  4966  000914  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4967  000918  000A               	tblrd		*-
  4968  00091A  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4969  00091E  ECA8  F00D         	call	___ftmul	;wreg free
  4970  000922  C027  F09D         	movff	?___ftmul,_scale$2237
  4971  000926  C028  F09E         	movff	?___ftmul+1,_scale$2237+1
  4972  00092A  C029  F09F         	movff	?___ftmul+2,_scale$2237+2
  4973                           
  4974                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4975  00092E  C09D  F027         	movff	_scale$2237,___ftmul@f1
  4976  000932  C09E  F028         	movff	_scale$2237+1,___ftmul@f1+1
  4977  000936  C09F  F029         	movff	_scale$2237+2,___ftmul@f1+2
  4978  00093A  0E00               	movlw	0
  4979  00093C  6E24               	movwf	___wmul@multiplicand+1,c
  4980  00093E  0E03               	movlw	3
  4981  000940  6E23               	movwf	___wmul@multiplicand,c
  4982  000942  0E00               	movlw	0
  4983  000944  6E16               	movwf	___awmod@divisor+1,c
  4984  000946  0E0A               	movlw	10
  4985  000948  6E15               	movwf	___awmod@divisor,c
  4986  00094A  0100               	movlb	0	; () banked
  4987  00094C  51A0               	movf	scale@scl& (0+255),w,b
  4988  00094E  6E13               	movwf	___awmod@dividend,c
  4989  000950  6A14               	clrf	___awmod@dividend+1,c
  4990  000952  BE13               	btfsc	___awmod@dividend,7,c
  4991  000954  0614               	decf	___awmod@dividend+1,f,c
  4992  000956  ECC7  F010         	call	___awmod	;wreg free
  4993  00095A  C013  F021         	movff	?___awmod,___wmul@multiplier
  4994  00095E  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4995  000962  ECCD  F013         	call	___wmul	;wreg free
  4996  000966  0EE0               	movlw	low __npowers_
  4997  000968  2421               	addwf	?___wmul,w,c
  4998  00096A  6EF6               	movwf	tblptrl,c
  4999  00096C  0E7E               	movlw	high __npowers_
  5000  00096E  2022               	addwfc	?___wmul+1,w,c
  5001  000970  6EF7               	movwf	tblptrh,c
  5002  000972                     	if	0	;There are less than 3 active tblptr bytes
  5003  000972                     	endif
  5004  000972  0009               	tblrd		*+
  5005  000974  CFF5 F02A          	movff	tablat,___ftmul@f2
  5006  000978  0009               	tblrd		*+
  5007  00097A  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5008  00097E  000A               	tblrd		*-
  5009  000980  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5010  000984  ECA8  F00D         	call	___ftmul	;wreg free
  5011  000988  C027  F036         	movff	?___ftmul,?_scale
  5012  00098C  C028  F037         	movff	?___ftmul+1,?_scale+1
  5013  000990  C029  F038         	movff	?___ftmul+2,?_scale+2
  5014  000994  0012               	return	
  5015  000996                     l805:
  5016                           
  5017                           ;doprnt.c: 432: else if(scl > 10)
  5018  000996  0100               	movlb	0	; () banked
  5019  000998  51A0               	movf	scale@scl& (0+255),w,b
  5020  00099A  0A80               	xorlw	128
  5021  00099C  0F75               	addlw	-139
  5022  00099E  A0D8               	btfss	status,0,c
  5023  0009A0  D054               	goto	l808
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5027  0009A2  0E00               	movlw	0
  5028  0009A4  6E1C               	movwf	___awdiv@divisor+1,c
  5029  0009A6  0E0A               	movlw	10
  5030  0009A8  6E1B               	movwf	___awdiv@divisor,c
  5031  0009AA  51A0               	movf	scale@scl& (0+255),w,b
  5032  0009AC  6E19               	movwf	___awdiv@dividend,c
  5033  0009AE  6A1A               	clrf	___awdiv@dividend+1,c
  5034  0009B0  BE19               	btfsc	___awdiv@dividend,7,c
  5035  0009B2  061A               	decf	___awdiv@dividend+1,f,c
  5036  0009B4  ECCD  F00F         	call	___awdiv	;wreg free
  5037  0009B8  0E09               	movlw	9
  5038  0009BA  2419               	addwf	?___awdiv,w,c
  5039  0009BC  6E21               	movwf	___wmul@multiplier,c
  5040  0009BE  0E00               	movlw	0
  5041  0009C0  201A               	addwfc	?___awdiv+1,w,c
  5042  0009C2  6E22               	movwf	___wmul@multiplier+1,c
  5043  0009C4  0E00               	movlw	0
  5044  0009C6  6E24               	movwf	___wmul@multiplicand+1,c
  5045  0009C8  0E03               	movlw	3
  5046  0009CA  6E23               	movwf	___wmul@multiplicand,c
  5047  0009CC  ECCD  F013         	call	___wmul	;wreg free
  5048  0009D0  0EE0               	movlw	low __npowers_
  5049  0009D2  2421               	addwf	?___wmul,w,c
  5050  0009D4  6EF6               	movwf	tblptrl,c
  5051  0009D6  0E7E               	movlw	high __npowers_
  5052  0009D8  2022               	addwfc	?___wmul+1,w,c
  5053  0009DA  6EF7               	movwf	tblptrh,c
  5054  0009DC                     	if	0	;There are less than 3 active tblptr bytes
  5055  0009DC                     	endif
  5056  0009DC  0009               	tblrd		*+
  5057  0009DE  CFF5 F027          	movff	tablat,___ftmul@f1
  5058  0009E2  0009               	tblrd		*+
  5059  0009E4  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5060  0009E8  000A               	tblrd		*-
  5061  0009EA  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5062  0009EE  0E00               	movlw	0
  5063  0009F0  6E24               	movwf	___wmul@multiplicand+1,c
  5064  0009F2  0E03               	movlw	3
  5065  0009F4  6E23               	movwf	___wmul@multiplicand,c
  5066  0009F6  0E00               	movlw	0
  5067  0009F8  6E16               	movwf	___awmod@divisor+1,c
  5068  0009FA  0E0A               	movlw	10
  5069  0009FC  6E15               	movwf	___awmod@divisor,c
  5070  0009FE  0100               	movlb	0	; () banked
  5071  000A00  51A0               	movf	scale@scl& (0+255),w,b
  5072  000A02  6E13               	movwf	___awmod@dividend,c
  5073  000A04  6A14               	clrf	___awmod@dividend+1,c
  5074  000A06  BE13               	btfsc	___awmod@dividend,7,c
  5075  000A08  0614               	decf	___awmod@dividend+1,f,c
  5076  000A0A  ECC7  F010         	call	___awmod	;wreg free
  5077  000A0E  C013  F021         	movff	?___awmod,___wmul@multiplier
  5078  000A12  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5079  000A16  ECCD  F013         	call	___wmul	;wreg free
  5080  000A1A  0EE0               	movlw	low __npowers_
  5081  000A1C  2421               	addwf	?___wmul,w,c
  5082  000A1E  6EF6               	movwf	tblptrl,c
  5083  000A20  0E7E               	movlw	high __npowers_
  5084  000A22  2022               	addwfc	?___wmul+1,w,c
  5085  000A24  6EF7               	movwf	tblptrh,c
  5086  000A26                     	if	0	;There are less than 3 active tblptr bytes
  5087  000A26                     	endif
  5088  000A26  0009               	tblrd		*+
  5089  000A28  CFF5 F02A          	movff	tablat,___ftmul@f2
  5090  000A2C  0009               	tblrd		*+
  5091  000A2E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5092  000A32  000A               	tblrd		*-
  5093  000A34  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5094  000A38  ECA8  F00D         	call	___ftmul	;wreg free
  5095  000A3C  C027  F036         	movff	?___ftmul,?_scale
  5096  000A40  C028  F037         	movff	?___ftmul+1,?_scale+1
  5097  000A44  C029  F038         	movff	?___ftmul+2,?_scale+2
  5098  000A48  0012               	return	
  5099  000A4A                     l808:
  5100                           
  5101                           ;doprnt.c: 434: return _npowers_[scl];
  5102  000A4A  0100               	movlb	0	; () banked
  5103  000A4C  51A0               	movf	scale@scl& (0+255),w,b
  5104  000A4E  0D03               	mullw	3
  5105  000A50  0EE0               	movlw	low __npowers_
  5106  000A52  24F3               	addwf	prodl,w,c
  5107  000A54  6EF6               	movwf	tblptrl,c
  5108  000A56  0E7E               	movlw	high __npowers_
  5109  000A58  20F4               	addwfc	prodh,w,c
  5110  000A5A  6EF7               	movwf	tblptrh,c
  5111  000A5C                     	if	0	;There are less than 3 active tblptr bytes
  5112  000A5C                     	endif
  5113  000A5C  0009               	tblrd		*+
  5114  000A5E  CFF5 F036          	movff	tablat,?_scale
  5115  000A62  0009               	tblrd		*+
  5116  000A64  CFF5 F037          	movff	tablat,?_scale+1
  5117  000A68  000A               	tblrd		*-
  5118  000A6A  CFF5 F038          	movff	tablat,?_scale+2
  5119                           
  5120                           ; BSR set to: 0
  5121  000A6E  0012               	return	
  5122  000A70                     l804:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;doprnt.c: 435: }
  5126                           ;doprnt.c: 436: if(scl>=110)
  5127                           
  5128                           ; BSR set to: 0
  5129  000A70  51A0               	movf	scale@scl& (0+255),w,b
  5130  000A72  0A80               	xorlw	128
  5131  000A74  0F12               	addlw	-238
  5132  000A76  A0D8               	btfss	status,0,c
  5133  000A78  D093               	goto	l809
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5137  000A7A  0E00               	movlw	0
  5138  000A7C  6E24               	movwf	___wmul@multiplicand+1,c
  5139  000A7E  0E03               	movlw	3
  5140  000A80  6E23               	movwf	___wmul@multiplicand,c
  5141  000A82  0E00               	movlw	0
  5142  000A84  6E1C               	movwf	___awdiv@divisor+1,c
  5143  000A86  0E0A               	movlw	10
  5144  000A88  6E1B               	movwf	___awdiv@divisor,c
  5145  000A8A  0E00               	movlw	0
  5146  000A8C  6E16               	movwf	___awmod@divisor+1,c
  5147  000A8E  0E64               	movlw	100
  5148  000A90  6E15               	movwf	___awmod@divisor,c
  5149  000A92  51A0               	movf	scale@scl& (0+255),w,b
  5150  000A94  6E13               	movwf	___awmod@dividend,c
  5151  000A96  6A14               	clrf	___awmod@dividend+1,c
  5152  000A98  BE13               	btfsc	___awmod@dividend,7,c
  5153  000A9A  0614               	decf	___awmod@dividend+1,f,c
  5154  000A9C  ECC7  F010         	call	___awmod	;wreg free
  5155  000AA0  C013  F019         	movff	?___awmod,___awdiv@dividend
  5156  000AA4  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5157  000AA8  ECCD  F00F         	call	___awdiv	;wreg free
  5158  000AAC  0E09               	movlw	9
  5159  000AAE  2419               	addwf	?___awdiv,w,c
  5160  000AB0  6E21               	movwf	___wmul@multiplier,c
  5161  000AB2  0E00               	movlw	0
  5162  000AB4  201A               	addwfc	?___awdiv+1,w,c
  5163  000AB6  6E22               	movwf	___wmul@multiplier+1,c
  5164  000AB8  ECCD  F013         	call	___wmul	;wreg free
  5165  000ABC  0EB9               	movlw	low __powers_
  5166  000ABE  2421               	addwf	?___wmul,w,c
  5167  000AC0  6EF6               	movwf	tblptrl,c
  5168  000AC2  0E7E               	movlw	high __powers_
  5169  000AC4  2022               	addwfc	?___wmul+1,w,c
  5170  000AC6  6EF7               	movwf	tblptrh,c
  5171  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  5172  000AC8                     	endif
  5173  000AC8  0009               	tblrd		*+
  5174  000ACA  CFF5 F02A          	movff	tablat,___ftmul@f2
  5175  000ACE  0009               	tblrd		*+
  5176  000AD0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5177  000AD4  000A               	tblrd		*-
  5178  000AD6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5179  000ADA  0E00               	movlw	0
  5180  000ADC  6E1C               	movwf	___awdiv@divisor+1,c
  5181  000ADE  0E64               	movlw	100
  5182  000AE0  6E1B               	movwf	___awdiv@divisor,c
  5183  000AE2  0100               	movlb	0	; () banked
  5184  000AE4  51A0               	movf	scale@scl& (0+255),w,b
  5185  000AE6  6E19               	movwf	___awdiv@dividend,c
  5186  000AE8  6A1A               	clrf	___awdiv@dividend+1,c
  5187  000AEA  BE19               	btfsc	___awdiv@dividend,7,c
  5188  000AEC  061A               	decf	___awdiv@dividend+1,f,c
  5189  000AEE  ECCD  F00F         	call	___awdiv	;wreg free
  5190  000AF2  0E12               	movlw	18
  5191  000AF4  2419               	addwf	?___awdiv,w,c
  5192  000AF6  6E21               	movwf	___wmul@multiplier,c
  5193  000AF8  0E00               	movlw	0
  5194  000AFA  201A               	addwfc	?___awdiv+1,w,c
  5195  000AFC  6E22               	movwf	___wmul@multiplier+1,c
  5196  000AFE  0E00               	movlw	0
  5197  000B00  6E24               	movwf	___wmul@multiplicand+1,c
  5198  000B02  0E03               	movlw	3
  5199  000B04  6E23               	movwf	___wmul@multiplicand,c
  5200  000B06  ECCD  F013         	call	___wmul	;wreg free
  5201  000B0A  0EB9               	movlw	low __powers_
  5202  000B0C  2421               	addwf	?___wmul,w,c
  5203  000B0E  6EF6               	movwf	tblptrl,c
  5204  000B10  0E7E               	movlw	high __powers_
  5205  000B12  2022               	addwfc	?___wmul+1,w,c
  5206  000B14  6EF7               	movwf	tblptrh,c
  5207  000B16                     	if	0	;There are less than 3 active tblptr bytes
  5208  000B16                     	endif
  5209  000B16  0009               	tblrd		*+
  5210  000B18  CFF5 F027          	movff	tablat,___ftmul@f1
  5211  000B1C  0009               	tblrd		*+
  5212  000B1E  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5213  000B22  000A               	tblrd		*-
  5214  000B24  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5215  000B28  ECA8  F00D         	call	___ftmul	;wreg free
  5216  000B2C  C027  F09D         	movff	?___ftmul,_scale$2237
  5217  000B30  C028  F09E         	movff	?___ftmul+1,_scale$2237+1
  5218  000B34  C029  F09F         	movff	?___ftmul+2,_scale$2237+2
  5219                           
  5220                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5221  000B38  C09D  F027         	movff	_scale$2237,___ftmul@f1
  5222  000B3C  C09E  F028         	movff	_scale$2237+1,___ftmul@f1+1
  5223  000B40  C09F  F029         	movff	_scale$2237+2,___ftmul@f1+2
  5224  000B44  0E00               	movlw	0
  5225  000B46  6E24               	movwf	___wmul@multiplicand+1,c
  5226  000B48  0E03               	movlw	3
  5227  000B4A  6E23               	movwf	___wmul@multiplicand,c
  5228  000B4C  0E00               	movlw	0
  5229  000B4E  6E16               	movwf	___awmod@divisor+1,c
  5230  000B50  0E0A               	movlw	10
  5231  000B52  6E15               	movwf	___awmod@divisor,c
  5232  000B54  0100               	movlb	0	; () banked
  5233  000B56  51A0               	movf	scale@scl& (0+255),w,b
  5234  000B58  6E13               	movwf	___awmod@dividend,c
  5235  000B5A  6A14               	clrf	___awmod@dividend+1,c
  5236  000B5C  BE13               	btfsc	___awmod@dividend,7,c
  5237  000B5E  0614               	decf	___awmod@dividend+1,f,c
  5238  000B60  ECC7  F010         	call	___awmod	;wreg free
  5239  000B64  C013  F021         	movff	?___awmod,___wmul@multiplier
  5240  000B68  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5241  000B6C  ECCD  F013         	call	___wmul	;wreg free
  5242  000B70  0EB9               	movlw	low __powers_
  5243  000B72  2421               	addwf	?___wmul,w,c
  5244  000B74  6EF6               	movwf	tblptrl,c
  5245  000B76  0E7E               	movlw	high __powers_
  5246  000B78  2022               	addwfc	?___wmul+1,w,c
  5247  000B7A  6EF7               	movwf	tblptrh,c
  5248  000B7C                     	if	0	;There are less than 3 active tblptr bytes
  5249  000B7C                     	endif
  5250  000B7C  0009               	tblrd		*+
  5251  000B7E  CFF5 F02A          	movff	tablat,___ftmul@f2
  5252  000B82  0009               	tblrd		*+
  5253  000B84  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5254  000B88  000A               	tblrd		*-
  5255  000B8A  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5256  000B8E  ECA8  F00D         	call	___ftmul	;wreg free
  5257  000B92  C027  F036         	movff	?___ftmul,?_scale
  5258  000B96  C028  F037         	movff	?___ftmul+1,?_scale+1
  5259  000B9A  C029  F038         	movff	?___ftmul+2,?_scale+2
  5260  000B9E  0012               	return	
  5261  000BA0                     l809:
  5262                           
  5263                           ;doprnt.c: 438: else if(scl > 10)
  5264  000BA0  0100               	movlb	0	; () banked
  5265  000BA2  51A0               	movf	scale@scl& (0+255),w,b
  5266  000BA4  0A80               	xorlw	128
  5267  000BA6  0F75               	addlw	-139
  5268  000BA8  A0D8               	btfss	status,0,c
  5269  000BAA  D054               	goto	l811
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5273  000BAC  0E00               	movlw	0
  5274  000BAE  6E1C               	movwf	___awdiv@divisor+1,c
  5275  000BB0  0E0A               	movlw	10
  5276  000BB2  6E1B               	movwf	___awdiv@divisor,c
  5277  000BB4  51A0               	movf	scale@scl& (0+255),w,b
  5278  000BB6  6E19               	movwf	___awdiv@dividend,c
  5279  000BB8  6A1A               	clrf	___awdiv@dividend+1,c
  5280  000BBA  BE19               	btfsc	___awdiv@dividend,7,c
  5281  000BBC  061A               	decf	___awdiv@dividend+1,f,c
  5282  000BBE  ECCD  F00F         	call	___awdiv	;wreg free
  5283  000BC2  0E09               	movlw	9
  5284  000BC4  2419               	addwf	?___awdiv,w,c
  5285  000BC6  6E21               	movwf	___wmul@multiplier,c
  5286  000BC8  0E00               	movlw	0
  5287  000BCA  201A               	addwfc	?___awdiv+1,w,c
  5288  000BCC  6E22               	movwf	___wmul@multiplier+1,c
  5289  000BCE  0E00               	movlw	0
  5290  000BD0  6E24               	movwf	___wmul@multiplicand+1,c
  5291  000BD2  0E03               	movlw	3
  5292  000BD4  6E23               	movwf	___wmul@multiplicand,c
  5293  000BD6  ECCD  F013         	call	___wmul	;wreg free
  5294  000BDA  0EB9               	movlw	low __powers_
  5295  000BDC  2421               	addwf	?___wmul,w,c
  5296  000BDE  6EF6               	movwf	tblptrl,c
  5297  000BE0  0E7E               	movlw	high __powers_
  5298  000BE2  2022               	addwfc	?___wmul+1,w,c
  5299  000BE4  6EF7               	movwf	tblptrh,c
  5300  000BE6                     	if	0	;There are less than 3 active tblptr bytes
  5301  000BE6                     	endif
  5302  000BE6  0009               	tblrd		*+
  5303  000BE8  CFF5 F027          	movff	tablat,___ftmul@f1
  5304  000BEC  0009               	tblrd		*+
  5305  000BEE  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5306  000BF2  000A               	tblrd		*-
  5307  000BF4  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5308  000BF8  0E00               	movlw	0
  5309  000BFA  6E24               	movwf	___wmul@multiplicand+1,c
  5310  000BFC  0E03               	movlw	3
  5311  000BFE  6E23               	movwf	___wmul@multiplicand,c
  5312  000C00  0E00               	movlw	0
  5313  000C02  6E16               	movwf	___awmod@divisor+1,c
  5314  000C04  0E0A               	movlw	10
  5315  000C06  6E15               	movwf	___awmod@divisor,c
  5316  000C08  0100               	movlb	0	; () banked
  5317  000C0A  51A0               	movf	scale@scl& (0+255),w,b
  5318  000C0C  6E13               	movwf	___awmod@dividend,c
  5319  000C0E  6A14               	clrf	___awmod@dividend+1,c
  5320  000C10  BE13               	btfsc	___awmod@dividend,7,c
  5321  000C12  0614               	decf	___awmod@dividend+1,f,c
  5322  000C14  ECC7  F010         	call	___awmod	;wreg free
  5323  000C18  C013  F021         	movff	?___awmod,___wmul@multiplier
  5324  000C1C  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5325  000C20  ECCD  F013         	call	___wmul	;wreg free
  5326  000C24  0EB9               	movlw	low __powers_
  5327  000C26  2421               	addwf	?___wmul,w,c
  5328  000C28  6EF6               	movwf	tblptrl,c
  5329  000C2A  0E7E               	movlw	high __powers_
  5330  000C2C  2022               	addwfc	?___wmul+1,w,c
  5331  000C2E  6EF7               	movwf	tblptrh,c
  5332  000C30                     	if	0	;There are less than 3 active tblptr bytes
  5333  000C30                     	endif
  5334  000C30  0009               	tblrd		*+
  5335  000C32  CFF5 F02A          	movff	tablat,___ftmul@f2
  5336  000C36  0009               	tblrd		*+
  5337  000C38  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5338  000C3C  000A               	tblrd		*-
  5339  000C3E  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5340  000C42  ECA8  F00D         	call	___ftmul	;wreg free
  5341  000C46  C027  F036         	movff	?___ftmul,?_scale
  5342  000C4A  C028  F037         	movff	?___ftmul+1,?_scale+1
  5343  000C4E  C029  F038         	movff	?___ftmul+2,?_scale+2
  5344  000C52  0012               	return	
  5345  000C54                     l811:
  5346                           
  5347                           ;doprnt.c: 440: return _powers_[scl];
  5348  000C54  0100               	movlb	0	; () banked
  5349  000C56  51A0               	movf	scale@scl& (0+255),w,b
  5350  000C58  0D03               	mullw	3
  5351  000C5A  0EB9               	movlw	low __powers_
  5352  000C5C  24F3               	addwf	prodl,w,c
  5353  000C5E  6EF6               	movwf	tblptrl,c
  5354  000C60  0E7E               	movlw	high __powers_
  5355  000C62  20F4               	addwfc	prodh,w,c
  5356  000C64  6EF7               	movwf	tblptrh,c
  5357  000C66                     	if	0	;There are less than 3 active tblptr bytes
  5358  000C66                     	endif
  5359  000C66  0009               	tblrd		*+
  5360  000C68  CFF5 F036          	movff	tablat,?_scale
  5361  000C6C  0009               	tblrd		*+
  5362  000C6E  CFF5 F037          	movff	tablat,?_scale+1
  5363  000C72  000A               	tblrd		*-
  5364  000C74  CFF5 F038          	movff	tablat,?_scale+2
  5365  000C78  0012               	return	
  5366  000C7A                     __end_of_scale:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           indf1	equ	0xFE7
  5378                           postdec1	equ	0xFE5
  5379                           plusw1	equ	0xFE3
  5380                           fsr1h	equ	0xFE2
  5381                           fsr1l	equ	0xFE1
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           plusw2	equ	0xFDB
  5386                           fsr2h	equ	0xFDA
  5387                           fsr2l	equ	0xFD9
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function _fround *****************
  5391 ;; Defined at:
  5392 ;;		line 409 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  prec            1    wreg     unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  prec            1    6[BANK0 ] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  3   53[COMRAM] unsigned char 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5406 ;;      Params:         3       0       0       0       0       0       0
  5407 ;;      Locals:         0       7       0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0
  5409 ;;      Totals:         3       7       0       0       0       0       0
  5410 ;;Total ram usage:       10 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    4
  5413 ;; This function calls:
  5414 ;;		___awdiv
  5415 ;;		___awmod
  5416 ;;		___ftmul
  5417 ;;		___wmul
  5418 ;; This function is called by:
  5419 ;;		_sprintf
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text16
  5424  000EE4                     __ptext16:
  5425                           	opt stack 0
  5426  000EE4                     _fround:
  5427                           	opt stack 24
  5428                           
  5429                           ;incstack = 0
  5430                           ;fround@prec stored from wreg
  5431  000EE4  0100               	movlb	0	; () banked
  5432  000EE6  6FA3               	movwf	fround@prec& (0+255),b
  5433                           
  5434                           ;doprnt.c: 413: if(prec>=110)
  5435  000EE8  0E6D               	movlw	109
  5436  000EEA  0100               	movlb	0	; () banked
  5437  000EEC  65A3               	cpfsgt	fround@prec& (0+255),b
  5438  000EEE  D09F               	goto	l798
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5442  000EF0  0E00               	movlw	0
  5443  000EF2  6E24               	movwf	___wmul@multiplicand+1,c
  5444  000EF4  0E03               	movlw	3
  5445  000EF6  6E23               	movwf	___wmul@multiplicand,c
  5446  000EF8  0E00               	movlw	0
  5447  000EFA  6E1C               	movwf	___awdiv@divisor+1,c
  5448  000EFC  0E0A               	movlw	10
  5449  000EFE  6E1B               	movwf	___awdiv@divisor,c
  5450  000F00  0E00               	movlw	0
  5451  000F02  6E16               	movwf	___awmod@divisor+1,c
  5452  000F04  0E64               	movlw	100
  5453  000F06  6E15               	movwf	___awmod@divisor,c
  5454  000F08  C0A3  F013         	movff	fround@prec,___awmod@dividend
  5455  000F0C  6A14               	clrf	___awmod@dividend+1,c
  5456  000F0E  ECC7  F010         	call	___awmod	;wreg free
  5457  000F12  C013  F019         	movff	?___awmod,___awdiv@dividend
  5458  000F16  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5459  000F1A  ECCD  F00F         	call	___awdiv	;wreg free
  5460  000F1E  0E09               	movlw	9
  5461  000F20  2419               	addwf	?___awdiv,w,c
  5462  000F22  6E21               	movwf	___wmul@multiplier,c
  5463  000F24  0E00               	movlw	0
  5464  000F26  201A               	addwfc	?___awdiv+1,w,c
  5465  000F28  6E22               	movwf	___wmul@multiplier+1,c
  5466  000F2A  ECCD  F013         	call	___wmul	;wreg free
  5467  000F2E  0EE0               	movlw	low __npowers_
  5468  000F30  2421               	addwf	?___wmul,w,c
  5469  000F32  6EF6               	movwf	tblptrl,c
  5470  000F34  0E7E               	movlw	high __npowers_
  5471  000F36  2022               	addwfc	?___wmul+1,w,c
  5472  000F38  6EF7               	movwf	tblptrh,c
  5473  000F3A                     	if	0	;There are less than 3 active tblptr bytes
  5474  000F3A                     	endif
  5475  000F3A  0009               	tblrd		*+
  5476  000F3C  CFF5 F02A          	movff	tablat,___ftmul@f2
  5477  000F40  0009               	tblrd		*+
  5478  000F42  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5479  000F46  000A               	tblrd		*-
  5480  000F48  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5481  000F4C  0E00               	movlw	0
  5482  000F4E  6E1C               	movwf	___awdiv@divisor+1,c
  5483  000F50  0E64               	movlw	100
  5484  000F52  6E1B               	movwf	___awdiv@divisor,c
  5485  000F54  C0A3  F019         	movff	fround@prec,___awdiv@dividend
  5486  000F58  6A1A               	clrf	___awdiv@dividend+1,c
  5487  000F5A  ECCD  F00F         	call	___awdiv	;wreg free
  5488  000F5E  0E12               	movlw	18
  5489  000F60  2419               	addwf	?___awdiv,w,c
  5490  000F62  6E21               	movwf	___wmul@multiplier,c
  5491  000F64  0E00               	movlw	0
  5492  000F66  201A               	addwfc	?___awdiv+1,w,c
  5493  000F68  6E22               	movwf	___wmul@multiplier+1,c
  5494  000F6A  0E00               	movlw	0
  5495  000F6C  6E24               	movwf	___wmul@multiplicand+1,c
  5496  000F6E  0E03               	movlw	3
  5497  000F70  6E23               	movwf	___wmul@multiplicand,c
  5498  000F72  ECCD  F013         	call	___wmul	;wreg free
  5499  000F76  0EE0               	movlw	low __npowers_
  5500  000F78  2421               	addwf	?___wmul,w,c
  5501  000F7A  6EF6               	movwf	tblptrl,c
  5502  000F7C  0E7E               	movlw	high __npowers_
  5503  000F7E  2022               	addwfc	?___wmul+1,w,c
  5504  000F80  6EF7               	movwf	tblptrh,c
  5505  000F82                     	if	0	;There are less than 3 active tblptr bytes
  5506  000F82                     	endif
  5507  000F82  0009               	tblrd		*+
  5508  000F84  CFF5 F027          	movff	tablat,___ftmul@f1
  5509  000F88  0009               	tblrd		*+
  5510  000F8A  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5511  000F8E  000A               	tblrd		*-
  5512  000F90  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5513  000F94  ECA8  F00D         	call	___ftmul	;wreg free
  5514  000F98  C027  F0A0         	movff	?___ftmul,_fround$2235
  5515  000F9C  C028  F0A1         	movff	?___ftmul+1,_fround$2235+1
  5516  000FA0  C029  F0A2         	movff	?___ftmul+2,_fround$2235+2
  5517                           
  5518                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5519  000FA4  0E00               	movlw	0
  5520  000FA6  6E24               	movwf	___wmul@multiplicand+1,c
  5521  000FA8  0E03               	movlw	3
  5522  000FAA  6E23               	movwf	___wmul@multiplicand,c
  5523  000FAC  0E00               	movlw	0
  5524  000FAE  6E16               	movwf	___awmod@divisor+1,c
  5525  000FB0  0E0A               	movlw	10
  5526  000FB2  6E15               	movwf	___awmod@divisor,c
  5527  000FB4  C0A3  F013         	movff	fround@prec,___awmod@dividend
  5528  000FB8  6A14               	clrf	___awmod@dividend+1,c
  5529  000FBA  ECC7  F010         	call	___awmod	;wreg free
  5530  000FBE  C013  F021         	movff	?___awmod,___wmul@multiplier
  5531  000FC2  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5532  000FC6  ECCD  F013         	call	___wmul	;wreg free
  5533  000FCA  0EE0               	movlw	low __npowers_
  5534  000FCC  2421               	addwf	?___wmul,w,c
  5535  000FCE  6EF6               	movwf	tblptrl,c
  5536  000FD0  0E7E               	movlw	high __npowers_
  5537  000FD2  2022               	addwfc	?___wmul+1,w,c
  5538  000FD4  6EF7               	movwf	tblptrh,c
  5539  000FD6                     	if	0	;There are less than 3 active tblptr bytes
  5540  000FD6                     	endif
  5541  000FD6  0009               	tblrd		*+
  5542  000FD8  CFF5 F02A          	movff	tablat,___ftmul@f2
  5543  000FDC  0009               	tblrd		*+
  5544  000FDE  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5545  000FE2  000A               	tblrd		*-
  5546  000FE4  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5547  000FE8  C0A0  F027         	movff	_fround$2235,___ftmul@f1
  5548  000FEC  C0A1  F028         	movff	_fround$2235+1,___ftmul@f1+1
  5549  000FF0  C0A2  F029         	movff	_fround$2235+2,___ftmul@f1+2
  5550  000FF4  ECA8  F00D         	call	___ftmul	;wreg free
  5551  000FF8  C027  F09D         	movff	?___ftmul,_fround$2236
  5552  000FFC  C028  F09E         	movff	?___ftmul+1,_fround$2236+1
  5553  001000  C029  F09F         	movff	?___ftmul+2,_fround$2236+2
  5554                           
  5555                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5556  001004  C09D  F027         	movff	_fround$2236,___ftmul@f1
  5557  001008  C09E  F028         	movff	_fround$2236+1,___ftmul@f1+1
  5558  00100C  C09F  F029         	movff	_fround$2236+2,___ftmul@f1+2
  5559  001010  0E00               	movlw	0
  5560  001012  6E2A               	movwf	___ftmul@f2,c
  5561  001014  0E00               	movlw	0
  5562  001016  6E2B               	movwf	___ftmul@f2+1,c
  5563  001018  0E3F               	movlw	63
  5564  00101A  6E2C               	movwf	___ftmul@f2+2,c
  5565  00101C  ECA8  F00D         	call	___ftmul	;wreg free
  5566  001020  C027  F036         	movff	?___ftmul,?_fround
  5567  001024  C028  F037         	movff	?___ftmul+1,?_fround+1
  5568  001028  C029  F038         	movff	?___ftmul+2,?_fround+2
  5569  00102C  0012               	return	
  5570  00102E                     l798:
  5571                           
  5572                           ;doprnt.c: 415: else if(prec > 10)
  5573  00102E  0E0A               	movlw	10
  5574  001030  0100               	movlb	0	; () banked
  5575  001032  65A3               	cpfsgt	fround@prec& (0+255),b
  5576  001034  D063               	goto	l801
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5580  001036  0E00               	movlw	0
  5581  001038  6E24               	movwf	___wmul@multiplicand+1,c
  5582  00103A  0E03               	movlw	3
  5583  00103C  6E23               	movwf	___wmul@multiplicand,c
  5584  00103E  0E00               	movlw	0
  5585  001040  6E16               	movwf	___awmod@divisor+1,c
  5586  001042  0E0A               	movlw	10
  5587  001044  6E15               	movwf	___awmod@divisor,c
  5588  001046  C0A3  F013         	movff	fround@prec,___awmod@dividend
  5589  00104A  6A14               	clrf	___awmod@dividend+1,c
  5590  00104C  ECC7  F010         	call	___awmod	;wreg free
  5591  001050  C013  F021         	movff	?___awmod,___wmul@multiplier
  5592  001054  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5593  001058  ECCD  F013         	call	___wmul	;wreg free
  5594  00105C  0EE0               	movlw	low __npowers_
  5595  00105E  2421               	addwf	?___wmul,w,c
  5596  001060  6EF6               	movwf	tblptrl,c
  5597  001062  0E7E               	movlw	high __npowers_
  5598  001064  2022               	addwfc	?___wmul+1,w,c
  5599  001066  6EF7               	movwf	tblptrh,c
  5600  001068                     	if	0	;There are less than 3 active tblptr bytes
  5601  001068                     	endif
  5602  001068  0009               	tblrd		*+
  5603  00106A  CFF5 F02A          	movff	tablat,___ftmul@f2
  5604  00106E  0009               	tblrd		*+
  5605  001070  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5606  001074  000A               	tblrd		*-
  5607  001076  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5608  00107A  0E00               	movlw	0
  5609  00107C  6E1C               	movwf	___awdiv@divisor+1,c
  5610  00107E  0E0A               	movlw	10
  5611  001080  6E1B               	movwf	___awdiv@divisor,c
  5612  001082  C0A3  F019         	movff	fround@prec,___awdiv@dividend
  5613  001086  6A1A               	clrf	___awdiv@dividend+1,c
  5614  001088  ECCD  F00F         	call	___awdiv	;wreg free
  5615  00108C  0E09               	movlw	9
  5616  00108E  2419               	addwf	?___awdiv,w,c
  5617  001090  6E21               	movwf	___wmul@multiplier,c
  5618  001092  0E00               	movlw	0
  5619  001094  201A               	addwfc	?___awdiv+1,w,c
  5620  001096  6E22               	movwf	___wmul@multiplier+1,c
  5621  001098  0E00               	movlw	0
  5622  00109A  6E24               	movwf	___wmul@multiplicand+1,c
  5623  00109C  0E03               	movlw	3
  5624  00109E  6E23               	movwf	___wmul@multiplicand,c
  5625  0010A0  ECCD  F013         	call	___wmul	;wreg free
  5626  0010A4  0EE0               	movlw	low __npowers_
  5627  0010A6  2421               	addwf	?___wmul,w,c
  5628  0010A8  6EF6               	movwf	tblptrl,c
  5629  0010AA  0E7E               	movlw	high __npowers_
  5630  0010AC  2022               	addwfc	?___wmul+1,w,c
  5631  0010AE  6EF7               	movwf	tblptrh,c
  5632  0010B0                     	if	0	;There are less than 3 active tblptr bytes
  5633  0010B0                     	endif
  5634  0010B0  0009               	tblrd		*+
  5635  0010B2  CFF5 F027          	movff	tablat,___ftmul@f1
  5636  0010B6  0009               	tblrd		*+
  5637  0010B8  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5638  0010BC  000A               	tblrd		*-
  5639  0010BE  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5640  0010C2  ECA8  F00D         	call	___ftmul	;wreg free
  5641  0010C6  C027  F0A0         	movff	?___ftmul,_fround$2235
  5642  0010CA  C028  F0A1         	movff	?___ftmul+1,_fround$2235+1
  5643  0010CE  C029  F0A2         	movff	?___ftmul+2,_fround$2235+2
  5644                           
  5645                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5646  0010D2  C0A0  F027         	movff	_fround$2235,___ftmul@f1
  5647  0010D6  C0A1  F028         	movff	_fround$2235+1,___ftmul@f1+1
  5648  0010DA  C0A2  F029         	movff	_fround$2235+2,___ftmul@f1+2
  5649  0010DE  0E00               	movlw	0
  5650  0010E0  6E2A               	movwf	___ftmul@f2,c
  5651  0010E2  0E00               	movlw	0
  5652  0010E4  6E2B               	movwf	___ftmul@f2+1,c
  5653  0010E6  0E3F               	movlw	63
  5654  0010E8  6E2C               	movwf	___ftmul@f2+2,c
  5655  0010EA  ECA8  F00D         	call	___ftmul	;wreg free
  5656  0010EE  C027  F036         	movff	?___ftmul,?_fround
  5657  0010F2  C028  F037         	movff	?___ftmul+1,?_fround+1
  5658  0010F6  C029  F038         	movff	?___ftmul+2,?_fround+2
  5659  0010FA  0012               	return	
  5660  0010FC                     l801:
  5661                           
  5662                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5663  0010FC  0100               	movlb	0	; () banked
  5664  0010FE  51A3               	movf	fround@prec& (0+255),w,b
  5665  001100  0D03               	mullw	3
  5666  001102  0EE0               	movlw	low __npowers_
  5667  001104  24F3               	addwf	prodl,w,c
  5668  001106  6EF6               	movwf	tblptrl,c
  5669  001108  0E7E               	movlw	high __npowers_
  5670  00110A  20F4               	addwfc	prodh,w,c
  5671  00110C  6EF7               	movwf	tblptrh,c
  5672  00110E                     	if	0	;There are less than 3 active tblptr bytes
  5673  00110E                     	endif
  5674  00110E  0009               	tblrd		*+
  5675  001110  CFF5 F027          	movff	tablat,___ftmul@f1
  5676  001114  0009               	tblrd		*+
  5677  001116  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5678  00111A  000A               	tblrd		*-
  5679  00111C  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5680  001120  0E00               	movlw	0
  5681  001122  6E2A               	movwf	___ftmul@f2,c
  5682  001124  0E00               	movlw	0
  5683  001126  6E2B               	movwf	___ftmul@f2+1,c
  5684  001128  0E3F               	movlw	63
  5685  00112A  6E2C               	movwf	___ftmul@f2+2,c
  5686  00112C  ECA8  F00D         	call	___ftmul	;wreg free
  5687  001130  C027  F036         	movff	?___ftmul,?_fround
  5688  001134  C028  F037         	movff	?___ftmul+1,?_fround+1
  5689  001138  C029  F038         	movff	?___ftmul+2,?_fround+2
  5690  00113C  0012               	return	
  5691  00113E                     __end_of_fround:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           intcon	equ	0xFF2
  5700                           postinc0	equ	0xFEE
  5701                           wreg	equ	0xFE8
  5702                           indf1	equ	0xFE7
  5703                           postdec1	equ	0xFE5
  5704                           plusw1	equ	0xFE3
  5705                           fsr1h	equ	0xFE2
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           plusw2	equ	0xFDB
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function ___wmul *****************
  5716 ;; Defined at:
  5717 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  multiplier      2   32[COMRAM] unsigned int 
  5720 ;;  multiplicand    2   34[COMRAM] unsigned int 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  product         2   36[COMRAM] unsigned int 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  2   32[COMRAM] unsigned int 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0, prodl, prodh
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5732 ;;      Params:         4       0       0       0       0       0       0
  5733 ;;      Locals:         2       0       0       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0
  5735 ;;      Totals:         6       0       0       0       0       0       0
  5736 ;;Total ram usage:        6 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    2
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_fround
  5743 ;;		_scale
  5744 ;;		_sprintf
  5745 ;;		_esp8266_receive
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           	psect	text17
  5750  00279A                     __ptext17:
  5751                           	opt stack 0
  5752  00279A                     ___wmul:
  5753                           	opt stack 25
  5754                           
  5755                           ;incstack = 0
  5756  00279A  5021               	movf	___wmul@multiplier,w,c
  5757  00279C  0223               	mulwf	___wmul@multiplicand,c
  5758  00279E  CFF3 F025          	movff	prodl,___wmul@product
  5759  0027A2  CFF4 F026          	movff	prodh,___wmul@product+1
  5760  0027A6  5021               	movf	___wmul@multiplier,w,c
  5761  0027A8  0224               	mulwf	___wmul@multiplicand+1,c
  5762  0027AA  50F3               	movf	prodl,w,c
  5763  0027AC  2626               	addwf	___wmul@product+1,f,c
  5764  0027AE  5022               	movf	___wmul@multiplier+1,w,c
  5765  0027B0  0223               	mulwf	___wmul@multiplicand,c
  5766  0027B2  50F3               	movf	prodl,w,c
  5767  0027B4  2626               	addwf	___wmul@product+1,f,c
  5768  0027B6  C025  F021         	movff	___wmul@product,?___wmul
  5769  0027BA  C026  F022         	movff	___wmul@product+1,?___wmul+1
  5770  0027BE  0012               	return	
  5771  0027C0                     __end_of___wmul:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           postdec1	equ	0xFE5
  5784                           plusw1	equ	0xFE3
  5785                           fsr1h	equ	0xFE2
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           plusw2	equ	0xFDB
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function ___ftmul *****************
  5796 ;; Defined at:
  5797 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/ftmul.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  f1              3   38[COMRAM] float 
  5800 ;;  f2              3   41[COMRAM] float 
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  5803 ;;  sign            1   52[COMRAM] unsigned char 
  5804 ;;  cntr            1   51[COMRAM] unsigned char 
  5805 ;;  exp             1   47[COMRAM] unsigned char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  3   38[COMRAM] float 
  5808 ;; Registers used:
  5809 ;;		wreg, status,2, status,0, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5815 ;;      Params:         6       0       0       0       0       0       0
  5816 ;;      Locals:         6       0       0       0       0       0       0
  5817 ;;      Temps:          3       0       0       0       0       0       0
  5818 ;;      Totals:        15       0       0       0       0       0       0
  5819 ;;Total ram usage:       15 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    3
  5822 ;; This function calls:
  5823 ;;		___ftpack
  5824 ;; This function is called by:
  5825 ;;		_get_pm
  5826 ;;		_fround
  5827 ;;		_scale
  5828 ;;		_sprintf
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           	psect	text18
  5833  001B50                     __ptext18:
  5834                           	opt stack 0
  5835  001B50                     ___ftmul:
  5836                           	opt stack 24
  5837                           
  5838                           ;incstack = 0
  5839  001B50  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  5840  001B54  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  5841  001B56  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  5842  001B58  3428               	rlcf	___ftmul@f1+1,w,c
  5843  001B5A  362D               	rlcf	??___ftmul& (0+255),f,c
  5844  001B5C  E301               	bnc	u5191
  5845  001B5E  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  5846  001B60                     u5191:
  5847  001B60  502D               	movf	??___ftmul,w,c
  5848  001B62  6E30               	movwf	___ftmul@exp,c
  5849  001B64  5030               	movf	___ftmul@exp,w,c
  5850  001B66  A4D8               	btfss	status,2,c
  5851  001B68  D007               	goto	l1197
  5852  001B6A  0E00               	movlw	0
  5853  001B6C  6E27               	movwf	?___ftmul,c
  5854  001B6E  0E00               	movlw	0
  5855  001B70  6E28               	movwf	?___ftmul+1,c
  5856  001B72  0E00               	movlw	0
  5857  001B74  6E29               	movwf	?___ftmul+2,c
  5858  001B76  0012               	return	
  5859  001B78                     l1197:
  5860  001B78  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  5861  001B7C  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  5862  001B7E  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  5863  001B80  342B               	rlcf	___ftmul@f2+1,w,c
  5864  001B82  362D               	rlcf	??___ftmul& (0+255),f,c
  5865  001B84  E301               	bnc	u5211
  5866  001B86  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  5867  001B88                     u5211:
  5868  001B88  502D               	movf	??___ftmul,w,c
  5869  001B8A  6E35               	movwf	___ftmul@sign,c
  5870  001B8C  5035               	movf	___ftmul@sign,w,c
  5871  001B8E  A4D8               	btfss	status,2,c
  5872  001B90  D007               	goto	l1199
  5873  001B92  0E00               	movlw	0
  5874  001B94  6E27               	movwf	?___ftmul,c
  5875  001B96  0E00               	movlw	0
  5876  001B98  6E28               	movwf	?___ftmul+1,c
  5877  001B9A  0E00               	movlw	0
  5878  001B9C  6E29               	movwf	?___ftmul+2,c
  5879  001B9E  0012               	return	
  5880  001BA0                     l1199:
  5881  001BA0  5035               	movf	___ftmul@sign,w,c
  5882  001BA2  0F7B               	addlw	123
  5883  001BA4  2630               	addwf	___ftmul@exp,f,c
  5884  001BA6  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  5885  001BAA  502C               	movf	___ftmul@f2+2,w,c
  5886  001BAC  1A35               	xorwf	___ftmul@sign,f,c
  5887  001BAE  0E80               	movlw	128
  5888  001BB0  1635               	andwf	___ftmul@sign,f,c
  5889  001BB2  8E28               	bsf	___ftmul@f1+1,7,c
  5890  001BB4  8E2B               	bsf	___ftmul@f2+1,7,c
  5891  001BB6  0EFF               	movlw	255
  5892  001BB8  162A               	andwf	___ftmul@f2,f,c
  5893  001BBA  0EFF               	movlw	255
  5894  001BBC  162B               	andwf	___ftmul@f2+1,f,c
  5895  001BBE  0E00               	movlw	0
  5896  001BC0  162C               	andwf	___ftmul@f2+2,f,c
  5897  001BC2  0E00               	movlw	0
  5898  001BC4  6E31               	movwf	___ftmul@f3_as_product,c
  5899  001BC6  0E00               	movlw	0
  5900  001BC8  6E32               	movwf	___ftmul@f3_as_product+1,c
  5901  001BCA  0E00               	movlw	0
  5902  001BCC  6E33               	movwf	___ftmul@f3_as_product+2,c
  5903  001BCE  0E07               	movlw	7
  5904  001BD0  6E34               	movwf	___ftmul@cntr,c
  5905  001BD2  A027               	btfss	___ftmul@f1,0,c
  5906  001BD4  D006               	goto	l1201
  5907  001BD6  502A               	movf	___ftmul@f2,w,c
  5908  001BD8  2631               	addwf	___ftmul@f3_as_product,f,c
  5909  001BDA  502B               	movf	___ftmul@f2+1,w,c
  5910  001BDC  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  5911  001BDE  502C               	movf	___ftmul@f2+2,w,c
  5912  001BE0  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  5913  001BE2                     l1201:
  5914  001BE2  90D8               	bcf	status,0,c
  5915  001BE4  3229               	rrcf	___ftmul@f1+2,f,c
  5916  001BE6  3228               	rrcf	___ftmul@f1+1,f,c
  5917  001BE8  3227               	rrcf	___ftmul@f1,f,c
  5918  001BEA  90D8               	bcf	status,0,c
  5919  001BEC  362A               	rlcf	___ftmul@f2,f,c
  5920  001BEE  362B               	rlcf	___ftmul@f2+1,f,c
  5921  001BF0  362C               	rlcf	___ftmul@f2+2,f,c
  5922  001BF2  2E34               	decfsz	___ftmul@cntr,f,c
  5923  001BF4  D7EE               	goto	l1200
  5924  001BF6  0E09               	movlw	9
  5925  001BF8  6E34               	movwf	___ftmul@cntr,c
  5926  001BFA  A027               	btfss	___ftmul@f1,0,c
  5927  001BFC  D006               	goto	l1204
  5928  001BFE  502A               	movf	___ftmul@f2,w,c
  5929  001C00  2631               	addwf	___ftmul@f3_as_product,f,c
  5930  001C02  502B               	movf	___ftmul@f2+1,w,c
  5931  001C04  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  5932  001C06  502C               	movf	___ftmul@f2+2,w,c
  5933  001C08  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  5934  001C0A                     l1204:
  5935  001C0A  90D8               	bcf	status,0,c
  5936  001C0C  3229               	rrcf	___ftmul@f1+2,f,c
  5937  001C0E  3228               	rrcf	___ftmul@f1+1,f,c
  5938  001C10  3227               	rrcf	___ftmul@f1,f,c
  5939  001C12  90D8               	bcf	status,0,c
  5940  001C14  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  5941  001C16  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  5942  001C18  3231               	rrcf	___ftmul@f3_as_product,f,c
  5943  001C1A  2E34               	decfsz	___ftmul@cntr,f,c
  5944  001C1C  D7EE               	goto	l1203
  5945  001C1E  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  5946  001C22  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5947  001C26  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5948  001C2A  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  5949  001C2E  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  5950  001C32  EC96  F00E         	call	___ftpack	;wreg free
  5951  001C36  C013  F027         	movff	?___ftpack,?___ftmul
  5952  001C3A  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  5953  001C3E  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  5954  001C42  0012               	return	
  5955  001C44                     __end_of___ftmul:
  5956                           	opt stack 0
  5957                           tblptru	equ	0xFF8
  5958                           tblptrh	equ	0xFF7
  5959                           tblptrl	equ	0xFF6
  5960                           tablat	equ	0xFF5
  5961                           prodh	equ	0xFF4
  5962                           prodl	equ	0xFF3
  5963                           intcon	equ	0xFF2
  5964                           postinc0	equ	0xFEE
  5965                           wreg	equ	0xFE8
  5966                           indf1	equ	0xFE7
  5967                           postdec1	equ	0xFE5
  5968                           plusw1	equ	0xFE3
  5969                           fsr1h	equ	0xFE2
  5970                           fsr1l	equ	0xFE1
  5971                           indf2	equ	0xFDF
  5972                           postinc2	equ	0xFDE
  5973                           postdec2	equ	0xFDD
  5974                           plusw2	equ	0xFDB
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function ___awmod *****************
  5980 ;; Defined at:
  5981 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  dividend        2   18[COMRAM] int 
  5984 ;;  divisor         2   20[COMRAM] int 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  sign            1   23[COMRAM] unsigned char 
  5987 ;;  counter         1   22[COMRAM] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  2   18[COMRAM] int 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5997 ;;      Params:         4       0       0       0       0       0       0
  5998 ;;      Locals:         2       0       0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0
  6000 ;;      Totals:         6       0       0       0       0       0       0
  6001 ;;Total ram usage:        6 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    2
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_fround
  6008 ;;		_scale
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text19
  6013  00218E                     __ptext19:
  6014                           	opt stack 0
  6015  00218E                     ___awmod:
  6016                           	opt stack 25
  6017                           
  6018                           ;incstack = 0
  6019  00218E  0E00               	movlw	0
  6020  002190  6E18               	movwf	___awmod@sign,c
  6021  002192  AE14               	btfss	___awmod@dividend+1,7,c
  6022  002194  D006               	goto	l1050
  6023  002196  6C13               	negf	___awmod@dividend,c
  6024  002198  1E14               	comf	___awmod@dividend+1,f,c
  6025  00219A  B0D8               	btfsc	status,0,c
  6026  00219C  2A14               	incf	___awmod@dividend+1,f,c
  6027  00219E  0E01               	movlw	1
  6028  0021A0  6E18               	movwf	___awmod@sign,c
  6029  0021A2                     l1050:
  6030  0021A2  AE16               	btfss	___awmod@divisor+1,7,c
  6031  0021A4  D004               	goto	l1051
  6032  0021A6  6C15               	negf	___awmod@divisor,c
  6033  0021A8  1E16               	comf	___awmod@divisor+1,f,c
  6034  0021AA  B0D8               	btfsc	status,0,c
  6035  0021AC  2A16               	incf	___awmod@divisor+1,f,c
  6036  0021AE                     l1051:
  6037  0021AE  5015               	movf	___awmod@divisor,w,c
  6038  0021B0  1016               	iorwf	___awmod@divisor+1,w,c
  6039  0021B2  B4D8               	btfsc	status,2,c
  6040  0021B4  D018               	goto	l1058
  6041  0021B6  0E01               	movlw	1
  6042  0021B8  6E17               	movwf	___awmod@counter,c
  6043  0021BA  D004               	goto	l1053
  6044  0021BC  90D8               	bcf	status,0,c
  6045  0021BE  3615               	rlcf	___awmod@divisor,f,c
  6046  0021C0  3616               	rlcf	___awmod@divisor+1,f,c
  6047  0021C2  2A17               	incf	___awmod@counter,f,c
  6048  0021C4                     l1053:
  6049  0021C4  AE16               	btfss	___awmod@divisor+1,7,c
  6050  0021C6  D7FA               	goto	l1054
  6051  0021C8                     u5340:
  6052  0021C8  5015               	movf	___awmod@divisor,w,c
  6053  0021CA  5C13               	subwf	___awmod@dividend,w,c
  6054  0021CC  5016               	movf	___awmod@divisor+1,w,c
  6055  0021CE  5814               	subwfb	___awmod@dividend+1,w,c
  6056  0021D0  A0D8               	btfss	status,0,c
  6057  0021D2  D004               	goto	l1057
  6058  0021D4  5015               	movf	___awmod@divisor,w,c
  6059  0021D6  5E13               	subwf	___awmod@dividend,f,c
  6060  0021D8  5016               	movf	___awmod@divisor+1,w,c
  6061  0021DA  5A14               	subwfb	___awmod@dividend+1,f,c
  6062  0021DC                     l1057:
  6063  0021DC  90D8               	bcf	status,0,c
  6064  0021DE  3216               	rrcf	___awmod@divisor+1,f,c
  6065  0021E0  3215               	rrcf	___awmod@divisor,f,c
  6066  0021E2  2E17               	decfsz	___awmod@counter,f,c
  6067  0021E4  D7F1               	goto	u5340
  6068  0021E6                     l1058:
  6069  0021E6  5018               	movf	___awmod@sign,w,c
  6070  0021E8  B4D8               	btfsc	status,2,c
  6071  0021EA  D004               	goto	l1059
  6072  0021EC  6C13               	negf	___awmod@dividend,c
  6073  0021EE  1E14               	comf	___awmod@dividend+1,f,c
  6074  0021F0  B0D8               	btfsc	status,0,c
  6075  0021F2  2A14               	incf	___awmod@dividend+1,f,c
  6076  0021F4                     l1059:
  6077  0021F4  C013  F013         	movff	___awmod@dividend,?___awmod
  6078  0021F8  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  6079  0021FC  0012               	return	
  6080  0021FE                     __end_of___awmod:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           indf1	equ	0xFE7
  6092                           postdec1	equ	0xFE5
  6093                           plusw1	equ	0xFE3
  6094                           fsr1h	equ	0xFE2
  6095                           fsr1l	equ	0xFE1
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           plusw2	equ	0xFDB
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function ___awdiv *****************
  6105 ;; Defined at:
  6106 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  dividend        2   24[COMRAM] int 
  6109 ;;  divisor         2   26[COMRAM] int 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  quotient        2   30[COMRAM] int 
  6112 ;;  sign            1   29[COMRAM] unsigned char 
  6113 ;;  counter         1   28[COMRAM] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  2   24[COMRAM] int 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6123 ;;      Params:         4       0       0       0       0       0       0
  6124 ;;      Locals:         4       0       0       0       0       0       0
  6125 ;;      Temps:          0       0       0       0       0       0       0
  6126 ;;      Totals:         8       0       0       0       0       0       0
  6127 ;;Total ram usage:        8 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    2
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_fround
  6134 ;;		_scale
  6135 ;;		_sprintf
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text20
  6140  001F9A                     __ptext20:
  6141                           	opt stack 0
  6142  001F9A                     ___awdiv:
  6143                           	opt stack 25
  6144                           
  6145                           ;incstack = 0
  6146  001F9A  0E00               	movlw	0
  6147  001F9C  6E1E               	movwf	___awdiv@sign,c
  6148  001F9E  AE1C               	btfss	___awdiv@divisor+1,7,c
  6149  001FA0  D006               	goto	l1037
  6150  001FA2  6C1B               	negf	___awdiv@divisor,c
  6151  001FA4  1E1C               	comf	___awdiv@divisor+1,f,c
  6152  001FA6  B0D8               	btfsc	status,0,c
  6153  001FA8  2A1C               	incf	___awdiv@divisor+1,f,c
  6154  001FAA  0E01               	movlw	1
  6155  001FAC  6E1E               	movwf	___awdiv@sign,c
  6156  001FAE                     l1037:
  6157  001FAE  AE1A               	btfss	___awdiv@dividend+1,7,c
  6158  001FB0  D006               	goto	l1038
  6159  001FB2  6C19               	negf	___awdiv@dividend,c
  6160  001FB4  1E1A               	comf	___awdiv@dividend+1,f,c
  6161  001FB6  B0D8               	btfsc	status,0,c
  6162  001FB8  2A1A               	incf	___awdiv@dividend+1,f,c
  6163  001FBA  0E01               	movlw	1
  6164  001FBC  1A1E               	xorwf	___awdiv@sign,f,c
  6165  001FBE                     l1038:
  6166  001FBE  0E00               	movlw	0
  6167  001FC0  6E20               	movwf	___awdiv@quotient+1,c
  6168  001FC2  0E00               	movlw	0
  6169  001FC4  6E1F               	movwf	___awdiv@quotient,c
  6170  001FC6  501B               	movf	___awdiv@divisor,w,c
  6171  001FC8  101C               	iorwf	___awdiv@divisor+1,w,c
  6172  001FCA  B4D8               	btfsc	status,2,c
  6173  001FCC  D01C               	goto	l1045
  6174  001FCE  0E01               	movlw	1
  6175  001FD0  6E1D               	movwf	___awdiv@counter,c
  6176  001FD2  D004               	goto	l1040
  6177  001FD4  90D8               	bcf	status,0,c
  6178  001FD6  361B               	rlcf	___awdiv@divisor,f,c
  6179  001FD8  361C               	rlcf	___awdiv@divisor+1,f,c
  6180  001FDA  2A1D               	incf	___awdiv@counter,f,c
  6181  001FDC                     l1040:
  6182  001FDC  AE1C               	btfss	___awdiv@divisor+1,7,c
  6183  001FDE  D7FA               	goto	l1041
  6184  001FE0                     u5280:
  6185  001FE0  90D8               	bcf	status,0,c
  6186  001FE2  361F               	rlcf	___awdiv@quotient,f,c
  6187  001FE4  3620               	rlcf	___awdiv@quotient+1,f,c
  6188  001FE6  501B               	movf	___awdiv@divisor,w,c
  6189  001FE8  5C19               	subwf	___awdiv@dividend,w,c
  6190  001FEA  501C               	movf	___awdiv@divisor+1,w,c
  6191  001FEC  581A               	subwfb	___awdiv@dividend+1,w,c
  6192  001FEE  A0D8               	btfss	status,0,c
  6193  001FF0  D005               	goto	l1044
  6194  001FF2  501B               	movf	___awdiv@divisor,w,c
  6195  001FF4  5E19               	subwf	___awdiv@dividend,f,c
  6196  001FF6  501C               	movf	___awdiv@divisor+1,w,c
  6197  001FF8  5A1A               	subwfb	___awdiv@dividend+1,f,c
  6198  001FFA  801F               	bsf	___awdiv@quotient,0,c
  6199  001FFC                     l1044:
  6200  001FFC  90D8               	bcf	status,0,c
  6201  001FFE  321C               	rrcf	___awdiv@divisor+1,f,c
  6202  002000  321B               	rrcf	___awdiv@divisor,f,c
  6203  002002  2E1D               	decfsz	___awdiv@counter,f,c
  6204  002004  D7ED               	goto	u5280
  6205  002006                     l1045:
  6206  002006  501E               	movf	___awdiv@sign,w,c
  6207  002008  B4D8               	btfsc	status,2,c
  6208  00200A  D004               	goto	l1046
  6209  00200C  6C1F               	negf	___awdiv@quotient,c
  6210  00200E  1E20               	comf	___awdiv@quotient+1,f,c
  6211  002010  B0D8               	btfsc	status,0,c
  6212  002012  2A20               	incf	___awdiv@quotient+1,f,c
  6213  002014                     l1046:
  6214  002014  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  6215  002018  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  6216  00201C  0012               	return	
  6217  00201E                     __end_of___awdiv:
  6218                           	opt stack 0
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           prodh	equ	0xFF4
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           postinc0	equ	0xFEE
  6227                           wreg	equ	0xFE8
  6228                           indf1	equ	0xFE7
  6229                           postdec1	equ	0xFE5
  6230                           plusw1	equ	0xFE3
  6231                           fsr1h	equ	0xFE2
  6232                           fsr1l	equ	0xFE1
  6233                           indf2	equ	0xFDF
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           plusw2	equ	0xFDB
  6237                           fsr2h	equ	0xFDA
  6238                           fsr2l	equ	0xFD9
  6239                           status	equ	0xFD8
  6240                           
  6241 ;; *************** function __tdiv_to_l_ *****************
  6242 ;; Defined at:
  6243 ;;		line 60 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdivl.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;  f1              3   18[COMRAM] float 
  6246 ;;  f2              3   21[COMRAM] float 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  quot            4   27[COMRAM] unsigned long 
  6249 ;;  exp1            1   32[COMRAM] unsigned char 
  6250 ;;  cntr            1   31[COMRAM] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  4   18[COMRAM] unsigned long 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6260 ;;      Params:         6       0       0       0       0       0       0
  6261 ;;      Locals:         6       0       0       0       0       0       0
  6262 ;;      Temps:          3       0       0       0       0       0       0
  6263 ;;      Totals:        15       0       0       0       0       0       0
  6264 ;;Total ram usage:       15 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    2
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_sprintf
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           	psect	text21
  6275  0016D2                     __ptext21:
  6276                           	opt stack 0
  6277  0016D2                     __tdiv_to_l_:
  6278                           	opt stack 26
  6279                           
  6280                           ;incstack = 0
  6281  0016D2  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6282  0016D6  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6283  0016D8  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6284  0016DA  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  6285  0016DC  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6286  0016DE  E301               	bnc	u5561
  6287  0016E0  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6288  0016E2                     u5561:
  6289  0016E2  5019               	movf	??__tdiv_to_l_,w,c
  6290  0016E4  6E21               	movwf	__tdiv_to_l_@exp1,c
  6291  0016E6  5021               	movf	__tdiv_to_l_@exp1,w,c
  6292  0016E8  A4D8               	btfss	status,2,c
  6293  0016EA  D009               	goto	l1173
  6294  0016EC  0E00               	movlw	0
  6295  0016EE  6E13               	movwf	?__tdiv_to_l_,c
  6296  0016F0  0E00               	movlw	0
  6297  0016F2  6E14               	movwf	?__tdiv_to_l_+1,c
  6298  0016F4  0E00               	movlw	0
  6299  0016F6  6E15               	movwf	?__tdiv_to_l_+2,c
  6300  0016F8  0E00               	movlw	0
  6301  0016FA  6E16               	movwf	?__tdiv_to_l_+3,c
  6302  0016FC  0012               	return	
  6303  0016FE                     l1173:
  6304  0016FE  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6305  001702  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6306  001704  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6307  001706  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  6308  001708  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6309  00170A  E301               	bnc	u5581
  6310  00170C  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6311  00170E                     u5581:
  6312  00170E  5019               	movf	??__tdiv_to_l_,w,c
  6313  001710  6E20               	movwf	__tdiv_to_l_@cntr,c
  6314  001712  5020               	movf	__tdiv_to_l_@cntr,w,c
  6315  001714  A4D8               	btfss	status,2,c
  6316  001716  D009               	goto	l1175
  6317  001718  0E00               	movlw	0
  6318  00171A  6E13               	movwf	?__tdiv_to_l_,c
  6319  00171C  0E00               	movlw	0
  6320  00171E  6E14               	movwf	?__tdiv_to_l_+1,c
  6321  001720  0E00               	movlw	0
  6322  001722  6E15               	movwf	?__tdiv_to_l_+2,c
  6323  001724  0E00               	movlw	0
  6324  001726  6E16               	movwf	?__tdiv_to_l_+3,c
  6325  001728  0012               	return	
  6326  00172A                     l1175:
  6327  00172A  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  6328  00172C  0EFF               	movlw	255
  6329  00172E  1613               	andwf	__tdiv_to_l_@f1,f,c
  6330  001730  0EFF               	movlw	255
  6331  001732  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  6332  001734  0E00               	movlw	0
  6333  001736  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  6334  001738  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  6335  00173A  0EFF               	movlw	255
  6336  00173C  1616               	andwf	__tdiv_to_l_@f2,f,c
  6337  00173E  0EFF               	movlw	255
  6338  001740  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  6339  001742  0E00               	movlw	0
  6340  001744  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  6341  001746  0E00               	movlw	0
  6342  001748  6E1C               	movwf	__tdiv_to_l_@quot,c
  6343  00174A  0E00               	movlw	0
  6344  00174C  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  6345  00174E  0E00               	movlw	0
  6346  001750  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  6347  001752  0E00               	movlw	0
  6348  001754  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  6349  001756  0E7F               	movlw	127
  6350  001758  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  6351  00175A  5020               	movf	__tdiv_to_l_@cntr,w,c
  6352  00175C  0F98               	addlw	152
  6353  00175E  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  6354  001760  0E18               	movlw	24
  6355  001762  6E20               	movwf	__tdiv_to_l_@cntr,c
  6356  001764                     l1176:
  6357  001764  90D8               	bcf	status,0,c
  6358  001766  361C               	rlcf	__tdiv_to_l_@quot,f,c
  6359  001768  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6360  00176A  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6361  00176C  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6362  00176E  5016               	movf	__tdiv_to_l_@f2,w,c
  6363  001770  5C13               	subwf	__tdiv_to_l_@f1,w,c
  6364  001772  5017               	movf	__tdiv_to_l_@f2+1,w,c
  6365  001774  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  6366  001776  5018               	movf	__tdiv_to_l_@f2+2,w,c
  6367  001778  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  6368  00177A  A0D8               	btfss	status,0,c
  6369  00177C  D007               	goto	l1177
  6370  00177E  5016               	movf	__tdiv_to_l_@f2,w,c
  6371  001780  5E13               	subwf	__tdiv_to_l_@f1,f,c
  6372  001782  5017               	movf	__tdiv_to_l_@f2+1,w,c
  6373  001784  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  6374  001786  5018               	movf	__tdiv_to_l_@f2+2,w,c
  6375  001788  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  6376  00178A  801C               	bsf	__tdiv_to_l_@quot,0,c
  6377  00178C                     l1177:
  6378  00178C  90D8               	bcf	status,0,c
  6379  00178E  3613               	rlcf	__tdiv_to_l_@f1,f,c
  6380  001790  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  6381  001792  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  6382  001794  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  6383  001796  D7E6               	goto	l1176
  6384  001798  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  6385  00179A  D016               	goto	l1179
  6386  00179C  5021               	movf	__tdiv_to_l_@exp1,w,c
  6387  00179E  0A80               	xorlw	128
  6388  0017A0  0F97               	addlw	151
  6389  0017A2  B0D8               	btfsc	status,0,c
  6390  0017A4  D009               	goto	l1180
  6391  0017A6  0E00               	movlw	0
  6392  0017A8  6E13               	movwf	?__tdiv_to_l_,c
  6393  0017AA  0E00               	movlw	0
  6394  0017AC  6E14               	movwf	?__tdiv_to_l_+1,c
  6395  0017AE  0E00               	movlw	0
  6396  0017B0  6E15               	movwf	?__tdiv_to_l_+2,c
  6397  0017B2  0E00               	movlw	0
  6398  0017B4  6E16               	movwf	?__tdiv_to_l_+3,c
  6399  0017B6  0012               	return	
  6400  0017B8                     l1180:
  6401  0017B8  90D8               	bcf	status,0,c
  6402  0017BA  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  6403  0017BC  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  6404  0017BE  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  6405  0017C0  321C               	rrcf	__tdiv_to_l_@quot,f,c
  6406  0017C2  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  6407  0017C4  D7F9               	goto	l1180
  6408  0017C6  D015               	goto	u5640
  6409  0017C8                     l1179:
  6410  0017C8  0E17               	movlw	23
  6411  0017CA  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  6412  0017CC  D00F               	goto	l1185
  6413  0017CE  0E00               	movlw	0
  6414  0017D0  6E13               	movwf	?__tdiv_to_l_,c
  6415  0017D2  0E00               	movlw	0
  6416  0017D4  6E14               	movwf	?__tdiv_to_l_+1,c
  6417  0017D6  0E00               	movlw	0
  6418  0017D8  6E15               	movwf	?__tdiv_to_l_+2,c
  6419  0017DA  0E00               	movlw	0
  6420  0017DC  6E16               	movwf	?__tdiv_to_l_+3,c
  6421  0017DE  0012               	return	
  6422  0017E0  90D8               	bcf	status,0,c
  6423  0017E2  361C               	rlcf	__tdiv_to_l_@quot,f,c
  6424  0017E4  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6425  0017E6  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6426  0017E8  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6427  0017EA  0621               	decf	__tdiv_to_l_@exp1,f,c
  6428  0017EC                     l1185:
  6429  0017EC  5021               	movf	__tdiv_to_l_@exp1,w,c
  6430  0017EE  A4D8               	btfss	status,2,c
  6431  0017F0  D7F7               	goto	l1186
  6432  0017F2                     u5640:
  6433  0017F2  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6434  0017F6  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6435  0017FA  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6436  0017FE  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6437  001802  0012               	return		;funcret
  6438  001804                     __end_of__tdiv_to_l_:
  6439                           	opt stack 0
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           intcon	equ	0xFF2
  6447                           postinc0	equ	0xFEE
  6448                           wreg	equ	0xFE8
  6449                           indf1	equ	0xFE7
  6450                           postdec1	equ	0xFE5
  6451                           plusw1	equ	0xFE3
  6452                           fsr1h	equ	0xFE2
  6453                           fsr1l	equ	0xFE1
  6454                           indf2	equ	0xFDF
  6455                           postinc2	equ	0xFDE
  6456                           postdec2	equ	0xFDD
  6457                           plusw2	equ	0xFDB
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function __div_to_l_ *****************
  6463 ;; Defined at:
  6464 ;;		line 60 in file "/Applications/microchip/xc8/v1.45/sources/common/fldivl.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  f1              3   18[COMRAM] unsigned long 
  6467 ;;  f2              3   21[COMRAM] unsigned long 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  quot            4   24[COMRAM] unsigned long 
  6470 ;;  exp1            1   29[COMRAM] unsigned char 
  6471 ;;  cntr            1   28[COMRAM] unsigned char 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  4   18[COMRAM] unsigned long 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6481 ;;      Params:         6       0       0       0       0       0       0
  6482 ;;      Locals:         6       0       0       0       0       0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0
  6484 ;;      Totals:        12       0       0       0       0       0       0
  6485 ;;Total ram usage:       12 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    2
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_sprintf
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text22
  6496  001930                     __ptext22:
  6497                           	opt stack 0
  6498  001930                     __div_to_l_:
  6499                           	opt stack 26
  6500                           
  6501                           ;incstack = 0
  6502  001930  3415               	rlcf	__div_to_l_@f1+2,w,c
  6503  001932  3416               	rlcf	__div_to_l_@f1+3,w,c
  6504  001934  6E1E               	movwf	__div_to_l_@exp1,c
  6505  001936  501E               	movf	__div_to_l_@exp1,w,c
  6506  001938  A4D8               	btfss	status,2,c
  6507  00193A  D009               	goto	l1069
  6508  00193C  0E00               	movlw	0
  6509  00193E  6E13               	movwf	?__div_to_l_,c
  6510  001940  0E00               	movlw	0
  6511  001942  6E14               	movwf	?__div_to_l_+1,c
  6512  001944  0E00               	movlw	0
  6513  001946  6E15               	movwf	?__div_to_l_+2,c
  6514  001948  0E00               	movlw	0
  6515  00194A  6E16               	movwf	?__div_to_l_+3,c
  6516  00194C  0012               	return	
  6517  00194E                     l1069:
  6518  00194E  3418               	rlcf	__div_to_l_@f2+2,w,c
  6519  001950  3419               	rlcf	__div_to_l_@f2+3,w,c
  6520  001952  6E1D               	movwf	__div_to_l_@cntr,c
  6521  001954  501D               	movf	__div_to_l_@cntr,w,c
  6522  001956  A4D8               	btfss	status,2,c
  6523  001958  D009               	goto	l1071
  6524  00195A  0E00               	movlw	0
  6525  00195C  6E13               	movwf	?__div_to_l_,c
  6526  00195E  0E00               	movlw	0
  6527  001960  6E14               	movwf	?__div_to_l_+1,c
  6528  001962  0E00               	movlw	0
  6529  001964  6E15               	movwf	?__div_to_l_+2,c
  6530  001966  0E00               	movlw	0
  6531  001968  6E16               	movwf	?__div_to_l_+3,c
  6532  00196A  0012               	return	
  6533  00196C                     l1071:
  6534  00196C  8E15               	bsf	__div_to_l_@f1+2,7,c
  6535  00196E  0EFF               	movlw	255
  6536  001970  1613               	andwf	__div_to_l_@f1,f,c
  6537  001972  0EFF               	movlw	255
  6538  001974  1614               	andwf	__div_to_l_@f1+1,f,c
  6539  001976  0EFF               	movlw	255
  6540  001978  1615               	andwf	__div_to_l_@f1+2,f,c
  6541  00197A  0E00               	movlw	0
  6542  00197C  1616               	andwf	__div_to_l_@f1+3,f,c
  6543  00197E  8E18               	bsf	__div_to_l_@f2+2,7,c
  6544  001980  0EFF               	movlw	255
  6545  001982  1616               	andwf	__div_to_l_@f2,f,c
  6546  001984  0EFF               	movlw	255
  6547  001986  1617               	andwf	__div_to_l_@f2+1,f,c
  6548  001988  0EFF               	movlw	255
  6549  00198A  1618               	andwf	__div_to_l_@f2+2,f,c
  6550  00198C  0E00               	movlw	0
  6551  00198E  1619               	andwf	__div_to_l_@f2+3,f,c
  6552  001990  0E00               	movlw	0
  6553  001992  6E19               	movwf	__div_to_l_@quot,c
  6554  001994  0E00               	movlw	0
  6555  001996  6E1A               	movwf	__div_to_l_@quot+1,c
  6556  001998  0E00               	movlw	0
  6557  00199A  6E1B               	movwf	__div_to_l_@quot+2,c
  6558  00199C  0E00               	movlw	0
  6559  00199E  6E1C               	movwf	__div_to_l_@quot+3,c
  6560  0019A0  0E7F               	movlw	127
  6561  0019A2  5E1E               	subwf	__div_to_l_@exp1,f,c
  6562  0019A4  501D               	movf	__div_to_l_@cntr,w,c
  6563  0019A6  0FA0               	addlw	160
  6564  0019A8  5E1E               	subwf	__div_to_l_@exp1,f,c
  6565  0019AA  0E20               	movlw	32
  6566  0019AC  6E1D               	movwf	__div_to_l_@cntr,c
  6567  0019AE  90D8               	bcf	status,0,c
  6568  0019B0  3619               	rlcf	__div_to_l_@quot,f,c
  6569  0019B2  361A               	rlcf	__div_to_l_@quot+1,f,c
  6570  0019B4  361B               	rlcf	__div_to_l_@quot+2,f,c
  6571  0019B6  361C               	rlcf	__div_to_l_@quot+3,f,c
  6572  0019B8  5016               	movf	__div_to_l_@f2,w,c
  6573  0019BA  5C13               	subwf	__div_to_l_@f1,w,c
  6574  0019BC  5017               	movf	__div_to_l_@f2+1,w,c
  6575  0019BE  5814               	subwfb	__div_to_l_@f1+1,w,c
  6576  0019C0  5018               	movf	__div_to_l_@f2+2,w,c
  6577  0019C2  5815               	subwfb	__div_to_l_@f1+2,w,c
  6578  0019C4  5019               	movf	__div_to_l_@f2+3,w,c
  6579  0019C6  5816               	subwfb	__div_to_l_@f1+3,w,c
  6580  0019C8  A0D8               	btfss	status,0,c
  6581  0019CA  D009               	goto	l1073
  6582  0019CC  5016               	movf	__div_to_l_@f2,w,c
  6583  0019CE  5E13               	subwf	__div_to_l_@f1,f,c
  6584  0019D0  5017               	movf	__div_to_l_@f2+1,w,c
  6585  0019D2  5A14               	subwfb	__div_to_l_@f1+1,f,c
  6586  0019D4  5018               	movf	__div_to_l_@f2+2,w,c
  6587  0019D6  5A15               	subwfb	__div_to_l_@f1+2,f,c
  6588  0019D8  5019               	movf	__div_to_l_@f2+3,w,c
  6589  0019DA  5A16               	subwfb	__div_to_l_@f1+3,f,c
  6590  0019DC  8019               	bsf	__div_to_l_@quot,0,c
  6591  0019DE                     l1073:
  6592  0019DE  90D8               	bcf	status,0,c
  6593  0019E0  3613               	rlcf	__div_to_l_@f1,f,c
  6594  0019E2  3614               	rlcf	__div_to_l_@f1+1,f,c
  6595  0019E4  3615               	rlcf	__div_to_l_@f1+2,f,c
  6596  0019E6  3616               	rlcf	__div_to_l_@f1+3,f,c
  6597  0019E8  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6598  0019EA  D7E1               	goto	l1072
  6599  0019EC  AE1E               	btfss	__div_to_l_@exp1,7,c
  6600  0019EE  D016               	goto	l1075
  6601  0019F0  501E               	movf	__div_to_l_@exp1,w,c
  6602  0019F2  0A80               	xorlw	128
  6603  0019F4  0F9F               	addlw	159
  6604  0019F6  B0D8               	btfsc	status,0,c
  6605  0019F8  D009               	goto	l1076
  6606  0019FA  0E00               	movlw	0
  6607  0019FC  6E13               	movwf	?__div_to_l_,c
  6608  0019FE  0E00               	movlw	0
  6609  001A00  6E14               	movwf	?__div_to_l_+1,c
  6610  001A02  0E00               	movlw	0
  6611  001A04  6E15               	movwf	?__div_to_l_+2,c
  6612  001A06  0E00               	movlw	0
  6613  001A08  6E16               	movwf	?__div_to_l_+3,c
  6614  001A0A  0012               	return	
  6615  001A0C                     l1076:
  6616  001A0C  90D8               	bcf	status,0,c
  6617  001A0E  321C               	rrcf	__div_to_l_@quot+3,f,c
  6618  001A10  321B               	rrcf	__div_to_l_@quot+2,f,c
  6619  001A12  321A               	rrcf	__div_to_l_@quot+1,f,c
  6620  001A14  3219               	rrcf	__div_to_l_@quot,f,c
  6621  001A16  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6622  001A18  D7F9               	goto	l1076
  6623  001A1A  D015               	goto	u5710
  6624  001A1C                     l1075:
  6625  001A1C  0E1F               	movlw	31
  6626  001A1E  641E               	cpfsgt	__div_to_l_@exp1,c
  6627  001A20  D00F               	goto	l1081
  6628  001A22  0E00               	movlw	0
  6629  001A24  6E13               	movwf	?__div_to_l_,c
  6630  001A26  0E00               	movlw	0
  6631  001A28  6E14               	movwf	?__div_to_l_+1,c
  6632  001A2A  0E00               	movlw	0
  6633  001A2C  6E15               	movwf	?__div_to_l_+2,c
  6634  001A2E  0E00               	movlw	0
  6635  001A30  6E16               	movwf	?__div_to_l_+3,c
  6636  001A32  0012               	return	
  6637  001A34  90D8               	bcf	status,0,c
  6638  001A36  3619               	rlcf	__div_to_l_@quot,f,c
  6639  001A38  361A               	rlcf	__div_to_l_@quot+1,f,c
  6640  001A3A  361B               	rlcf	__div_to_l_@quot+2,f,c
  6641  001A3C  361C               	rlcf	__div_to_l_@quot+3,f,c
  6642  001A3E  061E               	decf	__div_to_l_@exp1,f,c
  6643  001A40                     l1081:
  6644  001A40  501E               	movf	__div_to_l_@exp1,w,c
  6645  001A42  A4D8               	btfss	status,2,c
  6646  001A44  D7F7               	goto	l1082
  6647  001A46                     u5710:
  6648  001A46  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  6649  001A4A  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6650  001A4E  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6651  001A52  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6652  001A56  0012               	return		;funcret
  6653  001A58                     __end_of__div_to_l_:
  6654                           	opt stack 0
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon	equ	0xFF2
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           indf1	equ	0xFE7
  6665                           postdec1	equ	0xFE5
  6666                           plusw1	equ	0xFE3
  6667                           fsr1h	equ	0xFE2
  6668                           fsr1l	equ	0xFE1
  6669                           indf2	equ	0xFDF
  6670                           postinc2	equ	0xFDE
  6671                           postdec2	equ	0xFDD
  6672                           plusw2	equ	0xFDB
  6673                           fsr2h	equ	0xFDA
  6674                           fsr2l	equ	0xFD9
  6675                           status	equ	0xFD8
  6676                           
  6677 ;; *************** function ___lltoft *****************
  6678 ;; Defined at:
  6679 ;;		line 35 in file "/Applications/microchip/xc8/v1.45/sources/common/lltoft.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  c               4   26[COMRAM] unsigned long 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  exp             1   34[COMRAM] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  3   26[COMRAM] float 
  6686 ;; Registers used:
  6687 ;;		wreg, status,2, status,0, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6693 ;;      Params:         4       0       0       0       0       0       0
  6694 ;;      Locals:         1       0       0       0       0       0       0
  6695 ;;      Temps:          4       0       0       0       0       0       0
  6696 ;;      Totals:         9       0       0       0       0       0       0
  6697 ;;Total ram usage:        9 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    3
  6700 ;; This function calls:
  6701 ;;		___ftpack
  6702 ;; This function is called by:
  6703 ;;		_sprintf
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text23
  6708  002264                     __ptext23:
  6709                           	opt stack 0
  6710  002264                     ___lltoft:
  6711                           	opt stack 25
  6712                           
  6713                           ;incstack = 0
  6714  002264  0E8E               	movlw	142
  6715  002266  6E23               	movwf	___lltoft@exp,c
  6716  002268  D006               	goto	l1275
  6717  00226A  90D8               	bcf	status,0,c
  6718  00226C  321E               	rrcf	___lltoft@c+3,f,c
  6719  00226E  321D               	rrcf	___lltoft@c+2,f,c
  6720  002270  321C               	rrcf	___lltoft@c+1,f,c
  6721  002272  321B               	rrcf	___lltoft@c,f,c
  6722  002274  2A23               	incf	___lltoft@exp,f,c
  6723  002276                     l1275:
  6724  002276  0E00               	movlw	0
  6725  002278  141B               	andwf	___lltoft@c,w,c
  6726  00227A  6E1F               	movwf	??___lltoft& (0+255),c
  6727  00227C  0E00               	movlw	0
  6728  00227E  141C               	andwf	___lltoft@c+1,w,c
  6729  002280  6E20               	movwf	(??___lltoft+1)& (0+255),c
  6730  002282  0E00               	movlw	0
  6731  002284  141D               	andwf	___lltoft@c+2,w,c
  6732  002286  6E21               	movwf	(??___lltoft+2)& (0+255),c
  6733  002288  0EFF               	movlw	255
  6734  00228A  141E               	andwf	___lltoft@c+3,w,c
  6735  00228C  6E22               	movwf	(??___lltoft+3)& (0+255),c
  6736  00228E  501F               	movf	??___lltoft,w,c
  6737  002290  1020               	iorwf	??___lltoft+1,w,c
  6738  002292  1021               	iorwf	??___lltoft+2,w,c
  6739  002294  1022               	iorwf	??___lltoft+3,w,c
  6740  002296  A4D8               	btfss	status,2,c
  6741  002298  D7E8               	goto	l1276
  6742  00229A  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  6743  00229E  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  6744  0022A2  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  6745  0022A6  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  6746  0022AA  0E00               	movlw	0
  6747  0022AC  6E17               	movwf	___ftpack@sign,c
  6748  0022AE  EC96  F00E         	call	___ftpack	;wreg free
  6749  0022B2  C013  F01B         	movff	?___ftpack,?___lltoft
  6750  0022B6  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  6751  0022BA  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  6752  0022BE  0012               	return	
  6753  0022C0                     __end_of___lltoft:
  6754                           	opt stack 0
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           postinc0	equ	0xFEE
  6763                           wreg	equ	0xFE8
  6764                           indf1	equ	0xFE7
  6765                           postdec1	equ	0xFE5
  6766                           plusw1	equ	0xFE3
  6767                           fsr1h	equ	0xFE2
  6768                           fsr1l	equ	0xFE1
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           plusw2	equ	0xFDB
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function ___llmod *****************
  6778 ;; Defined at:
  6779 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/llmod.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  dividend        4   31[COMRAM] unsigned long 
  6782 ;;  divisor         4   35[COMRAM] unsigned long 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  counter         1   39[COMRAM] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  4   31[COMRAM] unsigned long 
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6794 ;;      Params:         8       0       0       0       0       0       0
  6795 ;;      Locals:         1       0       0       0       0       0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0
  6797 ;;      Totals:         9       0       0       0       0       0       0
  6798 ;;Total ram usage:        9 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    2
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_sprintf
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text24
  6809  0021FE                     __ptext24:
  6810                           	opt stack 0
  6811  0021FE                     ___llmod:
  6812                           	opt stack 26
  6813                           
  6814                           ;incstack = 0
  6815  0021FE  5024               	movf	___llmod@divisor,w,c
  6816  002200  1025               	iorwf	___llmod@divisor+1,w,c
  6817  002202  1026               	iorwf	___llmod@divisor+2,w,c
  6818  002204  1027               	iorwf	___llmod@divisor+3,w,c
  6819  002206  B4D8               	btfsc	status,2,c
  6820  002208  D024               	goto	l1269
  6821  00220A  0E01               	movlw	1
  6822  00220C  6E28               	movwf	___llmod@counter,c
  6823  00220E  D006               	goto	l1264
  6824  002210  90D8               	bcf	status,0,c
  6825  002212  3624               	rlcf	___llmod@divisor,f,c
  6826  002214  3625               	rlcf	___llmod@divisor+1,f,c
  6827  002216  3626               	rlcf	___llmod@divisor+2,f,c
  6828  002218  3627               	rlcf	___llmod@divisor+3,f,c
  6829  00221A  2A28               	incf	___llmod@counter,f,c
  6830  00221C                     l1264:
  6831  00221C  AE27               	btfss	___llmod@divisor+3,7,c
  6832  00221E  D7F8               	goto	l1265
  6833  002220                     u5890:
  6834  002220  5024               	movf	___llmod@divisor,w,c
  6835  002222  5C20               	subwf	___llmod@dividend,w,c
  6836  002224  5025               	movf	___llmod@divisor+1,w,c
  6837  002226  5821               	subwfb	___llmod@dividend+1,w,c
  6838  002228  5026               	movf	___llmod@divisor+2,w,c
  6839  00222A  5822               	subwfb	___llmod@dividend+2,w,c
  6840  00222C  5027               	movf	___llmod@divisor+3,w,c
  6841  00222E  5823               	subwfb	___llmod@dividend+3,w,c
  6842  002230  A0D8               	btfss	status,0,c
  6843  002232  D008               	goto	l1268
  6844  002234  5024               	movf	___llmod@divisor,w,c
  6845  002236  5E20               	subwf	___llmod@dividend,f,c
  6846  002238  5025               	movf	___llmod@divisor+1,w,c
  6847  00223A  5A21               	subwfb	___llmod@dividend+1,f,c
  6848  00223C  5026               	movf	___llmod@divisor+2,w,c
  6849  00223E  5A22               	subwfb	___llmod@dividend+2,f,c
  6850  002240  5027               	movf	___llmod@divisor+3,w,c
  6851  002242  5A23               	subwfb	___llmod@dividend+3,f,c
  6852  002244                     l1268:
  6853  002244  90D8               	bcf	status,0,c
  6854  002246  3227               	rrcf	___llmod@divisor+3,f,c
  6855  002248  3226               	rrcf	___llmod@divisor+2,f,c
  6856  00224A  3225               	rrcf	___llmod@divisor+1,f,c
  6857  00224C  3224               	rrcf	___llmod@divisor,f,c
  6858  00224E  2E28               	decfsz	___llmod@counter,f,c
  6859  002250  D7E7               	goto	u5890
  6860  002252                     l1269:
  6861  002252  C020  F020         	movff	___llmod@dividend,?___llmod
  6862  002256  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
  6863  00225A  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
  6864  00225E  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
  6865  002262  0012               	return		;funcret
  6866  002264                     __end_of___llmod:
  6867                           	opt stack 0
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodh	equ	0xFF4
  6873                           prodl	equ	0xFF3
  6874                           intcon	equ	0xFF2
  6875                           postinc0	equ	0xFEE
  6876                           wreg	equ	0xFE8
  6877                           indf1	equ	0xFE7
  6878                           postdec1	equ	0xFE5
  6879                           plusw1	equ	0xFE3
  6880                           fsr1h	equ	0xFE2
  6881                           fsr1l	equ	0xFE1
  6882                           indf2	equ	0xFDF
  6883                           postinc2	equ	0xFDE
  6884                           postdec2	equ	0xFDD
  6885                           plusw2	equ	0xFDB
  6886                           fsr2h	equ	0xFDA
  6887                           fsr2l	equ	0xFD9
  6888                           status	equ	0xFD8
  6889                           
  6890 ;; *************** function ___lldiv *****************
  6891 ;; Defined at:
  6892 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  dividend        4   18[COMRAM] unsigned long 
  6895 ;;  divisor         4   22[COMRAM] unsigned long 
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;  quotient        4   26[COMRAM] unsigned long 
  6898 ;;  counter         1   30[COMRAM] unsigned char 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  4   18[COMRAM] unsigned long 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6908 ;;      Params:         8       0       0       0       0       0       0
  6909 ;;      Locals:         5       0       0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0
  6911 ;;      Totals:        13       0       0       0       0       0       0
  6912 ;;Total ram usage:       13 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    2
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_sprintf
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text25
  6923  00201E                     __ptext25:
  6924                           	opt stack 0
  6925  00201E                     ___lldiv:
  6926                           	opt stack 26
  6927                           
  6928                           ;incstack = 0
  6929  00201E  0E00               	movlw	0
  6930  002020  6E1B               	movwf	___lldiv@quotient,c
  6931  002022  0E00               	movlw	0
  6932  002024  6E1C               	movwf	___lldiv@quotient+1,c
  6933  002026  0E00               	movlw	0
  6934  002028  6E1D               	movwf	___lldiv@quotient+2,c
  6935  00202A  0E00               	movlw	0
  6936  00202C  6E1E               	movwf	___lldiv@quotient+3,c
  6937  00202E  5017               	movf	___lldiv@divisor,w,c
  6938  002030  1018               	iorwf	___lldiv@divisor+1,w,c
  6939  002032  1019               	iorwf	___lldiv@divisor+2,w,c
  6940  002034  101A               	iorwf	___lldiv@divisor+3,w,c
  6941  002036  B4D8               	btfsc	status,2,c
  6942  002038  D02A               	goto	l1259
  6943  00203A  0E01               	movlw	1
  6944  00203C  6E1F               	movwf	___lldiv@counter,c
  6945  00203E  D006               	goto	l1254
  6946  002040  90D8               	bcf	status,0,c
  6947  002042  3617               	rlcf	___lldiv@divisor,f,c
  6948  002044  3618               	rlcf	___lldiv@divisor+1,f,c
  6949  002046  3619               	rlcf	___lldiv@divisor+2,f,c
  6950  002048  361A               	rlcf	___lldiv@divisor+3,f,c
  6951  00204A  2A1F               	incf	___lldiv@counter,f,c
  6952  00204C                     l1254:
  6953  00204C  AE1A               	btfss	___lldiv@divisor+3,7,c
  6954  00204E  D7F8               	goto	l1255
  6955  002050                     u5860:
  6956  002050  90D8               	bcf	status,0,c
  6957  002052  361B               	rlcf	___lldiv@quotient,f,c
  6958  002054  361C               	rlcf	___lldiv@quotient+1,f,c
  6959  002056  361D               	rlcf	___lldiv@quotient+2,f,c
  6960  002058  361E               	rlcf	___lldiv@quotient+3,f,c
  6961  00205A  5017               	movf	___lldiv@divisor,w,c
  6962  00205C  5C13               	subwf	___lldiv@dividend,w,c
  6963  00205E  5018               	movf	___lldiv@divisor+1,w,c
  6964  002060  5814               	subwfb	___lldiv@dividend+1,w,c
  6965  002062  5019               	movf	___lldiv@divisor+2,w,c
  6966  002064  5815               	subwfb	___lldiv@dividend+2,w,c
  6967  002066  501A               	movf	___lldiv@divisor+3,w,c
  6968  002068  5816               	subwfb	___lldiv@dividend+3,w,c
  6969  00206A  A0D8               	btfss	status,0,c
  6970  00206C  D009               	goto	l1258
  6971  00206E  5017               	movf	___lldiv@divisor,w,c
  6972  002070  5E13               	subwf	___lldiv@dividend,f,c
  6973  002072  5018               	movf	___lldiv@divisor+1,w,c
  6974  002074  5A14               	subwfb	___lldiv@dividend+1,f,c
  6975  002076  5019               	movf	___lldiv@divisor+2,w,c
  6976  002078  5A15               	subwfb	___lldiv@dividend+2,f,c
  6977  00207A  501A               	movf	___lldiv@divisor+3,w,c
  6978  00207C  5A16               	subwfb	___lldiv@dividend+3,f,c
  6979  00207E  801B               	bsf	___lldiv@quotient,0,c
  6980  002080                     l1258:
  6981  002080  90D8               	bcf	status,0,c
  6982  002082  321A               	rrcf	___lldiv@divisor+3,f,c
  6983  002084  3219               	rrcf	___lldiv@divisor+2,f,c
  6984  002086  3218               	rrcf	___lldiv@divisor+1,f,c
  6985  002088  3217               	rrcf	___lldiv@divisor,f,c
  6986  00208A  2E1F               	decfsz	___lldiv@counter,f,c
  6987  00208C  D7E1               	goto	u5860
  6988  00208E                     l1259:
  6989  00208E  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6990  002092  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6991  002096  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6992  00209A  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6993  00209E  0012               	return		;funcret
  6994  0020A0                     __end_of___lldiv:
  6995                           	opt stack 0
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           indf1	equ	0xFE7
  7006                           postdec1	equ	0xFE5
  7007                           plusw1	equ	0xFE3
  7008                           fsr1h	equ	0xFE2
  7009                           fsr1l	equ	0xFE1
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           plusw2	equ	0xFDB
  7014                           fsr2h	equ	0xFDA
  7015                           fsr2l	equ	0xFD9
  7016                           status	equ	0xFD8
  7017                           
  7018 ;; *************** function ___fttol *****************
  7019 ;; Defined at:
  7020 ;;		line 44 in file "/Applications/microchip/xc8/v1.45/sources/common/fttol.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;  f1              3    4[BANK0 ] float 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  lval            4   14[BANK0 ] unsigned long 
  7025 ;;  exp1            1   18[BANK0 ] unsigned char 
  7026 ;;  sign1           1   13[BANK0 ] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  4    4[BANK0 ] long 
  7029 ;; Registers used:
  7030 ;;		wreg, status,2, status,0
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7036 ;;      Params:         0       4       0       0       0       0       0
  7037 ;;      Locals:         0       6       0       0       0       0       0
  7038 ;;      Temps:          0       5       0       0       0       0       0
  7039 ;;      Totals:         0      15       0       0       0       0       0
  7040 ;;Total ram usage:       15 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    2
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		_sprintf
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text26
  7051  001A58                     __ptext26:
  7052                           	opt stack 0
  7053  001A58                     ___fttol:
  7054                           	opt stack 26
  7055                           
  7056                           ;incstack = 0
  7057  001A58  C0A3  F0A5         	movff	___fttol@f1+2,??___fttol
  7058  001A5C  0100               	movlb	0	; () banked
  7059  001A5E  6BA6               	clrf	(??___fttol+1)& (0+255),b
  7060  001A60  6BA7               	clrf	(??___fttol+2)& (0+255),b
  7061  001A62  35A2               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7062  001A64  37A5               	rlcf	??___fttol& (0+255),f,b
  7063  001A66  E301               	bnc	u5771
  7064  001A68  81A6               	bsf	(??___fttol+1)& (0+255),0,b
  7065  001A6A                     u5771:
  7066  001A6A  51A5               	movf	??___fttol& (0+255),w,b
  7067  001A6C  6FAF               	movwf	___fttol@exp1& (0+255),b
  7068  001A6E  51AF               	movf	___fttol@exp1& (0+255),w,b
  7069  001A70  A4D8               	btfss	status,2,c
  7070  001A72  D009               	goto	l1218
  7071                           
  7072                           ; BSR set to: 0
  7073  001A74  0E00               	movlw	0
  7074  001A76  6FA1               	movwf	?___fttol& (0+255),b
  7075  001A78  0E00               	movlw	0
  7076  001A7A  6FA2               	movwf	(?___fttol+1)& (0+255),b
  7077  001A7C  0E00               	movlw	0
  7078  001A7E  6FA3               	movwf	(?___fttol+2)& (0+255),b
  7079  001A80  0E00               	movlw	0
  7080  001A82  6FA4               	movwf	(?___fttol+3)& (0+255),b
  7081                           
  7082                           ; BSR set to: 0
  7083  001A84  0012               	return	
  7084  001A86                     l1218:
  7085                           
  7086                           ; BSR set to: 0
  7087                           
  7088                           ; BSR set to: 0
  7089  001A86  0E17               	movlw	23
  7090  001A88  6FA5               	movwf	??___fttol& (0+255),b
  7091  001A8A  C0A1  F0A6         	movff	___fttol@f1,??___fttol+1
  7092  001A8E  C0A2  F0A7         	movff	___fttol@f1+1,??___fttol+2
  7093  001A92  C0A3  F0A8         	movff	___fttol@f1+2,??___fttol+3
  7094  001A96  29A5               	incf	??___fttol& (0+255),w,b
  7095  001A98  6FA9               	movwf	(??___fttol+4)& (0+255),b
  7096  001A9A  D004               	goto	u5790
  7097  001A9C                     u5795:
  7098  001A9C  90D8               	bcf	status,0,c
  7099  001A9E  33A8               	rrcf	(??___fttol+3)& (0+255),f,b
  7100  001AA0  33A7               	rrcf	(??___fttol+2)& (0+255),f,b
  7101  001AA2  33A6               	rrcf	(??___fttol+1)& (0+255),f,b
  7102  001AA4                     u5790:
  7103  001AA4  2FA9               	decfsz	(??___fttol+4)& (0+255),f,b
  7104  001AA6  D7FA               	goto	u5795
  7105  001AA8  0100               	movlb	0	; () banked
  7106  001AAA  51A6               	movf	(??___fttol+1)& (0+255),w,b
  7107  001AAC  6FAA               	movwf	___fttol@sign1& (0+255),b
  7108                           
  7109                           ; BSR set to: 0
  7110  001AAE  8FA2               	bsf	(___fttol@f1+1)& (0+255),7,b
  7111                           
  7112                           ; BSR set to: 0
  7113  001AB0  0EFF               	movlw	255
  7114  001AB2  17A1               	andwf	___fttol@f1& (0+255),f,b
  7115  001AB4  0EFF               	movlw	255
  7116  001AB6  17A2               	andwf	(___fttol@f1+1)& (0+255),f,b
  7117  001AB8  0E00               	movlw	0
  7118  001ABA  17A3               	andwf	(___fttol@f1+2)& (0+255),f,b
  7119                           
  7120                           ; BSR set to: 0
  7121  001ABC  51A1               	movf	___fttol@f1& (0+255),w,b
  7122  001ABE  6FAB               	movwf	___fttol@lval& (0+255),b
  7123  001AC0  51A2               	movf	(___fttol@f1+1)& (0+255),w,b
  7124  001AC2  6FAC               	movwf	(___fttol@lval+1)& (0+255),b
  7125  001AC4  51A3               	movf	(___fttol@f1+2)& (0+255),w,b
  7126  001AC6  6FAD               	movwf	(___fttol@lval+2)& (0+255),b
  7127  001AC8  6BAE               	clrf	(___fttol@lval+3)& (0+255),b
  7128                           
  7129                           ; BSR set to: 0
  7130  001ACA  0E8E               	movlw	142
  7131  001ACC  5FAF               	subwf	___fttol@exp1& (0+255),f,b
  7132                           
  7133                           ; BSR set to: 0
  7134  001ACE  AFAF               	btfss	___fttol@exp1& (0+255),7,b
  7135  001AD0  D016               	goto	l1220
  7136                           
  7137                           ; BSR set to: 0
  7138  001AD2  51AF               	movf	___fttol@exp1& (0+255),w,b
  7139  001AD4  0A80               	xorlw	128
  7140  001AD6  0F8F               	addlw	143
  7141  001AD8  B0D8               	btfsc	status,0,c
  7142  001ADA  D009               	goto	l1221
  7143                           
  7144                           ; BSR set to: 0
  7145  001ADC  0E00               	movlw	0
  7146  001ADE  6FA1               	movwf	?___fttol& (0+255),b
  7147  001AE0  0E00               	movlw	0
  7148  001AE2  6FA2               	movwf	(?___fttol+1)& (0+255),b
  7149  001AE4  0E00               	movlw	0
  7150  001AE6  6FA3               	movwf	(?___fttol+2)& (0+255),b
  7151  001AE8  0E00               	movlw	0
  7152  001AEA  6FA4               	movwf	(?___fttol+3)& (0+255),b
  7153                           
  7154                           ; BSR set to: 0
  7155  001AEC  0012               	return	
  7156  001AEE                     l1221:
  7157                           
  7158                           ; BSR set to: 0
  7159                           
  7160                           ; BSR set to: 0
  7161                           
  7162                           ; BSR set to: 0
  7163  001AEE  90D8               	bcf	status,0,c
  7164  001AF0  33AE               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7165  001AF2  33AD               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7166  001AF4  33AC               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7167  001AF6  33AB               	rrcf	___fttol@lval& (0+255),f,b
  7168                           
  7169                           ; BSR set to: 0
  7170  001AF8  3FAF               	incfsz	___fttol@exp1& (0+255),f,b
  7171  001AFA  D7F9               	goto	l1221
  7172                           
  7173                           ; BSR set to: 0
  7174  001AFC  D015               	goto	u5830
  7175  001AFE                     l1220:
  7176                           
  7177                           ; BSR set to: 0
  7178                           
  7179                           ; BSR set to: 0
  7180  001AFE  0E17               	movlw	23
  7181  001B00  65AF               	cpfsgt	___fttol@exp1& (0+255),b
  7182  001B02  D00F               	goto	l1226
  7183                           
  7184                           ; BSR set to: 0
  7185  001B04  0E00               	movlw	0
  7186  001B06  6FA1               	movwf	?___fttol& (0+255),b
  7187  001B08  0E00               	movlw	0
  7188  001B0A  6FA2               	movwf	(?___fttol+1)& (0+255),b
  7189  001B0C  0E00               	movlw	0
  7190  001B0E  6FA3               	movwf	(?___fttol+2)& (0+255),b
  7191  001B10  0E00               	movlw	0
  7192  001B12  6FA4               	movwf	(?___fttol+3)& (0+255),b
  7193                           
  7194                           ; BSR set to: 0
  7195  001B14  0012               	return	
  7196  001B16                     
  7197                           ; BSR set to: 0
  7198                           
  7199                           ; BSR set to: 0
  7200  001B16  90D8               	bcf	status,0,c
  7201  001B18  37AB               	rlcf	___fttol@lval& (0+255),f,b
  7202  001B1A  37AC               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7203  001B1C  37AD               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7204  001B1E  37AE               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7205  001B20  07AF               	decf	___fttol@exp1& (0+255),f,b
  7206  001B22                     l1226:
  7207                           
  7208                           ; BSR set to: 0
  7209                           
  7210                           ; BSR set to: 0
  7211  001B22  51AF               	movf	___fttol@exp1& (0+255),w,b
  7212  001B24  A4D8               	btfss	status,2,c
  7213  001B26  D7F7               	goto	l1227
  7214  001B28                     u5830:
  7215                           
  7216                           ; BSR set to: 0
  7217                           
  7218                           ; BSR set to: 0
  7219                           
  7220                           ; BSR set to: 0
  7221  001B28  51AA               	movf	___fttol@sign1& (0+255),w,b
  7222  001B2A  B4D8               	btfsc	status,2,c
  7223  001B2C  D008               	goto	l1229
  7224                           
  7225                           ; BSR set to: 0
  7226  001B2E  1FAE               	comf	(___fttol@lval+3)& (0+255),f,b
  7227  001B30  1FAD               	comf	(___fttol@lval+2)& (0+255),f,b
  7228  001B32  1FAC               	comf	(___fttol@lval+1)& (0+255),f,b
  7229  001B34  6DAB               	negf	___fttol@lval& (0+255),b
  7230  001B36  0E00               	movlw	0
  7231  001B38  23AC               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7232  001B3A  23AD               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7233  001B3C  23AE               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7234  001B3E                     l1229:
  7235                           
  7236                           ; BSR set to: 0
  7237                           
  7238                           ; BSR set to: 0
  7239  001B3E  C0AB  F0A1         	movff	___fttol@lval,?___fttol
  7240  001B42  C0AC  F0A2         	movff	___fttol@lval+1,?___fttol+1
  7241  001B46  C0AD  F0A3         	movff	___fttol@lval+2,?___fttol+2
  7242  001B4A  C0AE  F0A4         	movff	___fttol@lval+3,?___fttol+3
  7243  001B4E  0012               	return	
  7244  001B50                     __end_of___fttol:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon	equ	0xFF2
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           indf1	equ	0xFE7
  7256                           postdec1	equ	0xFE5
  7257                           plusw1	equ	0xFE3
  7258                           fsr1h	equ	0xFE2
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           plusw2	equ	0xFDB
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function ___ftsub *****************
  7269 ;; Defined at:
  7270 ;;		line 20 in file "/Applications/microchip/xc8/v1.45/sources/common/ftsub.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;  f1              3   19[BANK0 ] float 
  7273 ;;  f2              3   22[BANK0 ] float 
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;		None
  7276 ;; Return value:  Size  Location     Type
  7277 ;;                  3   19[BANK0 ] float 
  7278 ;; Registers used:
  7279 ;;		wreg, status,2, status,0, cstack
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7285 ;;      Params:         0       6       0       0       0       0       0
  7286 ;;      Locals:         0       0       0       0       0       0       0
  7287 ;;      Temps:          0       0       0       0       0       0       0
  7288 ;;      Totals:         0       6       0       0       0       0       0
  7289 ;;Total ram usage:        6 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; Hardware stack levels required when called:    4
  7292 ;; This function calls:
  7293 ;;		___ftadd
  7294 ;; This function is called by:
  7295 ;;		_sprintf
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text27
  7300  002474                     __ptext27:
  7301                           	opt stack 0
  7302  002474                     ___ftsub:
  7303                           	opt stack 24
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;incstack = 0
  7307  002474  0100               	movlb	0	; () banked
  7308  002476  51B3               	movf	___ftsub@f2& (0+255),w,b
  7309  002478  11B4               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7310  00247A  11B5               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7311  00247C  B4D8               	btfsc	status,2,c
  7312  00247E  D006               	goto	l1214
  7313                           
  7314                           ; BSR set to: 0
  7315  002480  0E00               	movlw	0
  7316  002482  1BB3               	xorwf	___ftsub@f2& (0+255),f,b
  7317  002484  0E00               	movlw	0
  7318  002486  1BB4               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7319  002488  0E80               	movlw	128
  7320  00248A  1BB5               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7321  00248C                     l1214:
  7322                           
  7323                           ; BSR set to: 0
  7324                           
  7325                           ; BSR set to: 0
  7326  00248C  C0B0  F0A4         	movff	___ftsub@f1,___ftadd@f1
  7327  002490  C0B1  F0A5         	movff	___ftsub@f1+1,___ftadd@f1+1
  7328  002494  C0B2  F0A6         	movff	___ftsub@f1+2,___ftadd@f1+2
  7329  002498  C0B3  F0A7         	movff	___ftsub@f2,___ftadd@f2
  7330  00249C  C0B4  F0A8         	movff	___ftsub@f2+1,___ftadd@f2+1
  7331  0024A0  C0B5  F0A9         	movff	___ftsub@f2+2,___ftadd@f2+2
  7332  0024A4  EC92  F00A         	call	___ftadd	;wreg free
  7333  0024A8  C0A4  F0B0         	movff	?___ftadd,?___ftsub
  7334  0024AC  C0A5  F0B1         	movff	?___ftadd+1,?___ftsub+1
  7335  0024B0  C0A6  F0B2         	movff	?___ftadd+2,?___ftsub+2
  7336  0024B4  0012               	return	
  7337  0024B6                     __end_of___ftsub:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           postinc0	equ	0xFEE
  7347                           wreg	equ	0xFE8
  7348                           indf1	equ	0xFE7
  7349                           postdec1	equ	0xFE5
  7350                           plusw1	equ	0xFE3
  7351                           fsr1h	equ	0xFE2
  7352                           fsr1l	equ	0xFE1
  7353                           indf2	equ	0xFDF
  7354                           postinc2	equ	0xFDE
  7355                           postdec2	equ	0xFDD
  7356                           plusw2	equ	0xFDB
  7357                           fsr2h	equ	0xFDA
  7358                           fsr2l	equ	0xFD9
  7359                           status	equ	0xFD8
  7360                           
  7361 ;; *************** function ___ftadd *****************
  7362 ;; Defined at:
  7363 ;;		line 86 in file "/Applications/microchip/xc8/v1.45/sources/common/ftadd.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  f1              3    7[BANK0 ] float 
  7366 ;;  f2              3   10[BANK0 ] float 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  exp1            1   18[BANK0 ] unsigned char 
  7369 ;;  exp2            1   17[BANK0 ] unsigned char 
  7370 ;;  sign            1   16[BANK0 ] unsigned char 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  3    7[BANK0 ] float 
  7373 ;; Registers used:
  7374 ;;		wreg, status,2, status,0, cstack
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7380 ;;      Params:         0       6       0       0       0       0       0
  7381 ;;      Locals:         0       3       0       0       0       0       0
  7382 ;;      Temps:          0       3       0       0       0       0       0
  7383 ;;      Totals:         0      12       0       0       0       0       0
  7384 ;;Total ram usage:       12 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    3
  7387 ;; This function calls:
  7388 ;;		___ftpack
  7389 ;; This function is called by:
  7390 ;;		_get_pm
  7391 ;;		_sprintf
  7392 ;;		___ftsub
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text28
  7397  001524                     __ptext28:
  7398                           	opt stack 0
  7399  001524                     ___ftadd:
  7400                           	opt stack 24
  7401                           
  7402                           ;incstack = 0
  7403  001524  C0A6  F0AA         	movff	___ftadd@f1+2,??___ftadd
  7404  001528  0100               	movlb	0	; () banked
  7405  00152A  6BAB               	clrf	(??___ftadd+1)& (0+255),b
  7406  00152C  6BAC               	clrf	(??___ftadd+2)& (0+255),b
  7407  00152E  35A5               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7408  001530  37AA               	rlcf	??___ftadd& (0+255),f,b
  7409  001532  E301               	bnc	u4981
  7410  001534  81AB               	bsf	(??___ftadd+1)& (0+255),0,b
  7411  001536                     u4981:
  7412  001536  51AA               	movf	??___ftadd& (0+255),w,b
  7413  001538  6FAF               	movwf	___ftadd@exp1& (0+255),b
  7414  00153A  C0A9  F0AA         	movff	___ftadd@f2+2,??___ftadd
  7415  00153E  6BAB               	clrf	(??___ftadd+1)& (0+255),b
  7416  001540  6BAC               	clrf	(??___ftadd+2)& (0+255),b
  7417  001542  35A8               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7418  001544  37AA               	rlcf	??___ftadd& (0+255),f,b
  7419  001546  E301               	bnc	u4991
  7420  001548  81AB               	bsf	(??___ftadd+1)& (0+255),0,b
  7421  00154A                     u4991:
  7422  00154A  51AA               	movf	??___ftadd& (0+255),w,b
  7423  00154C  6FAE               	movwf	___ftadd@exp2& (0+255),b
  7424                           
  7425                           ; BSR set to: 0
  7426  00154E  51AF               	movf	___ftadd@exp1& (0+255),w,b
  7427  001550  B4D8               	btfsc	status,2,c
  7428  001552  D00B               	goto	u5020
  7429                           
  7430                           ; BSR set to: 0
  7431  001554  51AE               	movf	___ftadd@exp2& (0+255),w,b
  7432  001556  5DAF               	subwf	___ftadd@exp1& (0+255),w,b
  7433  001558  B0D8               	btfsc	status,0,c
  7434  00155A  D00E               	goto	l1132
  7435                           
  7436                           ; BSR set to: 0
  7437  00155C  51AF               	movf	___ftadd@exp1& (0+255),w,b
  7438  00155E  0800               	sublw	0
  7439  001560  25AE               	addwf	___ftadd@exp2& (0+255),w,b
  7440  001562  6FAA               	movwf	??___ftadd& (0+255),b
  7441  001564  0E18               	movlw	24
  7442  001566  65AA               	cpfsgt	??___ftadd& (0+255),b
  7443  001568  D007               	goto	l1132
  7444  00156A                     u5020:
  7445                           
  7446                           ; BSR set to: 0
  7447  00156A  C0A7  F0A4         	movff	___ftadd@f2,?___ftadd
  7448  00156E  C0A8  F0A5         	movff	___ftadd@f2+1,?___ftadd+1
  7449  001572  C0A9  F0A6         	movff	___ftadd@f2+2,?___ftadd+2
  7450  001576  0012               	return	
  7451  001578                     l1132:
  7452                           
  7453                           ; BSR set to: 0
  7454                           
  7455                           ; BSR set to: 0
  7456  001578  51AE               	movf	___ftadd@exp2& (0+255),w,b
  7457  00157A  B4D8               	btfsc	status,2,c
  7458  00157C  D00B               	goto	u5050
  7459                           
  7460                           ; BSR set to: 0
  7461  00157E  51AF               	movf	___ftadd@exp1& (0+255),w,b
  7462  001580  5DAE               	subwf	___ftadd@exp2& (0+255),w,b
  7463  001582  B0D8               	btfsc	status,0,c
  7464  001584  D00E               	goto	l1136
  7465                           
  7466                           ; BSR set to: 0
  7467  001586  51AE               	movf	___ftadd@exp2& (0+255),w,b
  7468  001588  0800               	sublw	0
  7469  00158A  25AF               	addwf	___ftadd@exp1& (0+255),w,b
  7470  00158C  6FAA               	movwf	??___ftadd& (0+255),b
  7471  00158E  0E18               	movlw	24
  7472  001590  65AA               	cpfsgt	??___ftadd& (0+255),b
  7473  001592  D007               	goto	l1136
  7474  001594                     u5050:
  7475                           
  7476                           ; BSR set to: 0
  7477  001594  C0A4  F0A4         	movff	___ftadd@f1,?___ftadd
  7478  001598  C0A5  F0A5         	movff	___ftadd@f1+1,?___ftadd+1
  7479  00159C  C0A6  F0A6         	movff	___ftadd@f1+2,?___ftadd+2
  7480  0015A0  0012               	return	
  7481  0015A2                     l1136:
  7482                           
  7483                           ; BSR set to: 0
  7484                           
  7485                           ; BSR set to: 0
  7486  0015A2  0E06               	movlw	6
  7487  0015A4  6FAD               	movwf	___ftadd@sign& (0+255),b
  7488                           
  7489                           ; BSR set to: 0
  7490  0015A6  BFA6               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  7491                           
  7492                           ; BSR set to: 0
  7493  0015A8  8FAD               	bsf	___ftadd@sign& (0+255),7,b
  7494                           
  7495                           ; BSR set to: 0
  7496                           
  7497                           ; BSR set to: 0
  7498  0015AA  BFA9               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  7499                           
  7500                           ; BSR set to: 0
  7501  0015AC  8DAD               	bsf	___ftadd@sign& (0+255),6,b
  7502                           
  7503                           ; BSR set to: 0
  7504  0015AE  8FA5               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7505                           
  7506                           ; BSR set to: 0
  7507  0015B0  0EFF               	movlw	255
  7508  0015B2  17A4               	andwf	___ftadd@f1& (0+255),f,b
  7509  0015B4  0EFF               	movlw	255
  7510  0015B6  17A5               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7511  0015B8  0E00               	movlw	0
  7512  0015BA  17A6               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7513  0015BC  8FA8               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7514                           
  7515                           ; BSR set to: 0
  7516  0015BE  0EFF               	movlw	255
  7517  0015C0  17A7               	andwf	___ftadd@f2& (0+255),f,b
  7518  0015C2  0EFF               	movlw	255
  7519  0015C4  17A8               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7520  0015C6  0E00               	movlw	0
  7521  0015C8  17A9               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7522                           
  7523                           ; BSR set to: 0
  7524  0015CA  51AE               	movf	___ftadd@exp2& (0+255),w,b
  7525  0015CC  5DAF               	subwf	___ftadd@exp1& (0+255),w,b
  7526  0015CE  B0D8               	btfsc	status,0,c
  7527  0015D0  D01B               	goto	l1141
  7528  0015D2                     u5080:
  7529                           
  7530                           ; BSR set to: 0
  7531                           
  7532                           ; BSR set to: 0
  7533  0015D2  90D8               	bcf	status,0,c
  7534  0015D4  37A7               	rlcf	___ftadd@f2& (0+255),f,b
  7535  0015D6  37A8               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7536  0015D8  37A9               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7537  0015DA  07AE               	decf	___ftadd@exp2& (0+255),f,b
  7538                           
  7539                           ; BSR set to: 0
  7540  0015DC  51AF               	movf	___ftadd@exp1& (0+255),w,b
  7541  0015DE  19AE               	xorwf	___ftadd@exp2& (0+255),w,b
  7542  0015E0  B4D8               	btfsc	status,2,c
  7543  0015E2  D00D               	goto	l1146
  7544                           
  7545                           ; BSR set to: 0
  7546  0015E4  07AD               	decf	___ftadd@sign& (0+255),f,b
  7547  0015E6  C0AD  F0AA         	movff	___ftadd@sign,??___ftadd
  7548  0015EA  0E07               	movlw	7
  7549  0015EC  17AA               	andwf	??___ftadd& (0+255),f,b
  7550  0015EE  B4D8               	btfsc	status,2,c
  7551  0015F0  D006               	goto	l1146
  7552  0015F2  D7EF               	goto	u5080
  7553  0015F4                     
  7554                           ; BSR set to: 0
  7555                           
  7556                           ; BSR set to: 0
  7557  0015F4  90D8               	bcf	status,0,c
  7558  0015F6  33A6               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7559  0015F8  33A5               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7560  0015FA  33A4               	rrcf	___ftadd@f1& (0+255),f,b
  7561  0015FC  2BAF               	incf	___ftadd@exp1& (0+255),f,b
  7562  0015FE                     l1146:
  7563                           
  7564                           ; BSR set to: 0
  7565                           
  7566                           ; BSR set to: 0
  7567  0015FE  51AE               	movf	___ftadd@exp2& (0+255),w,b
  7568  001600  19AF               	xorwf	___ftadd@exp1& (0+255),w,b
  7569  001602  B4D8               	btfsc	status,2,c
  7570  001604  D01F               	goto	u5150
  7571  001606  D7F6               	goto	l1147
  7572  001608                     l1141:
  7573                           
  7574                           ; BSR set to: 0
  7575                           
  7576                           ; BSR set to: 0
  7577  001608  51AF               	movf	___ftadd@exp1& (0+255),w,b
  7578  00160A  5DAE               	subwf	___ftadd@exp2& (0+255),w,b
  7579  00160C  B0D8               	btfsc	status,0,c
  7580  00160E  D01A               	goto	u5150
  7581  001610                     u5120:
  7582                           
  7583                           ; BSR set to: 0
  7584                           
  7585                           ; BSR set to: 0
  7586  001610  90D8               	bcf	status,0,c
  7587  001612  37A4               	rlcf	___ftadd@f1& (0+255),f,b
  7588  001614  37A5               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7589  001616  37A6               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7590  001618  07AF               	decf	___ftadd@exp1& (0+255),f,b
  7591                           
  7592                           ; BSR set to: 0
  7593  00161A  51AF               	movf	___ftadd@exp1& (0+255),w,b
  7594  00161C  19AE               	xorwf	___ftadd@exp2& (0+255),w,b
  7595  00161E  B4D8               	btfsc	status,2,c
  7596  001620  D00D               	goto	l1155
  7597                           
  7598                           ; BSR set to: 0
  7599  001622  07AD               	decf	___ftadd@sign& (0+255),f,b
  7600  001624  C0AD  F0AA         	movff	___ftadd@sign,??___ftadd
  7601  001628  0E07               	movlw	7
  7602  00162A  17AA               	andwf	??___ftadd& (0+255),f,b
  7603  00162C  B4D8               	btfsc	status,2,c
  7604  00162E  D006               	goto	l1155
  7605  001630  D7EF               	goto	u5120
  7606  001632                     
  7607                           ; BSR set to: 0
  7608                           
  7609                           ; BSR set to: 0
  7610  001632  90D8               	bcf	status,0,c
  7611  001634  33A9               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7612  001636  33A8               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7613  001638  33A7               	rrcf	___ftadd@f2& (0+255),f,b
  7614  00163A  2BAE               	incf	___ftadd@exp2& (0+255),f,b
  7615  00163C                     l1155:
  7616                           
  7617                           ; BSR set to: 0
  7618                           
  7619                           ; BSR set to: 0
  7620  00163C  51AE               	movf	___ftadd@exp2& (0+255),w,b
  7621  00163E  19AF               	xorwf	___ftadd@exp1& (0+255),w,b
  7622  001640  A4D8               	btfss	status,2,c
  7623  001642  D7F7               	goto	l1156
  7624  001644                     u5150:
  7625                           
  7626                           ; BSR set to: 0
  7627                           
  7628                           ; BSR set to: 0
  7629                           
  7630                           ; BSR set to: 0
  7631  001644  AFAD               	btfss	___ftadd@sign& (0+255),7,b
  7632  001646  D00C               	goto	l1158
  7633                           
  7634                           ; BSR set to: 0
  7635  001648  0EFF               	movlw	255
  7636  00164A  1BA4               	xorwf	___ftadd@f1& (0+255),f,b
  7637  00164C  0EFF               	movlw	255
  7638  00164E  1BA5               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7639  001650  0EFF               	movlw	255
  7640  001652  1BA6               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7641  001654  0E01               	movlw	1
  7642  001656  27A4               	addwf	___ftadd@f1& (0+255),f,b
  7643  001658  0E00               	movlw	0
  7644  00165A  23A5               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7645  00165C  0E00               	movlw	0
  7646  00165E  23A6               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7647  001660                     l1158:
  7648                           
  7649                           ; BSR set to: 0
  7650  001660  ADAD               	btfss	___ftadd@sign& (0+255),6,b
  7651  001662  D00C               	goto	l1159
  7652                           
  7653                           ; BSR set to: 0
  7654  001664  0EFF               	movlw	255
  7655  001666  1BA7               	xorwf	___ftadd@f2& (0+255),f,b
  7656  001668  0EFF               	movlw	255
  7657  00166A  1BA8               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7658  00166C  0EFF               	movlw	255
  7659  00166E  1BA9               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7660  001670  0E01               	movlw	1
  7661  001672  27A7               	addwf	___ftadd@f2& (0+255),f,b
  7662  001674  0E00               	movlw	0
  7663  001676  23A8               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7664  001678  0E00               	movlw	0
  7665  00167A  23A9               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7666  00167C                     l1159:
  7667                           
  7668                           ; BSR set to: 0
  7669                           
  7670                           ; BSR set to: 0
  7671  00167C  0E00               	movlw	0
  7672  00167E  6FAD               	movwf	___ftadd@sign& (0+255),b
  7673                           
  7674                           ; BSR set to: 0
  7675  001680  51A4               	movf	___ftadd@f1& (0+255),w,b
  7676  001682  27A7               	addwf	___ftadd@f2& (0+255),f,b
  7677  001684  51A5               	movf	(___ftadd@f1+1)& (0+255),w,b
  7678  001686  23A8               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7679  001688  51A6               	movf	(___ftadd@f1+2)& (0+255),w,b
  7680  00168A  23A9               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7681                           
  7682                           ; BSR set to: 0
  7683  00168C  AFA9               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7684  00168E  D00E               	goto	l1160
  7685                           
  7686                           ; BSR set to: 0
  7687  001690  0EFF               	movlw	255
  7688  001692  1BA7               	xorwf	___ftadd@f2& (0+255),f,b
  7689  001694  0EFF               	movlw	255
  7690  001696  1BA8               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7691  001698  0EFF               	movlw	255
  7692  00169A  1BA9               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7693  00169C  0E01               	movlw	1
  7694  00169E  27A7               	addwf	___ftadd@f2& (0+255),f,b
  7695  0016A0  0E00               	movlw	0
  7696  0016A2  23A8               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7697  0016A4  0E00               	movlw	0
  7698  0016A6  23A9               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7699                           
  7700                           ; BSR set to: 0
  7701  0016A8  0E01               	movlw	1
  7702  0016AA  6FAD               	movwf	___ftadd@sign& (0+255),b
  7703  0016AC                     l1160:
  7704                           
  7705                           ; BSR set to: 0
  7706                           
  7707                           ; BSR set to: 0
  7708  0016AC  C0A7  F013         	movff	___ftadd@f2,___ftpack@arg
  7709  0016B0  C0A8  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  7710  0016B4  C0A9  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  7711  0016B8  C0AF  F016         	movff	___ftadd@exp1,___ftpack@exp
  7712  0016BC  C0AD  F017         	movff	___ftadd@sign,___ftpack@sign
  7713  0016C0  EC96  F00E         	call	___ftpack	;wreg free
  7714  0016C4  C013  F0A4         	movff	?___ftpack,?___ftadd
  7715  0016C8  C014  F0A5         	movff	?___ftpack+1,?___ftadd+1
  7716  0016CC  C015  F0A6         	movff	?___ftpack+2,?___ftadd+2
  7717  0016D0  0012               	return	
  7718  0016D2                     __end_of___ftadd:
  7719                           	opt stack 0
  7720                           tblptru	equ	0xFF8
  7721                           tblptrh	equ	0xFF7
  7722                           tblptrl	equ	0xFF6
  7723                           tablat	equ	0xFF5
  7724                           prodh	equ	0xFF4
  7725                           prodl	equ	0xFF3
  7726                           intcon	equ	0xFF2
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           indf1	equ	0xFE7
  7730                           postdec1	equ	0xFE5
  7731                           plusw1	equ	0xFE3
  7732                           fsr1h	equ	0xFE2
  7733                           fsr1l	equ	0xFE1
  7734                           indf2	equ	0xFDF
  7735                           postinc2	equ	0xFDE
  7736                           postdec2	equ	0xFDD
  7737                           plusw2	equ	0xFDB
  7738                           fsr2h	equ	0xFDA
  7739                           fsr2l	equ	0xFD9
  7740                           status	equ	0xFD8
  7741                           
  7742 ;; *************** function ___ftpack *****************
  7743 ;; Defined at:
  7744 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/float.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  arg             3   18[COMRAM] unsigned um
  7747 ;;  exp             1   21[COMRAM] unsigned char 
  7748 ;;  sign            1   22[COMRAM] unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;		None
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  3   18[COMRAM] float 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7760 ;;      Params:         5       0       0       0       0       0       0
  7761 ;;      Locals:         0       0       0       0       0       0       0
  7762 ;;      Temps:          3       0       0       0       0       0       0
  7763 ;;      Totals:         8       0       0       0       0       0       0
  7764 ;;Total ram usage:        8 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    2
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		___ftadd
  7771 ;;		___ftdiv
  7772 ;;		___ftmul
  7773 ;;		___lltoft
  7774 ;;		___lwtoft
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text29
  7779  001D2C                     __ptext29:
  7780                           	opt stack 0
  7781  001D2C                     ___ftpack:
  7782                           	opt stack 24
  7783                           
  7784                           ;incstack = 0
  7785  001D2C  5016               	movf	___ftpack@exp,w,c
  7786  001D2E  B4D8               	btfsc	status,2,c
  7787  001D30  D005               	goto	u4860
  7788  001D32  5013               	movf	___ftpack@arg,w,c
  7789  001D34  1014               	iorwf	___ftpack@arg+1,w,c
  7790  001D36  1015               	iorwf	___ftpack@arg+2,w,c
  7791  001D38  A4D8               	btfss	status,2,c
  7792  001D3A  D00C               	goto	l1101
  7793  001D3C                     u4860:
  7794  001D3C  0E00               	movlw	0
  7795  001D3E  6E13               	movwf	?___ftpack,c
  7796  001D40  0E00               	movlw	0
  7797  001D42  6E14               	movwf	?___ftpack+1,c
  7798  001D44  0E00               	movlw	0
  7799  001D46  6E15               	movwf	?___ftpack+2,c
  7800  001D48  0012               	return	
  7801  001D4A  2A16               	incf	___ftpack@exp,f,c
  7802  001D4C  90D8               	bcf	status,0,c
  7803  001D4E  3215               	rrcf	___ftpack@arg+2,f,c
  7804  001D50  3214               	rrcf	___ftpack@arg+1,f,c
  7805  001D52  3213               	rrcf	___ftpack@arg,f,c
  7806  001D54                     l1101:
  7807  001D54  0E00               	movlw	0
  7808  001D56  1413               	andwf	___ftpack@arg,w,c
  7809  001D58  6E18               	movwf	??___ftpack& (0+255),c
  7810  001D5A  0E00               	movlw	0
  7811  001D5C  1414               	andwf	___ftpack@arg+1,w,c
  7812  001D5E  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7813  001D60  0EFE               	movlw	254
  7814  001D62  1415               	andwf	___ftpack@arg+2,w,c
  7815  001D64  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7816  001D66  5018               	movf	??___ftpack,w,c
  7817  001D68  1019               	iorwf	??___ftpack+1,w,c
  7818  001D6A  101A               	iorwf	??___ftpack+2,w,c
  7819  001D6C  B4D8               	btfsc	status,2,c
  7820  001D6E  D00C               	goto	l1104
  7821  001D70  D7EC               	goto	l1102
  7822  001D72  2A16               	incf	___ftpack@exp,f,c
  7823  001D74  0E01               	movlw	1
  7824  001D76  2613               	addwf	___ftpack@arg,f,c
  7825  001D78  0E00               	movlw	0
  7826  001D7A  2214               	addwfc	___ftpack@arg+1,f,c
  7827  001D7C  0E00               	movlw	0
  7828  001D7E  2215               	addwfc	___ftpack@arg+2,f,c
  7829  001D80  90D8               	bcf	status,0,c
  7830  001D82  3215               	rrcf	___ftpack@arg+2,f,c
  7831  001D84  3214               	rrcf	___ftpack@arg+1,f,c
  7832  001D86  3213               	rrcf	___ftpack@arg,f,c
  7833  001D88                     l1104:
  7834  001D88  0E00               	movlw	0
  7835  001D8A  1413               	andwf	___ftpack@arg,w,c
  7836  001D8C  6E18               	movwf	??___ftpack& (0+255),c
  7837  001D8E  0E00               	movlw	0
  7838  001D90  1414               	andwf	___ftpack@arg+1,w,c
  7839  001D92  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7840  001D94  0EFF               	movlw	255
  7841  001D96  1415               	andwf	___ftpack@arg+2,w,c
  7842  001D98  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7843  001D9A  5018               	movf	??___ftpack,w,c
  7844  001D9C  1019               	iorwf	??___ftpack+1,w,c
  7845  001D9E  101A               	iorwf	??___ftpack+2,w,c
  7846  001DA0  B4D8               	btfsc	status,2,c
  7847  001DA2  D006               	goto	l1107
  7848  001DA4  D7E6               	goto	l1105
  7849  001DA6  0616               	decf	___ftpack@exp,f,c
  7850  001DA8  90D8               	bcf	status,0,c
  7851  001DAA  3613               	rlcf	___ftpack@arg,f,c
  7852  001DAC  3614               	rlcf	___ftpack@arg+1,f,c
  7853  001DAE  3615               	rlcf	___ftpack@arg+2,f,c
  7854  001DB0                     l1107:
  7855  001DB0  BE14               	btfsc	___ftpack@arg+1,7,c
  7856  001DB2  D003               	goto	u4900
  7857  001DB4  0E02               	movlw	2
  7858  001DB6  6016               	cpfslt	___ftpack@exp,c
  7859  001DB8  D7F6               	goto	l1108
  7860  001DBA                     u4900:
  7861  001DBA  A016               	btfss	___ftpack@exp,0,c
  7862  001DBC  9E14               	bcf	___ftpack@arg+1,7,c
  7863  001DBE  90D8               	bcf	status,0,c
  7864  001DC0  3216               	rrcf	___ftpack@exp,f,c
  7865  001DC2  5016               	movf	___ftpack@exp,w,c
  7866  001DC4  1215               	iorwf	___ftpack@arg+2,f,c
  7867  001DC6  5017               	movf	___ftpack@sign,w,c
  7868  001DC8  A4D8               	btfss	status,2,c
  7869  001DCA  8E15               	bsf	___ftpack@arg+2,7,c
  7870  001DCC  C013  F013         	movff	___ftpack@arg,?___ftpack
  7871  001DD0  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  7872  001DD4  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  7873  001DD8  0012               	return	
  7874  001DDA                     __end_of___ftpack:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           prodh	equ	0xFF4
  7881                           prodl	equ	0xFF3
  7882                           intcon	equ	0xFF2
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           indf1	equ	0xFE7
  7886                           postdec1	equ	0xFE5
  7887                           plusw1	equ	0xFE3
  7888                           fsr1h	equ	0xFE2
  7889                           fsr1l	equ	0xFE1
  7890                           indf2	equ	0xFDF
  7891                           postinc2	equ	0xFDE
  7892                           postdec2	equ	0xFDD
  7893                           plusw2	equ	0xFDB
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function ___ftneg *****************
  7899 ;; Defined at:
  7900 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/ftneg.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  f1              3   18[COMRAM] float 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  3   18[COMRAM] float 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         3       0       0       0       0       0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0
  7917 ;;      Totals:         3       0       0       0       0       0       0
  7918 ;;Total ram usage:        3 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    2
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		_sprintf
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text30
  7929  00280A                     __ptext30:
  7930                           	opt stack 0
  7931  00280A                     ___ftneg:
  7932                           	opt stack 26
  7933                           
  7934                           ;incstack = 0
  7935  00280A  5013               	movf	___ftneg@f1,w,c
  7936  00280C  1014               	iorwf	___ftneg@f1+1,w,c
  7937  00280E  1015               	iorwf	___ftneg@f1+2,w,c
  7938  002810  B4D8               	btfsc	status,2,c
  7939  002812  D006               	goto	l1208
  7940  002814  0E00               	movlw	0
  7941  002816  1A13               	xorwf	___ftneg@f1,f,c
  7942  002818  0E00               	movlw	0
  7943  00281A  1A14               	xorwf	___ftneg@f1+1,f,c
  7944  00281C  0E80               	movlw	128
  7945  00281E  1A15               	xorwf	___ftneg@f1+2,f,c
  7946  002820                     l1208:
  7947  002820  C013  F013         	movff	___ftneg@f1,?___ftneg
  7948  002824  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  7949  002828  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  7950  00282C  0012               	return		;funcret
  7951  00282E                     __end_of___ftneg:
  7952                           	opt stack 0
  7953                           tblptru	equ	0xFF8
  7954                           tblptrh	equ	0xFF7
  7955                           tblptrl	equ	0xFF6
  7956                           tablat	equ	0xFF5
  7957                           prodh	equ	0xFF4
  7958                           prodl	equ	0xFF3
  7959                           intcon	equ	0xFF2
  7960                           postinc0	equ	0xFEE
  7961                           wreg	equ	0xFE8
  7962                           indf1	equ	0xFE7
  7963                           postdec1	equ	0xFE5
  7964                           plusw1	equ	0xFE3
  7965                           fsr1h	equ	0xFE2
  7966                           fsr1l	equ	0xFE1
  7967                           indf2	equ	0xFDF
  7968                           postinc2	equ	0xFDE
  7969                           postdec2	equ	0xFDD
  7970                           plusw2	equ	0xFDB
  7971                           fsr2h	equ	0xFDA
  7972                           fsr2l	equ	0xFD9
  7973                           status	equ	0xFD8
  7974                           
  7975 ;; *************** function ___ftge *****************
  7976 ;; Defined at:
  7977 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/ftge.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  ff1             3   18[COMRAM] float 
  7980 ;;  ff2             3   21[COMRAM] float 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		wreg, status,2, status,0
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7992 ;;      Params:         6       0       0       0       0       0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0
  7994 ;;      Temps:          3       0       0       0       0       0       0
  7995 ;;      Totals:         9       0       0       0       0       0       0
  7996 ;;Total ram usage:        9 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    2
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_sprintf
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text31
  8007  001F0A                     __ptext31:
  8008                           	opt stack 0
  8009  001F0A                     ___ftge:
  8010                           	opt stack 26
  8011                           
  8012                           ;incstack = 0
  8013  001F0A  AE15               	btfss	___ftge@ff1+2,7,c
  8014  001F0C  D016               	goto	l1190
  8015  001F0E  C013  F019         	movff	___ftge@ff1,??___ftge
  8016  001F12  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  8017  001F16  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  8018  001F1A  1E19               	comf	??___ftge,f,c
  8019  001F1C  1E1A               	comf	??___ftge+1,f,c
  8020  001F1E  1E1B               	comf	??___ftge+2,f,c
  8021  001F20  2A19               	incf	??___ftge,f,c
  8022  001F22  0E00               	movlw	0
  8023  001F24  221A               	addwfc	??___ftge+1,f,c
  8024  001F26  221B               	addwfc	??___ftge+2,f,c
  8025  001F28  0E00               	movlw	0
  8026  001F2A  2419               	addwf	??___ftge,w,c
  8027  001F2C  6E13               	movwf	___ftge@ff1,c
  8028  001F2E  0E00               	movlw	0
  8029  001F30  201A               	addwfc	??___ftge+1,w,c
  8030  001F32  6E14               	movwf	___ftge@ff1+1,c
  8031  001F34  0E80               	movlw	128
  8032  001F36  201B               	addwfc	??___ftge+2,w,c
  8033  001F38  6E15               	movwf	___ftge@ff1+2,c
  8034  001F3A                     l1190:
  8035  001F3A  AE18               	btfss	___ftge@ff2+2,7,c
  8036  001F3C  D016               	goto	l1191
  8037  001F3E  C016  F019         	movff	___ftge@ff2,??___ftge
  8038  001F42  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  8039  001F46  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  8040  001F4A  1E19               	comf	??___ftge,f,c
  8041  001F4C  1E1A               	comf	??___ftge+1,f,c
  8042  001F4E  1E1B               	comf	??___ftge+2,f,c
  8043  001F50  2A19               	incf	??___ftge,f,c
  8044  001F52  0E00               	movlw	0
  8045  001F54  221A               	addwfc	??___ftge+1,f,c
  8046  001F56  221B               	addwfc	??___ftge+2,f,c
  8047  001F58  0E00               	movlw	0
  8048  001F5A  2419               	addwf	??___ftge,w,c
  8049  001F5C  6E16               	movwf	___ftge@ff2,c
  8050  001F5E  0E00               	movlw	0
  8051  001F60  201A               	addwfc	??___ftge+1,w,c
  8052  001F62  6E17               	movwf	___ftge@ff2+1,c
  8053  001F64  0E80               	movlw	128
  8054  001F66  201B               	addwfc	??___ftge+2,w,c
  8055  001F68  6E18               	movwf	___ftge@ff2+2,c
  8056  001F6A                     l1191:
  8057  001F6A  0E00               	movlw	0
  8058  001F6C  1A13               	xorwf	___ftge@ff1,f,c
  8059  001F6E  0E00               	movlw	0
  8060  001F70  1A14               	xorwf	___ftge@ff1+1,f,c
  8061  001F72  0E80               	movlw	128
  8062  001F74  1A15               	xorwf	___ftge@ff1+2,f,c
  8063  001F76  0E00               	movlw	0
  8064  001F78  1A16               	xorwf	___ftge@ff2,f,c
  8065  001F7A  0E00               	movlw	0
  8066  001F7C  1A17               	xorwf	___ftge@ff2+1,f,c
  8067  001F7E  0E80               	movlw	128
  8068  001F80  1A18               	xorwf	___ftge@ff2+2,f,c
  8069  001F82  5016               	movf	___ftge@ff2,w,c
  8070  001F84  5C13               	subwf	___ftge@ff1,w,c
  8071  001F86  5017               	movf	___ftge@ff2+1,w,c
  8072  001F88  5814               	subwfb	___ftge@ff1+1,w,c
  8073  001F8A  5018               	movf	___ftge@ff2+2,w,c
  8074  001F8C  5815               	subwfb	___ftge@ff1+2,w,c
  8075  001F8E  B0D8               	btfsc	status,0,c
  8076  001F90  D002               	goto	l5258
  8077  001F92  90D8               	bcf	status,0,c
  8078  001F94  0012               	return	
  8079  001F96                     l5258:
  8080  001F96  80D8               	bsf	status,0,c
  8081  001F98  0012               	return	
  8082  001F9A                     __end_of___ftge:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodh	equ	0xFF4
  8089                           prodl	equ	0xFF3
  8090                           intcon	equ	0xFF2
  8091                           postinc0	equ	0xFEE
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           postdec1	equ	0xFE5
  8095                           plusw1	equ	0xFE3
  8096                           fsr1h	equ	0xFE2
  8097                           fsr1l	equ	0xFE1
  8098                           indf2	equ	0xFDF
  8099                           postinc2	equ	0xFDE
  8100                           postdec2	equ	0xFDD
  8101                           plusw2	equ	0xFDB
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _esp8266_ip *****************
  8107 ;; Defined at:
  8108 ;;		line 146 in file "mcc_generated_files/esp8266.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  store_in        2   27[COMRAM] PTR unsigned char 
  8111 ;;		 -> main@ip(4), 
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  i               1   29[COMRAM] unsigned char 
  8114 ;;  received        1   30[COMRAM] unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8124 ;;      Params:         2       0       0       0       0       0       0
  8125 ;;      Locals:         2       0       0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0
  8127 ;;      Totals:         4       0       0       0       0       0       0
  8128 ;;Total ram usage:        4 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    4
  8131 ;; This function calls:
  8132 ;;		_EUSART1_Read
  8133 ;;		__esp8266_print
  8134 ;;		__esp8266_waitFor
  8135 ;; This function is called by:
  8136 ;;		_main
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text32
  8141  001E76                     __ptext32:
  8142                           	opt stack 0
  8143  001E76                     _esp8266_ip:
  8144                           	opt stack 26
  8145                           
  8146                           ;esp8266.c: 147: _esp8266_print("AT+CIFSR\r\n");
  8147                           
  8148                           ;incstack = 0
  8149  001E76  0E58               	movlw	low STR_13
  8150  001E78  6E14               	movwf	__esp8266_print@ptr,c
  8151  001E7A  0E7F               	movlw	high STR_13
  8152  001E7C  6E15               	movwf	__esp8266_print@ptr+1,c
  8153  001E7E  EC60  F011         	call	__esp8266_print	;wreg free
  8154  001E82                     
  8155                           ;esp8266.c: 150: received = EUSART1_Read();
  8156  001E82  ECF0  F012         	call	_EUSART1_Read	;wreg free
  8157  001E86  6E1F               	movwf	esp8266_ip@received,c
  8158                           
  8159                           ;esp8266.c: 151: } while (received < '0' || received > '9');
  8160  001E88  0E2F               	movlw	47
  8161  001E8A  641F               	cpfsgt	esp8266_ip@received,c
  8162  001E8C  D7FA               	goto	l366
  8163  001E8E  0E3A               	movlw	58
  8164  001E90  601F               	cpfslt	esp8266_ip@received,c
  8165  001E92  D7F7               	goto	l366
  8166                           
  8167                           ;esp8266.c: 152: for (unsigned char i = 0; i < 4; i++) {
  8168  001E94  0E00               	movlw	0
  8169  001E96  6E1E               	movwf	esp8266_ip@i,c
  8170  001E98                     l6252:
  8171  001E98  0E03               	movlw	3
  8172  001E9A  641E               	cpfsgt	esp8266_ip@i,c
  8173  001E9C  D001               	goto	l368
  8174  001E9E  D02E               	goto	u6400
  8175  001EA0                     l368:
  8176                           
  8177                           ;esp8266.c: 153: store_in[i] = 0;
  8178  001EA0  501E               	movf	esp8266_ip@i,w,c
  8179  001EA2  0D01               	mullw	1
  8180  001EA4  50F3               	movf	prodl,w,c
  8181  001EA6  241C               	addwf	esp8266_ip@store_in,w,c
  8182  001EA8  6ED9               	movwf	fsr2l,c
  8183  001EAA  50F4               	movf	prodh,w,c
  8184  001EAC  201D               	addwfc	esp8266_ip@store_in+1,w,c
  8185  001EAE  6EDA               	movwf	fsr2h,c
  8186  001EB0  0E00               	movlw	0
  8187  001EB2  6EDF               	movwf	indf2,c
  8188  001EB4                     
  8189                           ;esp8266.c: 155: store_in[i] = 10 * store_in[i] + received - '0';
  8190  001EB4  501E               	movf	esp8266_ip@i,w,c
  8191  001EB6  0D01               	mullw	1
  8192  001EB8  50F3               	movf	prodl,w,c
  8193  001EBA  241C               	addwf	esp8266_ip@store_in,w,c
  8194  001EBC  6ED9               	movwf	fsr2l,c
  8195  001EBE  50F4               	movf	prodh,w,c
  8196  001EC0  201D               	addwfc	esp8266_ip@store_in+1,w,c
  8197  001EC2  6EDA               	movwf	fsr2h,c
  8198  001EC4  501E               	movf	esp8266_ip@i,w,c
  8199  001EC6  0D01               	mullw	1
  8200  001EC8  50F3               	movf	prodl,w,c
  8201  001ECA  241C               	addwf	esp8266_ip@store_in,w,c
  8202  001ECC  6EE1               	movwf	fsr1l,c
  8203  001ECE  50F4               	movf	prodh,w,c
  8204  001ED0  201D               	addwfc	esp8266_ip@store_in+1,w,c
  8205  001ED2  6EE2               	movwf	fsr1h,c
  8206  001ED4  50E7               	movf	indf1,w,c
  8207  001ED6  0D0A               	mullw	10
  8208  001ED8  50F3               	movf	prodl,w,c
  8209  001EDA  241F               	addwf	esp8266_ip@received,w,c
  8210  001EDC  0FD0               	addlw	208
  8211  001EDE  6EDF               	movwf	indf2,c
  8212                           
  8213                           ;esp8266.c: 156: received = EUSART1_Read();
  8214  001EE0  ECF0  F012         	call	_EUSART1_Read	;wreg free
  8215  001EE4  6E1F               	movwf	esp8266_ip@received,c
  8216                           
  8217                           ;esp8266.c: 157: } while (received >= '0' && received <= '9');
  8218  001EE6  0E2F               	movlw	47
  8219  001EE8  641F               	cpfsgt	esp8266_ip@received,c
  8220  001EEA  D003               	goto	u6390
  8221  001EEC  0E39               	movlw	57
  8222  001EEE  641F               	cpfsgt	esp8266_ip@received,c
  8223  001EF0  D7E1               	goto	l370
  8224  001EF2                     u6390:
  8225                           
  8226                           ;esp8266.c: 158: received = EUSART1_Read();
  8227  001EF2  ECF0  F012         	call	_EUSART1_Read	;wreg free
  8228  001EF6  6E1F               	movwf	esp8266_ip@received,c
  8229  001EF8  2A1E               	incf	esp8266_ip@i,f,c
  8230  001EFA  D7CE               	goto	l6252
  8231  001EFC                     u6400:
  8232                           
  8233                           ;esp8266.c: 159: }
  8234                           ;esp8266.c: 160: _esp8266_waitFor("OK");
  8235  001EFC  0EF5               	movlw	low STR_5
  8236  001EFE  6E14               	movwf	__esp8266_waitFor@string,c
  8237  001F00  0E7F               	movlw	high STR_5
  8238  001F02  6E15               	movwf	__esp8266_waitFor@string+1,c
  8239  001F04  ECED  F00E         	call	__esp8266_waitFor	;wreg free
  8240  001F08  0012               	return		;funcret
  8241  001F0A                     __end_of_esp8266_ip:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           postinc0	equ	0xFEE
  8251                           wreg	equ	0xFE8
  8252                           indf1	equ	0xFE7
  8253                           postdec1	equ	0xFE5
  8254                           plusw1	equ	0xFE3
  8255                           fsr1h	equ	0xFE2
  8256                           fsr1l	equ	0xFE1
  8257                           indf2	equ	0xFDF
  8258                           postinc2	equ	0xFDE
  8259                           postdec2	equ	0xFDD
  8260                           plusw2	equ	0xFDB
  8261                           fsr2h	equ	0xFDA
  8262                           fsr2l	equ	0xFD9
  8263                           status	equ	0xFD8
  8264                           
  8265 ;; *************** function __esp8266_waitFor *****************
  8266 ;; Defined at:
  8267 ;;		line 287 in file "mcc_generated_files/esp8266.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  string          2   19[COMRAM] PTR unsigned char 
  8270 ;;		 -> main@wait(8), STR_27(3), STR_26(5), STR_25(6), 
  8271 ;;		 -> STR_14(3), STR_12(3), STR_5(3), 
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;  counter         2   24[COMRAM] unsigned int 
  8274 ;;  so_far          1   26[COMRAM] unsigned char 
  8275 ;;  received        1   23[COMRAM] unsigned char 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  2   19[COMRAM] unsigned int 
  8278 ;; Registers used:
  8279 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8285 ;;      Params:         2       0       0       0       0       0       0
  8286 ;;      Locals:         4       0       0       0       0       0       0
  8287 ;;      Temps:          2       0       0       0       0       0       0
  8288 ;;      Totals:         8       0       0       0       0       0       0
  8289 ;;Total ram usage:        8 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    3
  8292 ;; This function calls:
  8293 ;;		_EUSART1_Read
  8294 ;; This function is called by:
  8295 ;;		_esp8266_ip
  8296 ;;		_main
  8297 ;;		_esp8266_echoCmds
  8298 ;;		_esp8266_disconnect
  8299 ;;		_esp8266_receive
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text33
  8304  001DDA                     __ptext33:
  8305                           	opt stack 0
  8306  001DDA                     __esp8266_waitFor:
  8307                           	opt stack 26
  8308                           
  8309                           ;esp8266.c: 288: unsigned char so_far = 0;
  8310                           
  8311                           ;incstack = 0
  8312  001DDA  0E00               	movlw	0
  8313  001DDC  6E1B               	movwf	__esp8266_waitFor@so_far,c
  8314                           
  8315                           ;esp8266.c: 289: unsigned char received;
  8316                           ;esp8266.c: 290: uint16_t counter = 0;
  8317  001DDE  0E00               	movlw	0
  8318  001DE0  6E1A               	movwf	__esp8266_waitFor@counter+1,c
  8319  001DE2  0E00               	movlw	0
  8320  001DE4  6E19               	movwf	__esp8266_waitFor@counter,c
  8321  001DE6                     
  8322                           ;esp8266.c: 292: received = EUSART1_Read();
  8323  001DE6  ECF0  F012         	call	_EUSART1_Read	;wreg free
  8324  001DEA  6E18               	movwf	__esp8266_waitFor@received,c
  8325                           
  8326                           ;esp8266.c: 293: counter++;
  8327  001DEC  4A19               	infsnz	__esp8266_waitFor@counter,f,c
  8328  001DEE  2A1A               	incf	__esp8266_waitFor@counter+1,f,c
  8329                           
  8330                           ;esp8266.c: 294: if (received == string[so_far]) {
  8331  001DF0  501B               	movf	__esp8266_waitFor@so_far,w,c
  8332  001DF2  0D01               	mullw	1
  8333  001DF4  C014  F016         	movff	__esp8266_waitFor@string,??__esp8266_waitFor
  8334  001DF8  C015  F017         	movff	__esp8266_waitFor@string+1,??__esp8266_waitFor+1
  8335  001DFC  50F3               	movf	prodl,w,c
  8336  001DFE  2616               	addwf	??__esp8266_waitFor,f,c
  8337  001E00  50F4               	movf	prodh,w,c
  8338  001E02  2217               	addwfc	??__esp8266_waitFor+1,f,c
  8339  001E04  C016  FFF6         	movff	??__esp8266_waitFor,tblptrl
  8340  001E08  C017  FFF7         	movff	??__esp8266_waitFor+1,tblptrh
  8341  001E0C  6AF8               	clrf	tblptru,c
  8342  001E0E  0E05               	movlw	(high __ramtop+-1)
  8343  001E10  64F7               	cpfsgt	tblptrh,c
  8344  001E12  D003               	bra	u5947
  8345  001E14  0008               	tblrd		*
  8346  001E16  50F5               	movf	tablat,w,c
  8347  001E18  D005               	bra	u5940
  8348  001E1A                     u5947:
  8349  001E1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8350  001E1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8351  001E22  50EF               	movf	indf0,w,c
  8352  001E24                     u5940:
  8353  001E24  1818               	xorwf	__esp8266_waitFor@received,w,c
  8354  001E26  A4D8               	btfss	status,2,c
  8355  001E28  D002               	goto	l417
  8356                           
  8357                           ;esp8266.c: 295: so_far++;
  8358  001E2A  2A1B               	incf	__esp8266_waitFor@so_far,f,c
  8359                           
  8360                           ;esp8266.c: 296: } else {
  8361  001E2C  D002               	goto	l418
  8362  001E2E                     l417:
  8363                           
  8364                           ;esp8266.c: 297: so_far = 0;
  8365  001E2E  0E00               	movlw	0
  8366  001E30  6E1B               	movwf	__esp8266_waitFor@so_far,c
  8367  001E32                     l418:
  8368                           
  8369                           ;esp8266.c: 298: }
  8370                           ;esp8266.c: 299: } while (string[so_far] != 0);
  8371  001E32  501B               	movf	__esp8266_waitFor@so_far,w,c
  8372  001E34  0D01               	mullw	1
  8373  001E36  C014  F016         	movff	__esp8266_waitFor@string,??__esp8266_waitFor
  8374  001E3A  C015  F017         	movff	__esp8266_waitFor@string+1,??__esp8266_waitFor+1
  8375  001E3E  50F3               	movf	prodl,w,c
  8376  001E40  2616               	addwf	??__esp8266_waitFor,f,c
  8377  001E42  50F4               	movf	prodh,w,c
  8378  001E44  2217               	addwfc	??__esp8266_waitFor+1,f,c
  8379  001E46  C016  FFF6         	movff	??__esp8266_waitFor,tblptrl
  8380  001E4A  C017  FFF7         	movff	??__esp8266_waitFor+1,tblptrh
  8381  001E4E  6AF8               	clrf	tblptru,c
  8382  001E50  0E05               	movlw	(high __ramtop+-1)
  8383  001E52  64F7               	cpfsgt	tblptrh,c
  8384  001E54  D003               	bra	u5967
  8385  001E56  0008               	tblrd		*
  8386  001E58  50F5               	movf	tablat,w,c
  8387  001E5A  D005               	bra	u5960
  8388  001E5C                     u5967:
  8389  001E5C  CFF6 FFE9          	movff	tblptrl,fsr0l
  8390  001E60  CFF7 FFEA          	movff	tblptrh,fsr0h
  8391  001E64  50EF               	movf	indf0,w,c
  8392  001E66                     u5960:
  8393  001E66  0900               	iorlw	0
  8394  001E68  A4D8               	btfss	status,2,c
  8395  001E6A  D7BD               	goto	l416
  8396                           
  8397                           ;esp8266.c: 300: return counter;
  8398  001E6C  C019  F014         	movff	__esp8266_waitFor@counter,?__esp8266_waitFor
  8399  001E70  C01A  F015         	movff	__esp8266_waitFor@counter+1,?__esp8266_waitFor+1
  8400  001E74  0012               	return		;funcret
  8401  001E76                     __end_of__esp8266_waitFor:
  8402                           	opt stack 0
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           indf0	equ	0xFEF
  8411                           postinc0	equ	0xFEE
  8412                           fsr0h	equ	0xFEA
  8413                           fsr0l	equ	0xFE9
  8414                           wreg	equ	0xFE8
  8415                           indf1	equ	0xFE7
  8416                           postdec1	equ	0xFE5
  8417                           plusw1	equ	0xFE3
  8418                           fsr1h	equ	0xFE2
  8419                           fsr1l	equ	0xFE1
  8420                           indf2	equ	0xFDF
  8421                           postinc2	equ	0xFDE
  8422                           postdec2	equ	0xFDD
  8423                           plusw2	equ	0xFDB
  8424                           fsr2h	equ	0xFDA
  8425                           fsr2l	equ	0xFD9
  8426                           status	equ	0xFD8
  8427                           
  8428 ;; *************** function _SYSTEM_Initialize *****************
  8429 ;; Defined at:
  8430 ;;		line 50 in file "mcc_generated_files/mcc.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;		None
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;		None
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  1    wreg      void 
  8437 ;; Registers used:
  8438 ;;		wreg, status,2, status,0, cstack
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8444 ;;      Params:         0       0       0       0       0       0       0
  8445 ;;      Locals:         0       0       0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0
  8447 ;;      Totals:         0       0       0       0       0       0       0
  8448 ;;Total ram usage:        0 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    4
  8451 ;; This function calls:
  8452 ;;		_ADC_Initialize
  8453 ;;		_CCP5_Initialize
  8454 ;;		_EUSART1_Initialize
  8455 ;;		_EUSART2_Initialize
  8456 ;;		_INTERRUPT_Initialize
  8457 ;;		_OSCILLATOR_Initialize
  8458 ;;		_PIN_MANAGER_Initialize
  8459 ;;		_TMR0_Initialize
  8460 ;; This function is called by:
  8461 ;;		_main
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	text34
  8466  00282E                     __ptext34:
  8467                           	opt stack 0
  8468  00282E                     _SYSTEM_Initialize:
  8469                           	opt stack 26
  8470                           
  8471                           ;mcc.c: 53: INTERRUPT_Initialize();
  8472                           
  8473                           ;incstack = 0
  8474  00282E  EC9C  F014         	call	_INTERRUPT_Initialize	;wreg free
  8475                           
  8476                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  8477  002832  EC0A  F013         	call	_PIN_MANAGER_Initialize	;wreg free
  8478                           
  8479                           ;mcc.c: 55: OSCILLATOR_Initialize();
  8480  002836  EC5A  F014         	call	_OSCILLATOR_Initialize	;wreg free
  8481                           
  8482                           ;mcc.c: 56: ADC_Initialize();
  8483  00283A  EC45  F014         	call	_ADC_Initialize	;wreg free
  8484                           
  8485                           ;mcc.c: 57: CCP5_Initialize();
  8486  00283E  EC6C  F014         	call	_CCP5_Initialize	;wreg free
  8487                           
  8488                           ;mcc.c: 58: TMR0_Initialize();
  8489  002842  EC28  F014         	call	_TMR0_Initialize	;wreg free
  8490                           
  8491                           ;mcc.c: 59: EUSART1_Initialize();
  8492  002846  ECAF  F011         	call	_EUSART1_Initialize	;wreg free
  8493                           
  8494                           ;mcc.c: 60: EUSART2_Initialize();
  8495  00284A  EC89  F011         	call	_EUSART2_Initialize	;wreg free
  8496  00284E  0012               	return		;funcret
  8497  002850                     __end_of_SYSTEM_Initialize:
  8498                           	opt stack 0
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           indf0	equ	0xFEF
  8507                           postinc0	equ	0xFEE
  8508                           fsr0h	equ	0xFEA
  8509                           fsr0l	equ	0xFE9
  8510                           wreg	equ	0xFE8
  8511                           indf1	equ	0xFE7
  8512                           postdec1	equ	0xFE5
  8513                           plusw1	equ	0xFE3
  8514                           fsr1h	equ	0xFE2
  8515                           fsr1l	equ	0xFE1
  8516                           indf2	equ	0xFDF
  8517                           postinc2	equ	0xFDE
  8518                           postdec2	equ	0xFDD
  8519                           plusw2	equ	0xFDB
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function _TMR0_Initialize *****************
  8525 ;; Defined at:
  8526 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;		None
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;		None
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  1    wreg      void 
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8540 ;;      Params:         0       0       0       0       0       0       0
  8541 ;;      Locals:         0       0       0       0       0       0       0
  8542 ;;      Temps:          0       0       0       0       0       0       0
  8543 ;;      Totals:         0       0       0       0       0       0       0
  8544 ;;Total ram usage:        0 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    3
  8547 ;; This function calls:
  8548 ;;		_TMR0_SetInterruptHandler
  8549 ;; This function is called by:
  8550 ;;		_SYSTEM_Initialize
  8551 ;;		_main
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text35
  8556  002850                     __ptext35:
  8557                           	opt stack 0
  8558  002850                     _TMR0_Initialize:
  8559                           	opt stack 27
  8560                           
  8561                           ;tmr0.c: 72: TMR0H = 0x00;
  8562                           
  8563                           ;incstack = 0
  8564  002850  0E00               	movlw	0
  8565  002852  6ED7               	movwf	4055,c	;volatile
  8566                           
  8567                           ;tmr0.c: 75: TMR0L = 0xB0;
  8568  002854  0EB0               	movlw	176
  8569  002856  6ED6               	movwf	4054,c	;volatile
  8570                           
  8571                           ;tmr0.c: 79: timer0ReloadVal = 176;
  8572  002858  0EB0               	movlw	176
  8573  00285A  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8574                           
  8575                           ;tmr0.c: 82: INTCONbits.TMR0IF = 0;
  8576  00285C  94F2               	bcf	intcon,2,c	;volatile
  8577                           
  8578                           ;tmr0.c: 85: INTCONbits.TMR0IE = 1;
  8579  00285E  8AF2               	bsf	intcon,5,c	;volatile
  8580                           
  8581                           ;tmr0.c: 88: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8582  002860  0E00               	movlw	0
  8583  002862  6E13               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8584  002864  0E00               	movlw	0
  8585  002866  6E14               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8586  002868  EC81  F014         	call	_TMR0_SetInterruptHandler	;wreg free
  8587                           
  8588                           ;tmr0.c: 91: T0CON = 0xD1;
  8589  00286C  0ED1               	movlw	209
  8590  00286E  6ED5               	movwf	4053,c	;volatile
  8591  002870  0012               	return		;funcret
  8592  002872                     __end_of_TMR0_Initialize:
  8593                           	opt stack 0
  8594                           tblptru	equ	0xFF8
  8595                           tblptrh	equ	0xFF7
  8596                           tblptrl	equ	0xFF6
  8597                           tablat	equ	0xFF5
  8598                           prodh	equ	0xFF4
  8599                           prodl	equ	0xFF3
  8600                           intcon	equ	0xFF2
  8601                           indf0	equ	0xFEF
  8602                           postinc0	equ	0xFEE
  8603                           fsr0h	equ	0xFEA
  8604                           fsr0l	equ	0xFE9
  8605                           wreg	equ	0xFE8
  8606                           indf1	equ	0xFE7
  8607                           postdec1	equ	0xFE5
  8608                           plusw1	equ	0xFE3
  8609                           fsr1h	equ	0xFE2
  8610                           fsr1l	equ	0xFE1
  8611                           indf2	equ	0xFDF
  8612                           postinc2	equ	0xFDE
  8613                           postdec2	equ	0xFDD
  8614                           plusw2	equ	0xFDB
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           
  8619 ;; *************** function _TMR0_SetInterruptHandler *****************
  8620 ;; Defined at:
  8621 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  InterruptHan    2   18[COMRAM] PTR FTN()void 
  8624 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;		None
  8627 ;; Return value:  Size  Location     Type
  8628 ;;                  1    wreg      void 
  8629 ;; Registers used:
  8630 ;;		wreg, status,2, status,0
  8631 ;; Tracked objects:
  8632 ;;		On entry : 0/0
  8633 ;;		On exit  : 0/0
  8634 ;;		Unchanged: 0/0
  8635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8636 ;;      Params:         2       0       0       0       0       0       0
  8637 ;;      Locals:         0       0       0       0       0       0       0
  8638 ;;      Temps:          0       0       0       0       0       0       0
  8639 ;;      Totals:         2       0       0       0       0       0       0
  8640 ;;Total ram usage:        2 bytes
  8641 ;; Hardware stack levels used:    1
  8642 ;; Hardware stack levels required when called:    2
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_TMR0_Initialize
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           	psect	text36
  8651  002902                     __ptext36:
  8652                           	opt stack 0
  8653  002902                     _TMR0_SetInterruptHandler:
  8654                           	opt stack 27
  8655                           
  8656                           ;tmr0.c: 157: TMR0_InterruptHandler = InterruptHandler;
  8657                           
  8658                           ;incstack = 0
  8659  002902  C013  F03A         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8660  002906  C014  F03B         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8661  00290A  0012               	return		;funcret
  8662  00290C                     __end_of_TMR0_SetInterruptHandler:
  8663                           	opt stack 0
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           indf0	equ	0xFEF
  8672                           postinc0	equ	0xFEE
  8673                           fsr0h	equ	0xFEA
  8674                           fsr0l	equ	0xFE9
  8675                           wreg	equ	0xFE8
  8676                           indf1	equ	0xFE7
  8677                           postdec1	equ	0xFE5
  8678                           plusw1	equ	0xFE3
  8679                           fsr1h	equ	0xFE2
  8680                           fsr1l	equ	0xFE1
  8681                           indf2	equ	0xFDF
  8682                           postinc2	equ	0xFDE
  8683                           postdec2	equ	0xFDD
  8684                           plusw2	equ	0xFDB
  8685                           fsr2h	equ	0xFDA
  8686                           fsr2l	equ	0xFD9
  8687                           status	equ	0xFD8
  8688                           
  8689 ;; *************** function _PIN_MANAGER_Initialize *****************
  8690 ;; Defined at:
  8691 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;		None
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, status,2
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8705 ;;      Params:         0       0       0       0       0       0       0
  8706 ;;      Locals:         0       0       0       0       0       0       0
  8707 ;;      Temps:          0       0       0       0       0       0       0
  8708 ;;      Totals:         0       0       0       0       0       0       0
  8709 ;;Total ram usage:        0 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    2
  8712 ;; This function calls:
  8713 ;;		Nothing
  8714 ;; This function is called by:
  8715 ;;		_SYSTEM_Initialize
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           	psect	text37
  8720  002614                     __ptext37:
  8721                           	opt stack 0
  8722  002614                     _PIN_MANAGER_Initialize:
  8723                           	opt stack 27
  8724                           
  8725                           ;pin_manager.c: 62: LATA = 0x20;
  8726                           
  8727                           ;incstack = 0
  8728  002614  0E20               	movlw	32
  8729  002616  6E89               	movwf	3977,c	;volatile
  8730                           
  8731                           ;pin_manager.c: 63: LATB = 0x38;
  8732  002618  0E38               	movlw	56
  8733  00261A  6E8A               	movwf	3978,c	;volatile
  8734                           
  8735                           ;pin_manager.c: 64: LATC = 0x08;
  8736  00261C  0E08               	movlw	8
  8737  00261E  6E8B               	movwf	3979,c	;volatile
  8738                           
  8739                           ;pin_manager.c: 69: TRISA = 0xDF;
  8740  002620  0EDF               	movlw	223
  8741  002622  6E92               	movwf	3986,c	;volatile
  8742                           
  8743                           ;pin_manager.c: 70: TRISB = 0xBF;
  8744  002624  0EBF               	movlw	191
  8745  002626  6E93               	movwf	3987,c	;volatile
  8746                           
  8747                           ;pin_manager.c: 71: TRISC = 0xB7;
  8748  002628  0EB7               	movlw	183
  8749  00262A  6E94               	movwf	3988,c	;volatile
  8750                           
  8751                           ;pin_manager.c: 76: ANSELC = 0x34;
  8752  00262C  0E34               	movlw	52
  8753  00262E  010F               	movlb	15	; () banked
  8754  002630  6F3A               	movwf	58,b	;volatile
  8755                           
  8756                           ;pin_manager.c: 77: ANSELB = 0x3F;
  8757  002632  0E3F               	movlw	63
  8758  002634  6F39               	movwf	57,b	;volatile
  8759                           
  8760                           ;pin_manager.c: 78: ANSELA = 0x0F;
  8761  002636  0E0F               	movlw	15
  8762  002638  6F38               	movwf	56,b	;volatile
  8763                           
  8764                           ;pin_manager.c: 83: WPUB = 0x00;
  8765  00263A  0E00               	movlw	0
  8766  00263C  6E61               	movwf	3937,c	;volatile
  8767                           
  8768                           ; BSR set to: 15
  8769                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 1;
  8770  00263E  8EF1               	bsf	intcon2,7,c	;volatile
  8771                           
  8772                           ; BSR set to: 15
  8773  002640  0012               	return		;funcret
  8774  002642                     __end_of_PIN_MANAGER_Initialize:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           intcon	equ	0xFF2
  8783                           intcon2	equ	0xFF1
  8784                           indf0	equ	0xFEF
  8785                           postinc0	equ	0xFEE
  8786                           fsr0h	equ	0xFEA
  8787                           fsr0l	equ	0xFE9
  8788                           wreg	equ	0xFE8
  8789                           indf1	equ	0xFE7
  8790                           postdec1	equ	0xFE5
  8791                           plusw1	equ	0xFE3
  8792                           fsr1h	equ	0xFE2
  8793                           fsr1l	equ	0xFE1
  8794                           indf2	equ	0xFDF
  8795                           postinc2	equ	0xFDE
  8796                           postdec2	equ	0xFDD
  8797                           plusw2	equ	0xFDB
  8798                           fsr2h	equ	0xFDA
  8799                           fsr2l	equ	0xFD9
  8800                           status	equ	0xFD8
  8801                           
  8802 ;; *************** function _OSCILLATOR_Initialize *****************
  8803 ;; Defined at:
  8804 ;;		line 63 in file "mcc_generated_files/mcc.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;		None
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;		None
  8809 ;; Return value:  Size  Location     Type
  8810 ;;                  1    wreg      void 
  8811 ;; Registers used:
  8812 ;;		wreg, status,2
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8818 ;;      Params:         0       0       0       0       0       0       0
  8819 ;;      Locals:         0       0       0       0       0       0       0
  8820 ;;      Temps:          0       0       0       0       0       0       0
  8821 ;;      Totals:         0       0       0       0       0       0       0
  8822 ;;Total ram usage:        0 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    2
  8825 ;; This function calls:
  8826 ;;		Nothing
  8827 ;; This function is called by:
  8828 ;;		_SYSTEM_Initialize
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           	psect	text38
  8833  0028B4                     __ptext38:
  8834                           	opt stack 0
  8835  0028B4                     _OSCILLATOR_Initialize:
  8836                           	opt stack 27
  8837                           
  8838                           ;mcc.c: 66: OSCCON = 0x70;
  8839                           
  8840                           ; BSR set to: 15
  8841                           ;incstack = 0
  8842  0028B4  0E70               	movlw	112
  8843  0028B6  6ED3               	movwf	4051,c	;volatile
  8844                           
  8845                           ;mcc.c: 68: OSCCON2 = 0x04;
  8846  0028B8  0E04               	movlw	4
  8847  0028BA  6ED2               	movwf	4050,c	;volatile
  8848                           
  8849                           ;mcc.c: 70: OSCTUNE = 0x40;
  8850  0028BC  0E40               	movlw	64
  8851  0028BE  6E9B               	movwf	3995,c	;volatile
  8852  0028C0                     
  8853                           ;mcc.c: 73: {
  8854  0028C0  BED2               	btfsc	4050,7,c	;volatile
  8855  0028C2  0012               	return	
  8856  0028C4  D7FD               	goto	l39
  8857  0028C6                     __end_of_OSCILLATOR_Initialize:
  8858                           	opt stack 0
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodh	equ	0xFF4
  8864                           prodl	equ	0xFF3
  8865                           intcon	equ	0xFF2
  8866                           intcon2	equ	0xFF1
  8867                           indf0	equ	0xFEF
  8868                           postinc0	equ	0xFEE
  8869                           fsr0h	equ	0xFEA
  8870                           fsr0l	equ	0xFE9
  8871                           wreg	equ	0xFE8
  8872                           indf1	equ	0xFE7
  8873                           postdec1	equ	0xFE5
  8874                           plusw1	equ	0xFE3
  8875                           fsr1h	equ	0xFE2
  8876                           fsr1l	equ	0xFE1
  8877                           indf2	equ	0xFDF
  8878                           postinc2	equ	0xFDE
  8879                           postdec2	equ	0xFDD
  8880                           plusw2	equ	0xFDB
  8881                           fsr2h	equ	0xFDA
  8882                           fsr2l	equ	0xFD9
  8883                           status	equ	0xFD8
  8884                           
  8885 ;; *************** function _INTERRUPT_Initialize *****************
  8886 ;; Defined at:
  8887 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;		None
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;		None
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  1    wreg      void 
  8894 ;; Registers used:
  8895 ;;		None
  8896 ;; Tracked objects:
  8897 ;;		On entry : 0/0
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8901 ;;      Params:         0       0       0       0       0       0       0
  8902 ;;      Locals:         0       0       0       0       0       0       0
  8903 ;;      Temps:          0       0       0       0       0       0       0
  8904 ;;      Totals:         0       0       0       0       0       0       0
  8905 ;;Total ram usage:        0 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    2
  8908 ;; This function calls:
  8909 ;;		Nothing
  8910 ;; This function is called by:
  8911 ;;		_SYSTEM_Initialize
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           	psect	text39
  8916  002938                     __ptext39:
  8917                           	opt stack 0
  8918  002938                     _INTERRUPT_Initialize:
  8919                           	opt stack 27
  8920                           
  8921                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8922                           
  8923                           ;incstack = 0
  8924  002938  9ED0               	bcf	4048,7,c	;volatile
  8925  00293A  0012               	return		;funcret
  8926  00293C                     __end_of_INTERRUPT_Initialize:
  8927                           	opt stack 0
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           intcon	equ	0xFF2
  8935                           intcon2	equ	0xFF1
  8936                           indf0	equ	0xFEF
  8937                           postinc0	equ	0xFEE
  8938                           fsr0h	equ	0xFEA
  8939                           fsr0l	equ	0xFE9
  8940                           wreg	equ	0xFE8
  8941                           indf1	equ	0xFE7
  8942                           postdec1	equ	0xFE5
  8943                           plusw1	equ	0xFE3
  8944                           fsr1h	equ	0xFE2
  8945                           fsr1l	equ	0xFE1
  8946                           indf2	equ	0xFDF
  8947                           postinc2	equ	0xFDE
  8948                           postdec2	equ	0xFDD
  8949                           plusw2	equ	0xFDB
  8950                           fsr2h	equ	0xFDA
  8951                           fsr2l	equ	0xFD9
  8952                           status	equ	0xFD8
  8953                           
  8954 ;; *************** function _EUSART2_Initialize *****************
  8955 ;; Defined at:
  8956 ;;		line 75 in file "mcc_generated_files/eusart2.c"
  8957 ;; Parameters:    Size  Location     Type
  8958 ;;		None
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;		None
  8961 ;; Return value:  Size  Location     Type
  8962 ;;                  1    wreg      void 
  8963 ;; Registers used:
  8964 ;;		wreg, status,2, status,0, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : 0/0
  8967 ;;		On exit  : 0/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8970 ;;      Params:         0       0       0       0       0       0       0
  8971 ;;      Locals:         0       0       0       0       0       0       0
  8972 ;;      Temps:          0       0       0       0       0       0       0
  8973 ;;      Totals:         0       0       0       0       0       0       0
  8974 ;;Total ram usage:        0 bytes
  8975 ;; Hardware stack levels used:    1
  8976 ;; Hardware stack levels required when called:    3
  8977 ;; This function calls:
  8978 ;;		_EUSART2_SetRxInterruptHandler
  8979 ;;		_EUSART2_SetTxInterruptHandler
  8980 ;; This function is called by:
  8981 ;;		_SYSTEM_Initialize
  8982 ;;		_main
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text40
  8987  002312                     __ptext40:
  8988                           	opt stack 0
  8989  002312                     _EUSART2_Initialize:
  8990                           	opt stack 26
  8991                           
  8992                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  8993                           
  8994                           ;incstack = 0
  8995  002312  9AA3               	bcf	4003,5,c	;volatile
  8996                           
  8997                           ;eusart2.c: 79: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  8998  002314  0ECA               	movlw	low _EUSART2_Receive_ISR
  8999  002316  6E13               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler,c
  9000  002318  0E26               	movlw	high _EUSART2_Receive_ISR
  9001  00231A  6E14               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler+1,c
  9002  00231C  EC8B  F014         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  9003                           
  9004                           ;eusart2.c: 80: PIE3bits.TX2IE = 0;
  9005  002320  98A3               	bcf	4003,4,c	;volatile
  9006                           
  9007                           ;eusart2.c: 81: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  9008  002322  0E42               	movlw	low _EUSART2_Transmit_ISR
  9009  002324  6E13               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler,c
  9010  002326  0E26               	movlw	high _EUSART2_Transmit_ISR
  9011  002328  6E14               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler+1,c
  9012  00232A  EC86  F014         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  9013                           
  9014                           ;eusart2.c: 85: BAUDCON2 = 0x08;
  9015  00232E  0E08               	movlw	8
  9016  002330  6E70               	movwf	3952,c	;volatile
  9017                           
  9018                           ;eusart2.c: 88: RCSTA2 = 0x90;
  9019  002332  0E90               	movlw	144
  9020  002334  6E71               	movwf	3953,c	;volatile
  9021                           
  9022                           ;eusart2.c: 91: TXSTA2 = 0x24;
  9023  002336  0E24               	movlw	36
  9024  002338  6E72               	movwf	3954,c	;volatile
  9025                           
  9026                           ;eusart2.c: 94: SPBRG2 = 0x82;
  9027  00233A  0E82               	movlw	130
  9028  00233C  6E75               	movwf	3957,c	;volatile
  9029                           
  9030                           ;eusart2.c: 97: SPBRGH2 = 0x06;
  9031  00233E  0E06               	movlw	6
  9032  002340  6E76               	movwf	3958,c	;volatile
  9033                           
  9034                           ;eusart2.c: 101: eusart2TxHead = 0;
  9035  002342  0E00               	movlw	0
  9036  002344  6E4C               	movwf	_eusart2TxHead,c	;volatile
  9037                           
  9038                           ;eusart2.c: 102: eusart2TxTail = 0;
  9039  002346  0E00               	movlw	0
  9040  002348  6E4B               	movwf	_eusart2TxTail,c	;volatile
  9041                           
  9042                           ;eusart2.c: 103: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  9043  00234A  0E08               	movlw	8
  9044  00234C  6E4A               	movwf	_eusart2TxBufferRemaining,c	;volatile
  9045                           
  9046                           ;eusart2.c: 105: eusart2RxHead = 0;
  9047  00234E  0E00               	movlw	0
  9048  002350  6E49               	movwf	_eusart2RxHead,c	;volatile
  9049                           
  9050                           ;eusart2.c: 106: eusart2RxTail = 0;
  9051  002352  0E00               	movlw	0
  9052  002354  6E48               	movwf	_eusart2RxTail,c	;volatile
  9053                           
  9054                           ;eusart2.c: 107: eusart2RxCount = 0;
  9055  002356  0E00               	movlw	0
  9056  002358  6E47               	movwf	_eusart2RxCount,c	;volatile
  9057                           
  9058                           ;eusart2.c: 110: PIE3bits.RC2IE = 1;
  9059  00235A  8AA3               	bsf	4003,5,c	;volatile
  9060  00235C  0012               	return		;funcret
  9061  00235E                     __end_of_EUSART2_Initialize:
  9062                           	opt stack 0
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           intcon2	equ	0xFF1
  9071                           indf0	equ	0xFEF
  9072                           postinc0	equ	0xFEE
  9073                           fsr0h	equ	0xFEA
  9074                           fsr0l	equ	0xFE9
  9075                           wreg	equ	0xFE8
  9076                           indf1	equ	0xFE7
  9077                           postdec1	equ	0xFE5
  9078                           plusw1	equ	0xFE3
  9079                           fsr1h	equ	0xFE2
  9080                           fsr1l	equ	0xFE1
  9081                           indf2	equ	0xFDF
  9082                           postinc2	equ	0xFDE
  9083                           postdec2	equ	0xFDD
  9084                           plusw2	equ	0xFDB
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  9090 ;; Defined at:
  9091 ;;		line 211 in file "mcc_generated_files/eusart2.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  9094 ;;		 -> EUSART2_Transmit_ISR(1), 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;		None
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9106 ;;      Params:         2       0       0       0       0       0       0
  9107 ;;      Locals:         0       0       0       0       0       0       0
  9108 ;;      Temps:          0       0       0       0       0       0       0
  9109 ;;      Totals:         2       0       0       0       0       0       0
  9110 ;;Total ram usage:        2 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    2
  9113 ;; This function calls:
  9114 ;;		Nothing
  9115 ;; This function is called by:
  9116 ;;		_EUSART2_Initialize
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           	psect	text41
  9121  00290C                     __ptext41:
  9122                           	opt stack 0
  9123  00290C                     _EUSART2_SetTxInterruptHandler:
  9124                           	opt stack 26
  9125                           
  9126                           ;eusart2.c: 212: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  9127                           
  9128                           ;incstack = 0
  9129  00290C  C013  F03E         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  9130  002910  C014  F03F         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  9131  002914  0012               	return		;funcret
  9132  002916                     __end_of_EUSART2_SetTxInterruptHandler:
  9133                           	opt stack 0
  9134                           tblptru	equ	0xFF8
  9135                           tblptrh	equ	0xFF7
  9136                           tblptrl	equ	0xFF6
  9137                           tablat	equ	0xFF5
  9138                           prodh	equ	0xFF4
  9139                           prodl	equ	0xFF3
  9140                           intcon	equ	0xFF2
  9141                           intcon2	equ	0xFF1
  9142                           indf0	equ	0xFEF
  9143                           postinc0	equ	0xFEE
  9144                           fsr0h	equ	0xFEA
  9145                           fsr0l	equ	0xFE9
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postdec1	equ	0xFE5
  9149                           plusw1	equ	0xFE3
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           plusw2	equ	0xFDB
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  9161 ;; Defined at:
  9162 ;;		line 215 in file "mcc_generated_files/eusart2.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  9165 ;;		 -> EUSART2_Receive_ISR(1), 
  9166 ;; Auto vars:     Size  Location     Type
  9167 ;;		None
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  1    wreg      void 
  9170 ;; Registers used:
  9171 ;;		wreg, status,2, status,0
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9177 ;;      Params:         2       0       0       0       0       0       0
  9178 ;;      Locals:         0       0       0       0       0       0       0
  9179 ;;      Temps:          0       0       0       0       0       0       0
  9180 ;;      Totals:         2       0       0       0       0       0       0
  9181 ;;Total ram usage:        2 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    2
  9184 ;; This function calls:
  9185 ;;		Nothing
  9186 ;; This function is called by:
  9187 ;;		_EUSART2_Initialize
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text42
  9192  002916                     __ptext42:
  9193                           	opt stack 0
  9194  002916                     _EUSART2_SetRxInterruptHandler:
  9195                           	opt stack 26
  9196                           
  9197                           ;eusart2.c: 216: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  9198                           
  9199                           ;incstack = 0
  9200  002916  C013  F03C         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  9201  00291A  C014  F03D         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  9202  00291E  0012               	return		;funcret
  9203  002920                     __end_of_EUSART2_SetRxInterruptHandler:
  9204                           	opt stack 0
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           intcon2	equ	0xFF1
  9213                           indf0	equ	0xFEF
  9214                           postinc0	equ	0xFEE
  9215                           fsr0h	equ	0xFEA
  9216                           fsr0l	equ	0xFE9
  9217                           wreg	equ	0xFE8
  9218                           indf1	equ	0xFE7
  9219                           postdec1	equ	0xFE5
  9220                           plusw1	equ	0xFE3
  9221                           fsr1h	equ	0xFE2
  9222                           fsr1l	equ	0xFE1
  9223                           indf2	equ	0xFDF
  9224                           postinc2	equ	0xFDE
  9225                           postdec2	equ	0xFDD
  9226                           plusw2	equ	0xFDB
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function _EUSART1_Initialize *****************
  9232 ;; Defined at:
  9233 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		wreg, status,2, status,0, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9247 ;;      Params:         0       0       0       0       0       0       0
  9248 ;;      Locals:         0       0       0       0       0       0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0
  9250 ;;      Totals:         0       0       0       0       0       0       0
  9251 ;;Total ram usage:        0 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    3
  9254 ;; This function calls:
  9255 ;;		_EUSART1_SetRxInterruptHandler
  9256 ;;		_EUSART1_SetTxInterruptHandler
  9257 ;; This function is called by:
  9258 ;;		_SYSTEM_Initialize
  9259 ;;		_main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           	psect	text43
  9264  00235E                     __ptext43:
  9265                           	opt stack 0
  9266  00235E                     _EUSART1_Initialize:
  9267                           	opt stack 26
  9268                           
  9269                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  9270                           
  9271                           ;incstack = 0
  9272  00235E  9A9D               	bcf	3997,5,c	;volatile
  9273                           
  9274                           ;eusart1.c: 79: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  9275  002360  0EF6               	movlw	low _EUSART1_Receive_ISR
  9276  002362  6E13               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler,c
  9277  002364  0E26               	movlw	high _EUSART1_Receive_ISR
  9278  002366  6E14               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1,c
  9279  002368  EC95  F014         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  9280                           
  9281                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  9282  00236C  989D               	bcf	3997,4,c	;volatile
  9283                           
  9284                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  9285  00236E  0E70               	movlw	low _EUSART1_Transmit_ISR
  9286  002370  6E13               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler,c
  9287  002372  0E26               	movlw	high _EUSART1_Transmit_ISR
  9288  002374  6E14               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler+1,c
  9289  002376  EC90  F014         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  9290                           
  9291                           ;eusart1.c: 85: BAUDCON1 = 0x08;
  9292  00237A  0E08               	movlw	8
  9293  00237C  6EB8               	movwf	4024,c	;volatile
  9294                           
  9295                           ;eusart1.c: 88: RCSTA1 = 0x90;
  9296  00237E  0E90               	movlw	144
  9297  002380  6EAB               	movwf	4011,c	;volatile
  9298                           
  9299                           ;eusart1.c: 91: TXSTA1 = 0x24;
  9300  002382  0E24               	movlw	36
  9301  002384  6EAC               	movwf	4012,c	;volatile
  9302                           
  9303                           ;eusart1.c: 94: SPBRG1 = 0x8A;
  9304  002386  0E8A               	movlw	138
  9305  002388  6EAF               	movwf	4015,c	;volatile
  9306                           
  9307                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  9308  00238A  0E00               	movlw	0
  9309  00238C  6EB0               	movwf	4016,c	;volatile
  9310                           
  9311                           ;eusart1.c: 101: eusart1TxHead = 0;
  9312  00238E  0E00               	movlw	0
  9313  002390  6E45               	movwf	_eusart1TxHead,c	;volatile
  9314                           
  9315                           ;eusart1.c: 102: eusart1TxTail = 0;
  9316  002392  0E00               	movlw	0
  9317  002394  6E44               	movwf	_eusart1TxTail,c	;volatile
  9318                           
  9319                           ;eusart1.c: 103: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9320  002396  0E08               	movlw	8
  9321  002398  6E43               	movwf	_eusart1TxBufferRemaining,c	;volatile
  9322                           
  9323                           ;eusart1.c: 105: eusart1RxHead = 0;
  9324  00239A  0E00               	movlw	0
  9325  00239C  6E42               	movwf	_eusart1RxHead,c	;volatile
  9326                           
  9327                           ;eusart1.c: 106: eusart1RxTail = 0;
  9328  00239E  0E00               	movlw	0
  9329  0023A0  6E41               	movwf	_eusart1RxTail,c	;volatile
  9330                           
  9331                           ;eusart1.c: 107: eusart1RxCount = 0;
  9332  0023A2  0E00               	movlw	0
  9333  0023A4  6E40               	movwf	_eusart1RxCount,c	;volatile
  9334                           
  9335                           ;eusart1.c: 110: PIE1bits.RC1IE = 1;
  9336  0023A6  8A9D               	bsf	3997,5,c	;volatile
  9337  0023A8  0012               	return		;funcret
  9338  0023AA                     __end_of_EUSART1_Initialize:
  9339                           	opt stack 0
  9340                           tblptru	equ	0xFF8
  9341                           tblptrh	equ	0xFF7
  9342                           tblptrl	equ	0xFF6
  9343                           tablat	equ	0xFF5
  9344                           prodh	equ	0xFF4
  9345                           prodl	equ	0xFF3
  9346                           intcon	equ	0xFF2
  9347                           intcon2	equ	0xFF1
  9348                           indf0	equ	0xFEF
  9349                           postinc0	equ	0xFEE
  9350                           fsr0h	equ	0xFEA
  9351                           fsr0l	equ	0xFE9
  9352                           wreg	equ	0xFE8
  9353                           indf1	equ	0xFE7
  9354                           postdec1	equ	0xFE5
  9355                           plusw1	equ	0xFE3
  9356                           fsr1h	equ	0xFE2
  9357                           fsr1l	equ	0xFE1
  9358                           indf2	equ	0xFDF
  9359                           postinc2	equ	0xFDE
  9360                           postdec2	equ	0xFDD
  9361                           plusw2	equ	0xFDB
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  9367 ;; Defined at:
  9368 ;;		line 211 in file "mcc_generated_files/eusart1.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  9371 ;;		 -> EUSART1_Transmit_ISR(1), 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9383 ;;      Params:         2       0       0       0       0       0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0
  9386 ;;      Totals:         2       0       0       0       0       0       0
  9387 ;;Total ram usage:        2 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    2
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_EUSART1_Initialize
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text44
  9398  002920                     __ptext44:
  9399                           	opt stack 0
  9400  002920                     _EUSART1_SetTxInterruptHandler:
  9401                           	opt stack 26
  9402                           
  9403                           ;eusart1.c: 212: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  9404                           
  9405                           ;incstack = 0
  9406  002920  C013  F098         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  9407  002924  C014  F099         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  9408  002928  0012               	return		;funcret
  9409  00292A                     __end_of_EUSART1_SetTxInterruptHandler:
  9410                           	opt stack 0
  9411                           tblptru	equ	0xFF8
  9412                           tblptrh	equ	0xFF7
  9413                           tblptrl	equ	0xFF6
  9414                           tablat	equ	0xFF5
  9415                           prodh	equ	0xFF4
  9416                           prodl	equ	0xFF3
  9417                           intcon	equ	0xFF2
  9418                           intcon2	equ	0xFF1
  9419                           indf0	equ	0xFEF
  9420                           postinc0	equ	0xFEE
  9421                           fsr0h	equ	0xFEA
  9422                           fsr0l	equ	0xFE9
  9423                           wreg	equ	0xFE8
  9424                           indf1	equ	0xFE7
  9425                           postdec1	equ	0xFE5
  9426                           plusw1	equ	0xFE3
  9427                           fsr1h	equ	0xFE2
  9428                           fsr1l	equ	0xFE1
  9429                           indf2	equ	0xFDF
  9430                           postinc2	equ	0xFDE
  9431                           postdec2	equ	0xFDD
  9432                           plusw2	equ	0xFDB
  9433                           fsr2h	equ	0xFDA
  9434                           fsr2l	equ	0xFD9
  9435                           status	equ	0xFD8
  9436                           
  9437 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  9438 ;; Defined at:
  9439 ;;		line 215 in file "mcc_generated_files/eusart1.c"
  9440 ;; Parameters:    Size  Location     Type
  9441 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  9442 ;;		 -> EUSART1_Receive_ISR(1), 
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;		None
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      void 
  9447 ;; Registers used:
  9448 ;;		wreg, status,2, status,0
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9454 ;;      Params:         2       0       0       0       0       0       0
  9455 ;;      Locals:         0       0       0       0       0       0       0
  9456 ;;      Temps:          0       0       0       0       0       0       0
  9457 ;;      Totals:         2       0       0       0       0       0       0
  9458 ;;Total ram usage:        2 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    2
  9461 ;; This function calls:
  9462 ;;		Nothing
  9463 ;; This function is called by:
  9464 ;;		_EUSART1_Initialize
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           	psect	text45
  9469  00292A                     __ptext45:
  9470                           	opt stack 0
  9471  00292A                     _EUSART1_SetRxInterruptHandler:
  9472                           	opt stack 26
  9473                           
  9474                           ;eusart1.c: 216: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  9475                           
  9476                           ;incstack = 0
  9477  00292A  C013  F096         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  9478  00292E  C014  F097         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  9479  002932  0012               	return		;funcret
  9480  002934                     __end_of_EUSART1_SetRxInterruptHandler:
  9481                           	opt stack 0
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           intcon2	equ	0xFF1
  9490                           indf0	equ	0xFEF
  9491                           postinc0	equ	0xFEE
  9492                           fsr0h	equ	0xFEA
  9493                           fsr0l	equ	0xFE9
  9494                           wreg	equ	0xFE8
  9495                           indf1	equ	0xFE7
  9496                           postdec1	equ	0xFE5
  9497                           plusw1	equ	0xFE3
  9498                           fsr1h	equ	0xFE2
  9499                           fsr1l	equ	0xFE1
  9500                           indf2	equ	0xFDF
  9501                           postinc2	equ	0xFDE
  9502                           postdec2	equ	0xFDD
  9503                           plusw2	equ	0xFDB
  9504                           fsr2h	equ	0xFDA
  9505                           fsr2l	equ	0xFD9
  9506                           status	equ	0xFD8
  9507                           
  9508 ;; *************** function _CCP5_Initialize *****************
  9509 ;; Defined at:
  9510 ;;		line 49 in file "mcc_generated_files/ccp5.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;		None
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;		None
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, status,2
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9524 ;;      Params:         0       0       0       0       0       0       0
  9525 ;;      Locals:         0       0       0       0       0       0       0
  9526 ;;      Temps:          0       0       0       0       0       0       0
  9527 ;;      Totals:         0       0       0       0       0       0       0
  9528 ;;Total ram usage:        0 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    2
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_SYSTEM_Initialize
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text46
  9539  0028D8                     __ptext46:
  9540                           	opt stack 0
  9541  0028D8                     _CCP5_Initialize:
  9542                           	opt stack 27
  9543                           
  9544                           ;ccp5.c: 53: CCP5CON = 0x00;
  9545                           
  9546                           ;incstack = 0
  9547  0028D8  0E00               	movlw	0
  9548  0028DA  010F               	movlb	15	; () banked
  9549  0028DC  6F54               	movwf	84,b	;volatile
  9550                           
  9551                           ;ccp5.c: 56: CCPR5L = 0x00;
  9552  0028DE  0E00               	movlw	0
  9553  0028E0  6F55               	movwf	85,b	;volatile
  9554                           
  9555                           ;ccp5.c: 59: CCPR5H = 0x00;
  9556  0028E2  0E00               	movlw	0
  9557  0028E4  6F56               	movwf	86,b	;volatile
  9558                           
  9559                           ; BSR set to: 15
  9560  0028E6  0012               	return		;funcret
  9561  0028E8                     __end_of_CCP5_Initialize:
  9562                           	opt stack 0
  9563                           tblptru	equ	0xFF8
  9564                           tblptrh	equ	0xFF7
  9565                           tblptrl	equ	0xFF6
  9566                           tablat	equ	0xFF5
  9567                           prodh	equ	0xFF4
  9568                           prodl	equ	0xFF3
  9569                           intcon	equ	0xFF2
  9570                           intcon2	equ	0xFF1
  9571                           indf0	equ	0xFEF
  9572                           postinc0	equ	0xFEE
  9573                           fsr0h	equ	0xFEA
  9574                           fsr0l	equ	0xFE9
  9575                           wreg	equ	0xFE8
  9576                           indf1	equ	0xFE7
  9577                           postdec1	equ	0xFE5
  9578                           plusw1	equ	0xFE3
  9579                           fsr1h	equ	0xFE2
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           plusw2	equ	0xFDB
  9585                           fsr2h	equ	0xFDA
  9586                           fsr2l	equ	0xFD9
  9587                           status	equ	0xFD8
  9588                           
  9589 ;; *************** function _ADC_Initialize *****************
  9590 ;; Defined at:
  9591 ;;		line 60 in file "mcc_generated_files/adc.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  1    wreg      void 
  9598 ;; Registers used:
  9599 ;;		wreg, status,2
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9605 ;;      Params:         0       0       0       0       0       0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0
  9608 ;;      Totals:         0       0       0       0       0       0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    2
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_SYSTEM_Initialize
  9616 ;;		_main
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           	psect	text47
  9621  00288A                     __ptext47:
  9622                           	opt stack 0
  9623  00288A                     _ADC_Initialize:
  9624                           	opt stack 27
  9625                           
  9626                           ;adc.c: 65: ADCON0 = 0x01;
  9627                           
  9628                           ; BSR set to: 15
  9629                           ;incstack = 0
  9630  00288A  0E01               	movlw	1
  9631  00288C  6EC2               	movwf	4034,c	;volatile
  9632                           
  9633                           ;adc.c: 68: ADCON1 = 0x00;
  9634  00288E  0E00               	movlw	0
  9635  002890  6EC1               	movwf	4033,c	;volatile
  9636                           
  9637                           ;adc.c: 71: ADCON2 = 0x8E;
  9638  002892  0E8E               	movlw	142
  9639  002894  6EC0               	movwf	4032,c	;volatile
  9640                           
  9641                           ;adc.c: 74: ADRESL = 0x00;
  9642  002896  0E00               	movlw	0
  9643  002898  6EC3               	movwf	4035,c	;volatile
  9644                           
  9645                           ;adc.c: 77: ADRESH = 0x00;
  9646  00289A  0E00               	movlw	0
  9647  00289C  6EC4               	movwf	4036,c	;volatile
  9648  00289E  0012               	return		;funcret
  9649  0028A0                     __end_of_ADC_Initialize:
  9650                           	opt stack 0
  9651                           tblptru	equ	0xFF8
  9652                           tblptrh	equ	0xFF7
  9653                           tblptrl	equ	0xFF6
  9654                           tablat	equ	0xFF5
  9655                           prodh	equ	0xFF4
  9656                           prodl	equ	0xFF3
  9657                           intcon	equ	0xFF2
  9658                           intcon2	equ	0xFF1
  9659                           indf0	equ	0xFEF
  9660                           postinc0	equ	0xFEE
  9661                           fsr0h	equ	0xFEA
  9662                           fsr0l	equ	0xFE9
  9663                           wreg	equ	0xFE8
  9664                           indf1	equ	0xFE7
  9665                           postdec1	equ	0xFE5
  9666                           plusw1	equ	0xFE3
  9667                           fsr1h	equ	0xFE2
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           plusw2	equ	0xFDB
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677 ;; *************** function _ESP_Initialize *****************
  9678 ;; Defined at:
  9679 ;;		line 288 in file "main.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;		None
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;  ESP_TASK        2   16[BANK0 ] int 
  9684 ;;  oldtimecount    2   14[BANK0 ] unsigned int 
  9685 ;;  oldtimecount    2   12[BANK0 ] unsigned int 
  9686 ;;  oldtimecount    2   10[BANK0 ] unsigned int 
  9687 ;;  oldtimecount    2    8[BANK0 ] unsigned int 
  9688 ;;  oldtimecount    2    6[BANK0 ] unsigned int 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  1    wreg      void 
  9691 ;; Registers used:
  9692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9698 ;;      Params:         0       0       0       0       0       0       0
  9699 ;;      Locals:         0      12       0       0       0       0       0
  9700 ;;      Temps:          0       2       0       0       0       0       0
  9701 ;;      Totals:         0      14       0       0       0       0       0
  9702 ;;Total ram usage:       14 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    5
  9705 ;; This function calls:
  9706 ;;		_esp8266_CIPMUX
  9707 ;;		_esp8266_SLEEP
  9708 ;;		_esp8266_connect
  9709 ;;		_esp8266_isStarted
  9710 ;;		_esp8266_mode
  9711 ;;		_esp8266_server
  9712 ;; This function is called by:
  9713 ;;		_main
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text48
  9718  001336                     __ptext48:
  9719                           	opt stack 0
  9720  001336                     _ESP_Initialize:
  9721                           	opt stack 25
  9722                           
  9723                           ;main.c: 290: int ESP_TASK =1;
  9724                           
  9725                           ;incstack = 0
  9726  001336  0E00               	movlw	0
  9727  001338  0100               	movlb	0	; () banked
  9728  00133A  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9729  00133C  0E01               	movlw	1
  9730  00133E  6FAD               	movwf	ESP_Initialize@ESP_TASK& (0+255),b
  9731                           
  9732                           ;main.c: 291: ESP_flag = 0 ;
  9733  001340  0E00               	movlw	0
  9734  001342  0101               	movlb	1	; () banked
  9735  001344  6FC6               	movwf	(_ESP_flag+1)& (0+255),b
  9736  001346  0E00               	movlw	0
  9737  001348  6FC5               	movwf	_ESP_flag& (0+255),b
  9738                           
  9739                           ;main.c: 292: unsigned int oldtimecount1 =0;
  9740  00134A  0E00               	movlw	0
  9741  00134C  0100               	movlb	0	; () banked
  9742  00134E  6FA8               	movwf	(ESP_Initialize@oldtimecount1+1)& (0+255),b
  9743  001350  0E00               	movlw	0
  9744  001352  6FA7               	movwf	ESP_Initialize@oldtimecount1& (0+255),b
  9745                           
  9746                           ;main.c: 293: unsigned int oldtimecount2 =0;
  9747  001354  0E00               	movlw	0
  9748  001356  6FAA               	movwf	(ESP_Initialize@oldtimecount2+1)& (0+255),b
  9749  001358  0E00               	movlw	0
  9750  00135A  6FA9               	movwf	ESP_Initialize@oldtimecount2& (0+255),b
  9751                           
  9752                           ;main.c: 294: unsigned int oldtimecount3 =0;
  9753  00135C  0E00               	movlw	0
  9754  00135E  6FA6               	movwf	(ESP_Initialize@oldtimecount3+1)& (0+255),b
  9755  001360  0E00               	movlw	0
  9756  001362  6FA5               	movwf	ESP_Initialize@oldtimecount3& (0+255),b
  9757                           
  9758                           ;main.c: 295: unsigned int oldtimecount4 =0;
  9759  001364  0E00               	movlw	0
  9760  001366  6FAC               	movwf	(ESP_Initialize@oldtimecount4+1)& (0+255),b
  9761  001368  0E00               	movlw	0
  9762  00136A  6FAB               	movwf	ESP_Initialize@oldtimecount4& (0+255),b
  9763                           
  9764                           ;main.c: 296: unsigned int oldtimecount5 =0;
  9765  00136C  0E00               	movlw	0
  9766  00136E  6FA4               	movwf	(ESP_Initialize@oldtimecount5+1)& (0+255),b
  9767  001370  0E00               	movlw	0
  9768  001372  6FA3               	movwf	ESP_Initialize@oldtimecount5& (0+255),b
  9769                           
  9770                           ;main.c: 298: while(ESP_TASK != 7){
  9771  001374  D0D0               	goto	l719
  9772  001376                     
  9773                           ; BSR set to: 0
  9774                           ;main.c: 301: esp8266_isStarted();
  9775                           
  9776                           ; BSR set to: 0
  9777  001376  EC63  F014         	call	_esp8266_isStarted	;wreg free
  9778                           
  9779                           ;main.c: 302: ESP_TASK = 2;
  9780  00137A  0E00               	movlw	0
  9781  00137C  0100               	movlb	0	; () banked
  9782  00137E  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9783  001380  0E02               	movlw	2
  9784  001382  6FAD               	movwf	ESP_Initialize@ESP_TASK& (0+255),b
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;main.c: 303: oldtimecount1 = timecount;
  9788  001384  C1C7  F0A7         	movff	_timecount,ESP_Initialize@oldtimecount1
  9789  001388  C1C8  F0A8         	movff	_timecount+1,ESP_Initialize@oldtimecount1+1
  9790                           
  9791                           ;main.c: 304: break;
  9792  00138C  D0C4               	goto	l719
  9793  00138E                     
  9794                           ; BSR set to: 0
  9795                           ;main.c: 306: if((timecount - oldtimecount1)<100 ){
  9796                           
  9797                           ; BSR set to: 0
  9798  00138E  C0A7  F0A1         	movff	ESP_Initialize@oldtimecount1,??_ESP_Initialize
  9799  001392  C0A8  F0A2         	movff	ESP_Initialize@oldtimecount1+1,??_ESP_Initialize+1
  9800  001396  1FA1               	comf	??_ESP_Initialize& (0+255),f,b
  9801  001398  1FA2               	comf	(??_ESP_Initialize+1)& (0+255),f,b
  9802  00139A  4BA1               	infsnz	??_ESP_Initialize& (0+255),f,b
  9803  00139C  2BA2               	incf	(??_ESP_Initialize+1)& (0+255),f,b
  9804  00139E  0101               	movlb	1	; () banked
  9805  0013A0  51C7               	movf	_timecount& (0+255),w,b
  9806  0013A2  0100               	movlb	0	; () banked
  9807  0013A4  27A1               	addwf	??_ESP_Initialize& (0+255),f,b
  9808  0013A6  0101               	movlb	1	; () banked
  9809  0013A8  51C8               	movf	(_timecount+1)& (0+255),w,b
  9810  0013AA  0100               	movlb	0	; () banked
  9811  0013AC  23A2               	addwfc	(??_ESP_Initialize+1)& (0+255),f,b
  9812  0013AE  51A2               	movf	(??_ESP_Initialize+1)& (0+255),w,b
  9813  0013B0  E108               	bnz	l6304
  9814  0013B2  0E64               	movlw	100
  9815  0013B4  5DA1               	subwf	??_ESP_Initialize& (0+255),w,b
  9816  0013B6  B0D8               	btfsc	status,0,c
  9817  0013B8  D004               	goto	l721
  9818                           
  9819                           ; BSR set to: 0
  9820                           ;main.c: 307: ESP_TASK = 2;
  9821  0013BA  0E00               	movlw	0
  9822  0013BC  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9823  0013BE  0E02               	movlw	2
  9824  0013C0  D08C               	goto	L14
  9825  0013C2                     l721:
  9826  0013C2                     l6304:
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;main.c: 309: else{
  9830                           ;main.c: 310: esp8266_mode(1);
  9831  0013C2  0E01               	movlw	1
  9832  0013C4  EC91  F013         	call	_esp8266_mode
  9833                           
  9834                           ;main.c: 311: ESP_TASK = 3;
  9835  0013C8  0E00               	movlw	0
  9836  0013CA  0100               	movlb	0	; () banked
  9837  0013CC  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9838  0013CE  0E03               	movlw	3
  9839  0013D0  6FAD               	movwf	ESP_Initialize@ESP_TASK& (0+255),b
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;main.c: 312: oldtimecount2 = timecount;
  9843  0013D2  C1C7  F0A9         	movff	_timecount,ESP_Initialize@oldtimecount2
  9844  0013D6  C1C8  F0AA         	movff	_timecount+1,ESP_Initialize@oldtimecount2+1
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;main.c: 313: esp8266_connect("yyb","a12345678");
  9848  0013DA  0EDA               	movlw	low STR_43
  9849  0013DC  6F9D               	movwf	esp8266_connect@ssid& (0+255),b
  9850  0013DE  0E7F               	movlw	high STR_43
  9851  0013E0  6F9E               	movwf	(esp8266_connect@ssid+1)& (0+255),b
  9852  0013E2  0E84               	movlw	low STR_44
  9853  0013E4  6F9F               	movwf	esp8266_connect@pass& (0+255),b
  9854  0013E6  0E7F               	movlw	high STR_44
  9855  0013E8  6FA0               	movwf	(esp8266_connect@pass+1)& (0+255),b
  9856  0013EA  EC5B  F012         	call	_esp8266_connect	;wreg free
  9857                           
  9858                           ;main.c: 314: }
  9859                           ;main.c: 315: break;
  9860  0013EE  D093               	goto	l719
  9861  0013F0                     
  9862                           ;main.c: 317: if((timecount - oldtimecount2)<10000 ){
  9863  0013F0  C0A9  F0A1         	movff	ESP_Initialize@oldtimecount2,??_ESP_Initialize
  9864  0013F4  C0AA  F0A2         	movff	ESP_Initialize@oldtimecount2+1,??_ESP_Initialize+1
  9865  0013F8  0100               	movlb	0	; () banked
  9866  0013FA  1FA1               	comf	??_ESP_Initialize& (0+255),f,b
  9867  0013FC  1FA2               	comf	(??_ESP_Initialize+1)& (0+255),f,b
  9868  0013FE  4BA1               	infsnz	??_ESP_Initialize& (0+255),f,b
  9869  001400  2BA2               	incf	(??_ESP_Initialize+1)& (0+255),f,b
  9870  001402  0101               	movlb	1	; () banked
  9871  001404  51C7               	movf	_timecount& (0+255),w,b
  9872  001406  0100               	movlb	0	; () banked
  9873  001408  27A1               	addwf	??_ESP_Initialize& (0+255),f,b
  9874  00140A  0101               	movlb	1	; () banked
  9875  00140C  51C8               	movf	(_timecount+1)& (0+255),w,b
  9876  00140E  0100               	movlb	0	; () banked
  9877  001410  23A2               	addwfc	(??_ESP_Initialize+1)& (0+255),f,b
  9878  001412  0E10               	movlw	16
  9879  001414  5DA1               	subwf	??_ESP_Initialize& (0+255),w,b
  9880  001416  0E27               	movlw	39
  9881  001418  59A2               	subwfb	(??_ESP_Initialize+1)& (0+255),w,b
  9882  00141A  B0D8               	btfsc	status,0,c
  9883  00141C  D004               	goto	l724
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;main.c: 318: ESP_TASK = 3;
  9887  00141E  0E00               	movlw	0
  9888  001420  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9889  001422  0E03               	movlw	3
  9890  001424  D05A               	goto	L14
  9891  001426                     l724:
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;main.c: 320: else{
  9895                           ;main.c: 328: ESP_TASK = 4;
  9896                           
  9897                           ; BSR set to: 0
  9898  001426  0E00               	movlw	0
  9899  001428  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9900  00142A  0E04               	movlw	4
  9901  00142C  6FAD               	movwf	ESP_Initialize@ESP_TASK& (0+255),b
  9902                           
  9903                           ; BSR set to: 0
  9904                           ;main.c: 329: esp8266_CIPMUX(1);
  9905  00142E  0E01               	movlw	1
  9906  001430  ECB9  F013         	call	_esp8266_CIPMUX
  9907                           
  9908                           ;main.c: 330: }
  9909                           ;main.c: 332: break;
  9910  001434  D070               	goto	l719
  9911  001436                     
  9912                           ;main.c: 334: if((timecount - oldtimecount3)<10000 ){
  9913  001436  C0A5  F0A1         	movff	ESP_Initialize@oldtimecount3,??_ESP_Initialize
  9914  00143A  C0A6  F0A2         	movff	ESP_Initialize@oldtimecount3+1,??_ESP_Initialize+1
  9915  00143E  0100               	movlb	0	; () banked
  9916  001440  1FA1               	comf	??_ESP_Initialize& (0+255),f,b
  9917  001442  1FA2               	comf	(??_ESP_Initialize+1)& (0+255),f,b
  9918  001444  4BA1               	infsnz	??_ESP_Initialize& (0+255),f,b
  9919  001446  2BA2               	incf	(??_ESP_Initialize+1)& (0+255),f,b
  9920  001448  0101               	movlb	1	; () banked
  9921  00144A  51C7               	movf	_timecount& (0+255),w,b
  9922  00144C  0100               	movlb	0	; () banked
  9923  00144E  27A1               	addwf	??_ESP_Initialize& (0+255),f,b
  9924  001450  0101               	movlb	1	; () banked
  9925  001452  51C8               	movf	(_timecount+1)& (0+255),w,b
  9926  001454  0100               	movlb	0	; () banked
  9927  001456  23A2               	addwfc	(??_ESP_Initialize+1)& (0+255),f,b
  9928  001458  0E10               	movlw	16
  9929  00145A  5DA1               	subwf	??_ESP_Initialize& (0+255),w,b
  9930  00145C  0E27               	movlw	39
  9931  00145E  59A2               	subwfb	(??_ESP_Initialize+1)& (0+255),w,b
  9932  001460  B0D8               	btfsc	status,0,c
  9933  001462  D004               	goto	l727
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;main.c: 335: ESP_TASK = 4;
  9937  001464  0E00               	movlw	0
  9938  001466  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9939  001468  0E04               	movlw	4
  9940  00146A  D037               	goto	L14
  9941  00146C                     l727:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;main.c: 337: else{
  9945                           ;main.c: 339: ESP_TASK = 6;
  9946                           
  9947                           ; BSR set to: 0
  9948  00146C  0E00               	movlw	0
  9949  00146E  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9950  001470  0E06               	movlw	6
  9951  001472  6FAD               	movwf	ESP_Initialize@ESP_TASK& (0+255),b
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;main.c: 340: esp8266_server(1);
  9955  001474  0E01               	movlw	1
  9956  001476  ECD5  F011         	call	_esp8266_server
  9957                           
  9958                           ;main.c: 341: oldtimecount4 = timecount;
  9959  00147A  C1C7  F0AB         	movff	_timecount,ESP_Initialize@oldtimecount4
  9960  00147E  C1C8  F0AC         	movff	_timecount+1,ESP_Initialize@oldtimecount4+1
  9961                           
  9962                           ;main.c: 342: }
  9963                           ;main.c: 344: break;
  9964  001482  D049               	goto	l719
  9965  001484                     
  9966                           ;main.c: 346: if((timecount - oldtimecount4)<10000 ){
  9967  001484  C0AB  F0A1         	movff	ESP_Initialize@oldtimecount4,??_ESP_Initialize
  9968  001488  C0AC  F0A2         	movff	ESP_Initialize@oldtimecount4+1,??_ESP_Initialize+1
  9969  00148C  0100               	movlb	0	; () banked
  9970  00148E  1FA1               	comf	??_ESP_Initialize& (0+255),f,b
  9971  001490  1FA2               	comf	(??_ESP_Initialize+1)& (0+255),f,b
  9972  001492  4BA1               	infsnz	??_ESP_Initialize& (0+255),f,b
  9973  001494  2BA2               	incf	(??_ESP_Initialize+1)& (0+255),f,b
  9974  001496  0101               	movlb	1	; () banked
  9975  001498  51C7               	movf	_timecount& (0+255),w,b
  9976  00149A  0100               	movlb	0	; () banked
  9977  00149C  27A1               	addwf	??_ESP_Initialize& (0+255),f,b
  9978  00149E  0101               	movlb	1	; () banked
  9979  0014A0  51C8               	movf	(_timecount+1)& (0+255),w,b
  9980  0014A2  0100               	movlb	0	; () banked
  9981  0014A4  23A2               	addwfc	(??_ESP_Initialize+1)& (0+255),f,b
  9982  0014A6  0E10               	movlw	16
  9983  0014A8  5DA1               	subwf	??_ESP_Initialize& (0+255),w,b
  9984  0014AA  0E27               	movlw	39
  9985  0014AC  59A2               	subwfb	(??_ESP_Initialize+1)& (0+255),w,b
  9986  0014AE  B0D8               	btfsc	status,0,c
  9987  0014B0  D011               	goto	l733
  9988                           
  9989                           ; BSR set to: 0
  9990                           ;main.c: 347: ESP_TASK = 5;
  9991  0014B2  0E00               	movlw	0
  9992  0014B4  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
  9993  0014B6  0E05               	movlw	5
  9994  0014B8  D010               	goto	L14
  9995  0014BA                     
  9996                           ; BSR set to: 0
  9997                           ;main.c: 365: esp8266_SLEEP(0);
  9998                           
  9999                           ; BSR set to: 0
 10000  0014BA  0E00               	movlw	0
 10001  0014BC  ECA5  F013         	call	_esp8266_SLEEP
 10002                           
 10003                           ;main.c: 366: ESP_flag =1;
 10004  0014C0  0E00               	movlw	0
 10005  0014C2  0101               	movlb	1	; () banked
 10006  0014C4  6FC6               	movwf	(_ESP_flag+1)& (0+255),b
 10007  0014C6  0E01               	movlw	1
 10008  0014C8  6FC5               	movwf	_ESP_flag& (0+255),b
 10009                           
 10010                           ; BSR set to: 1
 10011                           ;main.c: 367: ESP_TASK = 7;
 10012  0014CA  0E00               	movlw	0
 10013  0014CC  0100               	movlb	0	; () banked
 10014  0014CE  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
 10015  0014D0  0E07               	movlw	7
 10016  0014D2  D003               	goto	L14
 10017  0014D4                     l733:
 10018                           
 10019                           ; BSR set to: 0
 10020                           ;main.c: 371: ESP_TASK = 6;
 10021                           
 10022                           ; BSR set to: 0
 10023  0014D4  0E00               	movlw	0
 10024  0014D6  6FAE               	movwf	(ESP_Initialize@ESP_TASK+1)& (0+255),b
 10025  0014D8  0E06               	movlw	6
 10026  0014DA                     L14:
 10027  0014DA  6FAD               	movwf	ESP_Initialize@ESP_TASK& (0+255),b
 10028                           
 10029                           ; BSR set to: 0
 10030                           ;main.c: 373: }
 10031                           
 10032                           ;main.c: 372: break;
 10033  0014DC  D01C               	goto	l719
 10034  0014DE                     
 10035                           ; BSR set to: 0
 10036                           
 10037                           ; BSR set to: 0
 10038  0014DE  C0AD  F0A1         	movff	ESP_Initialize@ESP_TASK,??_ESP_Initialize
 10039  0014E2  C0AE  F0A2         	movff	ESP_Initialize@ESP_TASK+1,??_ESP_Initialize+1
 10040                           
 10041                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10042                           ; Switch size 1, requested type "space"
 10043                           ; Number of cases is 1, Range of values is 0 to 0
 10044                           ; switch strategies available:
 10045                           ; Name         Instructions Cycles
 10046                           ; simple_byte            4     3 (average)
 10047                           ;	Chosen strategy is simple_byte
 10048  0014E6  51A2               	movf	(??_ESP_Initialize+1)& (0+255),w,b
 10049  0014E8  0A00               	xorlw	0	; case 0
 10050  0014EA  A4D8               	btfss	status,2,c
 10051  0014EC  D7F3               	goto	l733
 10052                           
 10053                           ; BSR set to: 0
 10054                           ; Switch size 1, requested type "space"
 10055                           ; Number of cases is 6, Range of values is 1 to 6
 10056                           ; switch strategies available:
 10057                           ; Name         Instructions Cycles
 10058                           ; simple_byte           19    10 (average)
 10059                           ;	Chosen strategy is simple_byte
 10060  0014EE  51A1               	movf	??_ESP_Initialize& (0+255),w,b
 10061  0014F0  0A01               	xorlw	1	; case 1
 10062  0014F2  B4D8               	btfsc	status,2,c
 10063  0014F4  D740               	goto	l718
 10064  0014F6  0A03               	xorlw	3	; case 2
 10065  0014F8  B4D8               	btfsc	status,2,c
 10066  0014FA  D749               	goto	l720
 10067  0014FC  0A01               	xorlw	1	; case 3
 10068  0014FE  B4D8               	btfsc	status,2,c
 10069  001500  D777               	goto	l723
 10070  001502  0A07               	xorlw	7	; case 4
 10071  001504  B4D8               	btfsc	status,2,c
 10072  001506  D797               	goto	l726
 10073  001508  0A01               	xorlw	1	; case 5
 10074  00150A  B4D8               	btfsc	status,2,c
 10075  00150C  D7BB               	goto	l729
 10076  00150E  0A03               	xorlw	3	; case 6
 10077  001510  B4D8               	btfsc	status,2,c
 10078  001512  D7D3               	goto	l732
 10079  001514  D7DF               	goto	l733
 10080  001516                     l719:
 10081                           
 10082                           ; BSR set to: 0
 10083                           
 10084                           ; BSR set to: 0
 10085  001516  0E07               	movlw	7
 10086  001518  0100               	movlb	0	; () banked
 10087  00151A  19AD               	xorwf	ESP_Initialize@ESP_TASK& (0+255),w,b
 10088  00151C  11AE               	iorwf	(ESP_Initialize@ESP_TASK+1)& (0+255),w,b
 10089  00151E  B4D8               	btfsc	status,2,c
 10090  001520  0012               	return	
 10091  001522  D7DD               	goto	l717
 10092  001524                     __end_of_ESP_Initialize:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           intcon2	equ	0xFF1
 10102                           indf0	equ	0xFEF
 10103                           postinc0	equ	0xFEE
 10104                           fsr0h	equ	0xFEA
 10105                           fsr0l	equ	0xFE9
 10106                           wreg	equ	0xFE8
 10107                           indf1	equ	0xFE7
 10108                           postdec1	equ	0xFE5
 10109                           plusw1	equ	0xFE3
 10110                           fsr1h	equ	0xFE2
 10111                           fsr1l	equ	0xFE1
 10112                           indf2	equ	0xFDF
 10113                           postinc2	equ	0xFDE
 10114                           postdec2	equ	0xFDD
 10115                           plusw2	equ	0xFDB
 10116                           fsr2h	equ	0xFDA
 10117                           fsr2l	equ	0xFD9
 10118                           status	equ	0xFD8
 10119                           
 10120 ;; *************** function _esp8266_server *****************
 10121 ;; Defined at:
 10122 ;;		line 350 in file "mcc_generated_files/esp8266.c"
 10123 ;; Parameters:    Size  Location     Type
 10124 ;;  mode            1    wreg     unsigned char 
 10125 ;; Auto vars:     Size  Location     Type
 10126 ;;  mode            1   56[COMRAM] unsigned char 
 10127 ;; Return value:  Size  Location     Type
 10128 ;;                  1    wreg      unsigned char 
 10129 ;; Registers used:
 10130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10131 ;; Tracked objects:
 10132 ;;		On entry : 0/0
 10133 ;;		On exit  : 0/0
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10136 ;;      Params:         0       0       0       0       0       0       0
 10137 ;;      Locals:         1       0       0       0       0       0       0
 10138 ;;      Temps:          0       0       0       0       0       0       0
 10139 ;;      Totals:         1       0       0       0       0       0       0
 10140 ;;Total ram usage:        1 bytes
 10141 ;; Hardware stack levels used:    1
 10142 ;; Hardware stack levels required when called:    4
 10143 ;; This function calls:
 10144 ;;		_EUSART1_Write
 10145 ;;		__esp8266_print
 10146 ;;		__esp8266_waitResponse
 10147 ;; This function is called by:
 10148 ;;		_ESP_Initialize
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           	psect	text49
 10153  0023AA                     __ptext49:
 10154                           	opt stack 0
 10155  0023AA                     _esp8266_server:
 10156                           	opt stack 25
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;incstack = 0
 10160                           ;esp8266_server@mode stored from wreg
 10161  0023AA  6E39               	movwf	esp8266_server@mode,c
 10162                           
 10163                           ;esp8266.c: 351: _esp8266_print("AT+CIPSERVER=");
 10164  0023AC  0E3F               	movlw	low STR_34
 10165  0023AE  6E14               	movwf	__esp8266_print@ptr,c
 10166  0023B0  0E7F               	movlw	high STR_34
 10167  0023B2  6E15               	movwf	__esp8266_print@ptr+1,c
 10168  0023B4  EC60  F011         	call	__esp8266_print	;wreg free
 10169                           
 10170                           ;esp8266.c: 352: EUSART1_Write(mode + '0');
 10171  0023B8  5039               	movf	esp8266_server@mode,w,c
 10172  0023BA  0F30               	addlw	48
 10173  0023BC  ECB7  F012         	call	_EUSART1_Write
 10174                           
 10175                           ;esp8266.c: 353: EUSART1_Write(',');
 10176  0023C0  0E2C               	movlw	44
 10177  0023C2  ECB7  F012         	call	_EUSART1_Write
 10178                           
 10179                           ;esp8266.c: 354: EUSART1_Write('8');
 10180  0023C6  0E38               	movlw	56
 10181  0023C8  ECB7  F012         	call	_EUSART1_Write
 10182                           
 10183                           ;esp8266.c: 355: EUSART1_Write('0');
 10184  0023CC  0E30               	movlw	48
 10185  0023CE  ECB7  F012         	call	_EUSART1_Write
 10186                           
 10187                           ;esp8266.c: 356: EUSART1_Write('8');
 10188  0023D2  0E38               	movlw	56
 10189  0023D4  ECB7  F012         	call	_EUSART1_Write
 10190                           
 10191                           ;esp8266.c: 357: EUSART1_Write('0');
 10192  0023D8  0E30               	movlw	48
 10193  0023DA  ECB7  F012         	call	_EUSART1_Write
 10194                           
 10195                           ;esp8266.c: 359: _esp8266_print("\r\n");
 10196  0023DE  0ECD               	movlw	low (STR_26+2)
 10197  0023E0  6E14               	movwf	__esp8266_print@ptr,c
 10198  0023E2  0E7F               	movlw	high (STR_26+2)
 10199  0023E4  6E15               	movwf	__esp8266_print@ptr+1,c
 10200  0023E6  EC60  F011         	call	__esp8266_print	;wreg free
 10201                           
 10202                           ;esp8266.c: 360: return _esp8266_waitResponse();
 10203                           ;	Return value of _esp8266_server is never used
 10204  0023EA  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
 10205  0023EE  0012               	return	
 10206  0023F0                     __end_of_esp8266_server:
 10207                           	opt stack 0
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           intcon	equ	0xFF2
 10215                           intcon2	equ	0xFF1
 10216                           indf0	equ	0xFEF
 10217                           postinc0	equ	0xFEE
 10218                           fsr0h	equ	0xFEA
 10219                           fsr0l	equ	0xFE9
 10220                           wreg	equ	0xFE8
 10221                           indf1	equ	0xFE7
 10222                           postdec1	equ	0xFE5
 10223                           plusw1	equ	0xFE3
 10224                           fsr1h	equ	0xFE2
 10225                           fsr1l	equ	0xFE1
 10226                           indf2	equ	0xFDF
 10227                           postinc2	equ	0xFDE
 10228                           postdec2	equ	0xFDD
 10229                           plusw2	equ	0xFDB
 10230                           fsr2h	equ	0xFDA
 10231                           fsr2l	equ	0xFD9
 10232                           status	equ	0xFD8
 10233                           
 10234 ;; *************** function _esp8266_mode *****************
 10235 ;; Defined at:
 10236 ;;		line 100 in file "mcc_generated_files/esp8266.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;  mode            1    wreg     unsigned char 
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  mode            1   56[COMRAM] unsigned char 
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      void 
 10243 ;; Registers used:
 10244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10245 ;; Tracked objects:
 10246 ;;		On entry : 0/0
 10247 ;;		On exit  : 0/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10250 ;;      Params:         0       0       0       0       0       0       0
 10251 ;;      Locals:         1       0       0       0       0       0       0
 10252 ;;      Temps:          0       0       0       0       0       0       0
 10253 ;;      Totals:         1       0       0       0       0       0       0
 10254 ;;Total ram usage:        1 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; Hardware stack levels required when called:    4
 10257 ;; This function calls:
 10258 ;;		_EUSART1_Write
 10259 ;;		__esp8266_print
 10260 ;;		__esp8266_waitResponse
 10261 ;; This function is called by:
 10262 ;;		_ESP_Initialize
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           	psect	text50
 10267  002722                     __ptext50:
 10268                           	opt stack 0
 10269  002722                     _esp8266_mode:
 10270                           	opt stack 25
 10271                           
 10272                           ;incstack = 0
 10273                           ;esp8266_mode@mode stored from wreg
 10274  002722  6E39               	movwf	esp8266_mode@mode,c
 10275                           
 10276                           ;esp8266.c: 101: _esp8266_print("AT+CWMODE=");
 10277  002724  0E6E               	movlw	low STR_6
 10278  002726  6E14               	movwf	__esp8266_print@ptr,c
 10279  002728  0E7F               	movlw	high STR_6
 10280  00272A  6E15               	movwf	__esp8266_print@ptr+1,c
 10281  00272C  EC60  F011         	call	__esp8266_print	;wreg free
 10282                           
 10283                           ;esp8266.c: 102: EUSART1_Write(mode + '0');
 10284  002730  5039               	movf	esp8266_mode@mode,w,c
 10285  002732  0F30               	addlw	48
 10286  002734  ECB7  F012         	call	_EUSART1_Write
 10287                           
 10288                           ;esp8266.c: 103: _esp8266_print("\r\n");
 10289  002738  0ECD               	movlw	low (STR_26+2)
 10290  00273A  6E14               	movwf	__esp8266_print@ptr,c
 10291  00273C  0E7F               	movlw	high (STR_26+2)
 10292  00273E  6E15               	movwf	__esp8266_print@ptr+1,c
 10293  002740  EC60  F011         	call	__esp8266_print	;wreg free
 10294                           
 10295                           ;esp8266.c: 104: _esp8266_waitResponse();
 10296  002744  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
 10297  002748  0012               	return		;funcret
 10298  00274A                     __end_of_esp8266_mode:
 10299                           	opt stack 0
 10300                           tblptru	equ	0xFF8
 10301                           tblptrh	equ	0xFF7
 10302                           tblptrl	equ	0xFF6
 10303                           tablat	equ	0xFF5
 10304                           prodh	equ	0xFF4
 10305                           prodl	equ	0xFF3
 10306                           intcon	equ	0xFF2
 10307                           intcon2	equ	0xFF1
 10308                           indf0	equ	0xFEF
 10309                           postinc0	equ	0xFEE
 10310                           fsr0h	equ	0xFEA
 10311                           fsr0l	equ	0xFE9
 10312                           wreg	equ	0xFE8
 10313                           indf1	equ	0xFE7
 10314                           postdec1	equ	0xFE5
 10315                           plusw1	equ	0xFE3
 10316                           fsr1h	equ	0xFE2
 10317                           fsr1l	equ	0xFE1
 10318                           indf2	equ	0xFDF
 10319                           postinc2	equ	0xFDE
 10320                           postdec2	equ	0xFDD
 10321                           plusw2	equ	0xFDB
 10322                           fsr2h	equ	0xFDA
 10323                           fsr2l	equ	0xFD9
 10324                           status	equ	0xFD8
 10325                           
 10326 ;; *************** function _esp8266_isStarted *****************
 10327 ;; Defined at:
 10328 ;;		line 48 in file "mcc_generated_files/esp8266.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;		None
 10333 ;; Return value:  Size  Location     Type
 10334 ;;		None               void
 10335 ;; Registers used:
 10336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10342 ;;      Params:         0       0       0       0       0       0       0
 10343 ;;      Locals:         0       0       0       0       0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0
 10345 ;;      Totals:         0       0       0       0       0       0       0
 10346 ;;Total ram usage:        0 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:    4
 10349 ;; This function calls:
 10350 ;;		__esp8266_print
 10351 ;;		__esp8266_waitResponse
 10352 ;; This function is called by:
 10353 ;;		_ESP_Initialize
 10354 ;; This function uses a non-reentrant model
 10355 ;;
 10356                           
 10357                           	psect	text51
 10358  0028C6                     __ptext51:
 10359                           	opt stack 0
 10360  0028C6                     _esp8266_isStarted:
 10361                           	opt stack 25
 10362                           
 10363                           ;esp8266.c: 49: _esp8266_print("AT\r\n");
 10364                           
 10365                           ;incstack = 0
 10366  0028C6  0ED0               	movlw	low STR_1
 10367  0028C8  6E14               	movwf	__esp8266_print@ptr,c
 10368  0028CA  0E7F               	movlw	high STR_1
 10369  0028CC  6E15               	movwf	__esp8266_print@ptr+1,c
 10370  0028CE  EC60  F011         	call	__esp8266_print	;wreg free
 10371                           
 10372                           ;esp8266.c: 50: return (_esp8266_waitResponse() == 1);
 10373                           ;	Return value of _esp8266_isStarted is never used
 10374  0028D2  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
 10375  0028D6  0012               	return	
 10376  0028D8                     __end_of_esp8266_isStarted:
 10377                           	opt stack 0
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           prodh	equ	0xFF4
 10383                           prodl	equ	0xFF3
 10384                           intcon	equ	0xFF2
 10385                           intcon2	equ	0xFF1
 10386                           indf0	equ	0xFEF
 10387                           postinc0	equ	0xFEE
 10388                           fsr0h	equ	0xFEA
 10389                           fsr0l	equ	0xFE9
 10390                           wreg	equ	0xFE8
 10391                           indf1	equ	0xFE7
 10392                           postdec1	equ	0xFE5
 10393                           plusw1	equ	0xFE3
 10394                           fsr1h	equ	0xFE2
 10395                           fsr1l	equ	0xFE1
 10396                           indf2	equ	0xFDF
 10397                           postinc2	equ	0xFDE
 10398                           postdec2	equ	0xFDD
 10399                           plusw2	equ	0xFDB
 10400                           fsr2h	equ	0xFDA
 10401                           fsr2l	equ	0xFD9
 10402                           status	equ	0xFD8
 10403                           
 10404 ;; *************** function _esp8266_connect *****************
 10405 ;; Defined at:
 10406 ;;		line 116 in file "mcc_generated_files/esp8266.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  ssid            2    0[BANK0 ] PTR unsigned char 
 10409 ;;		 -> STR_43(4), 
 10410 ;;  pass            2    2[BANK0 ] PTR unsigned char 
 10411 ;;		 -> STR_44(10), 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  1    wreg      unsigned char 
 10416 ;; Registers used:
 10417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10423 ;;      Params:         0       4       0       0       0       0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0
 10425 ;;      Temps:          0       0       0       0       0       0       0
 10426 ;;      Totals:         0       4       0       0       0       0       0
 10427 ;;Total ram usage:        4 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    4
 10430 ;; This function calls:
 10431 ;;		__esp8266_print
 10432 ;;		__esp8266_waitResponse
 10433 ;; This function is called by:
 10434 ;;		_ESP_Initialize
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text52
 10439  0024B6                     __ptext52:
 10440                           	opt stack 0
 10441  0024B6                     _esp8266_connect:
 10442                           	opt stack 25
 10443                           
 10444                           ;esp8266.c: 117: _esp8266_print("AT+CWJAP=\"");
 10445                           
 10446                           ;incstack = 0
 10447  0024B6  0E63               	movlw	low STR_8
 10448  0024B8  6E14               	movwf	__esp8266_print@ptr,c
 10449  0024BA  0E7F               	movlw	high STR_8
 10450  0024BC  6E15               	movwf	__esp8266_print@ptr+1,c
 10451  0024BE  EC60  F011         	call	__esp8266_print	;wreg free
 10452                           
 10453                           ;esp8266.c: 118: _esp8266_print(ssid);
 10454  0024C2  C09D  F014         	movff	esp8266_connect@ssid,__esp8266_print@ptr
 10455  0024C6  C09E  F015         	movff	esp8266_connect@ssid+1,__esp8266_print@ptr+1
 10456  0024CA  EC60  F011         	call	__esp8266_print	;wreg free
 10457                           
 10458                           ;esp8266.c: 119: _esp8266_print("\",\"");
 10459  0024CE  0EE2               	movlw	low STR_9
 10460  0024D0  6E14               	movwf	__esp8266_print@ptr,c
 10461  0024D2  0E7F               	movlw	high STR_9
 10462  0024D4  6E15               	movwf	__esp8266_print@ptr+1,c
 10463  0024D6  EC60  F011         	call	__esp8266_print	;wreg free
 10464                           
 10465                           ;esp8266.c: 120: _esp8266_print(pass);
 10466  0024DA  C09F  F014         	movff	esp8266_connect@pass,__esp8266_print@ptr
 10467  0024DE  C0A0  F015         	movff	esp8266_connect@pass+1,__esp8266_print@ptr+1
 10468  0024E2  EC60  F011         	call	__esp8266_print	;wreg free
 10469                           
 10470                           ;esp8266.c: 121: _esp8266_print("\"\r\n");
 10471  0024E6  0EDE               	movlw	low STR_10
 10472  0024E8  6E14               	movwf	__esp8266_print@ptr,c
 10473  0024EA  0E7F               	movlw	high STR_10
 10474  0024EC  6E15               	movwf	__esp8266_print@ptr+1,c
 10475  0024EE  EC60  F011         	call	__esp8266_print	;wreg free
 10476                           
 10477                           ;esp8266.c: 122: return _esp8266_waitResponse();
 10478                           ;	Return value of _esp8266_connect is never used
 10479  0024F2  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
 10480  0024F6  0012               	return	
 10481  0024F8                     __end_of_esp8266_connect:
 10482                           	opt stack 0
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           intcon2	equ	0xFF1
 10491                           indf0	equ	0xFEF
 10492                           postinc0	equ	0xFEE
 10493                           fsr0h	equ	0xFEA
 10494                           fsr0l	equ	0xFE9
 10495                           wreg	equ	0xFE8
 10496                           indf1	equ	0xFE7
 10497                           postdec1	equ	0xFE5
 10498                           plusw1	equ	0xFE3
 10499                           fsr1h	equ	0xFE2
 10500                           fsr1l	equ	0xFE1
 10501                           indf2	equ	0xFDF
 10502                           postinc2	equ	0xFDE
 10503                           postdec2	equ	0xFDD
 10504                           plusw2	equ	0xFDB
 10505                           fsr2h	equ	0xFDA
 10506                           fsr2l	equ	0xFD9
 10507                           status	equ	0xFD8
 10508                           
 10509 ;; *************** function _esp8266_SLEEP *****************
 10510 ;; Defined at:
 10511 ;;		line 372 in file "mcc_generated_files/esp8266.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;  mode            1    wreg     unsigned char 
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;  mode            1   56[COMRAM] unsigned char 
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      void 
 10518 ;; Registers used:
 10519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10525 ;;      Params:         0       0       0       0       0       0       0
 10526 ;;      Locals:         1       0       0       0       0       0       0
 10527 ;;      Temps:          0       0       0       0       0       0       0
 10528 ;;      Totals:         1       0       0       0       0       0       0
 10529 ;;Total ram usage:        1 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    4
 10532 ;; This function calls:
 10533 ;;		_EUSART1_Write
 10534 ;;		__esp8266_print
 10535 ;;		__esp8266_waitResponse
 10536 ;; This function is called by:
 10537 ;;		_ESP_Initialize
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           	psect	text53
 10542  00274A                     __ptext53:
 10543                           	opt stack 0
 10544  00274A                     _esp8266_SLEEP:
 10545                           	opt stack 25
 10546                           
 10547                           ;incstack = 0
 10548                           ;esp8266_SLEEP@mode stored from wreg
 10549  00274A  6E39               	movwf	esp8266_SLEEP@mode,c
 10550                           
 10551                           ;esp8266.c: 373: _esp8266_print("AT+SLEEP=");
 10552  00274C  0E8E               	movlw	low STR_38
 10553  00274E  6E14               	movwf	__esp8266_print@ptr,c
 10554  002750  0E7F               	movlw	high STR_38
 10555  002752  6E15               	movwf	__esp8266_print@ptr+1,c
 10556  002754  EC60  F011         	call	__esp8266_print	;wreg free
 10557                           
 10558                           ;esp8266.c: 374: EUSART1_Write(mode + '0');
 10559  002758  5039               	movf	esp8266_SLEEP@mode,w,c
 10560  00275A  0F30               	addlw	48
 10561  00275C  ECB7  F012         	call	_EUSART1_Write
 10562                           
 10563                           ;esp8266.c: 375: _esp8266_print("\r\n");
 10564  002760  0ECD               	movlw	low (STR_26+2)
 10565  002762  6E14               	movwf	__esp8266_print@ptr,c
 10566  002764  0E7F               	movlw	high (STR_26+2)
 10567  002766  6E15               	movwf	__esp8266_print@ptr+1,c
 10568  002768  EC60  F011         	call	__esp8266_print	;wreg free
 10569                           
 10570                           ;esp8266.c: 376: _esp8266_waitResponse();
 10571  00276C  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
 10572  002770  0012               	return		;funcret
 10573  002772                     __end_of_esp8266_SLEEP:
 10574                           	opt stack 0
 10575                           tblptru	equ	0xFF8
 10576                           tblptrh	equ	0xFF7
 10577                           tblptrl	equ	0xFF6
 10578                           tablat	equ	0xFF5
 10579                           prodh	equ	0xFF4
 10580                           prodl	equ	0xFF3
 10581                           intcon	equ	0xFF2
 10582                           intcon2	equ	0xFF1
 10583                           indf0	equ	0xFEF
 10584                           postinc0	equ	0xFEE
 10585                           fsr0h	equ	0xFEA
 10586                           fsr0l	equ	0xFE9
 10587                           wreg	equ	0xFE8
 10588                           indf1	equ	0xFE7
 10589                           postdec1	equ	0xFE5
 10590                           plusw1	equ	0xFE3
 10591                           fsr1h	equ	0xFE2
 10592                           fsr1l	equ	0xFE1
 10593                           indf2	equ	0xFDF
 10594                           postinc2	equ	0xFDE
 10595                           postdec2	equ	0xFDD
 10596                           plusw2	equ	0xFDB
 10597                           fsr2h	equ	0xFDA
 10598                           fsr2l	equ	0xFD9
 10599                           status	equ	0xFD8
 10600                           
 10601 ;; *************** function _esp8266_CIPMUX *****************
 10602 ;; Defined at:
 10603 ;;		line 364 in file "mcc_generated_files/esp8266.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;  mode            1    wreg     unsigned char 
 10606 ;; Auto vars:     Size  Location     Type
 10607 ;;  mode            1   56[COMRAM] unsigned char 
 10608 ;; Return value:  Size  Location     Type
 10609 ;;                  1    wreg      void 
 10610 ;; Registers used:
 10611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10612 ;; Tracked objects:
 10613 ;;		On entry : 0/0
 10614 ;;		On exit  : 0/0
 10615 ;;		Unchanged: 0/0
 10616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10617 ;;      Params:         0       0       0       0       0       0       0
 10618 ;;      Locals:         1       0       0       0       0       0       0
 10619 ;;      Temps:          0       0       0       0       0       0       0
 10620 ;;      Totals:         1       0       0       0       0       0       0
 10621 ;;Total ram usage:        1 bytes
 10622 ;; Hardware stack levels used:    1
 10623 ;; Hardware stack levels required when called:    4
 10624 ;; This function calls:
 10625 ;;		_EUSART1_Write
 10626 ;;		__esp8266_print
 10627 ;;		__esp8266_waitResponse
 10628 ;; This function is called by:
 10629 ;;		_ESP_Initialize
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           	psect	text54
 10634  002772                     __ptext54:
 10635                           	opt stack 0
 10636  002772                     _esp8266_CIPMUX:
 10637                           	opt stack 25
 10638                           
 10639                           ;incstack = 0
 10640                           ;esp8266_CIPMUX@mode stored from wreg
 10641  002772  6E39               	movwf	esp8266_CIPMUX@mode,c
 10642                           
 10643                           ;esp8266.c: 365: _esp8266_print("AT+CIPMUX=");
 10644  002774  0E79               	movlw	low STR_36
 10645  002776  6E14               	movwf	__esp8266_print@ptr,c
 10646  002778  0E7F               	movlw	high STR_36
 10647  00277A  6E15               	movwf	__esp8266_print@ptr+1,c
 10648  00277C  EC60  F011         	call	__esp8266_print	;wreg free
 10649                           
 10650                           ;esp8266.c: 366: EUSART1_Write(mode + '0');
 10651  002780  5039               	movf	esp8266_CIPMUX@mode,w,c
 10652  002782  0F30               	addlw	48
 10653  002784  ECB7  F012         	call	_EUSART1_Write
 10654                           
 10655                           ;esp8266.c: 367: _esp8266_print("\r\n");
 10656  002788  0ECD               	movlw	low (STR_26+2)
 10657  00278A  6E14               	movwf	__esp8266_print@ptr,c
 10658  00278C  0E7F               	movlw	high (STR_26+2)
 10659  00278E  6E15               	movwf	__esp8266_print@ptr+1,c
 10660  002790  EC60  F011         	call	__esp8266_print	;wreg free
 10661                           
 10662                           ;esp8266.c: 368: _esp8266_waitResponse();
 10663  002794  EC02  F00C         	call	__esp8266_waitResponse	;wreg free
 10664  002798  0012               	return		;funcret
 10665  00279A                     __end_of_esp8266_CIPMUX:
 10666                           	opt stack 0
 10667                           tblptru	equ	0xFF8
 10668                           tblptrh	equ	0xFF7
 10669                           tblptrl	equ	0xFF6
 10670                           tablat	equ	0xFF5
 10671                           prodh	equ	0xFF4
 10672                           prodl	equ	0xFF3
 10673                           intcon	equ	0xFF2
 10674                           intcon2	equ	0xFF1
 10675                           indf0	equ	0xFEF
 10676                           postinc0	equ	0xFEE
 10677                           fsr0h	equ	0xFEA
 10678                           fsr0l	equ	0xFE9
 10679                           wreg	equ	0xFE8
 10680                           indf1	equ	0xFE7
 10681                           postdec1	equ	0xFE5
 10682                           plusw1	equ	0xFE3
 10683                           fsr1h	equ	0xFE2
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           postdec2	equ	0xFDD
 10688                           plusw2	equ	0xFDB
 10689                           fsr2h	equ	0xFDA
 10690                           fsr2l	equ	0xFD9
 10691                           status	equ	0xFD8
 10692                           
 10693 ;; *************** function __esp8266_waitResponse *****************
 10694 ;; Defined at:
 10695 ;;		line 321 in file "mcc_generated_files/esp8266.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;		None
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;  i               1   55[COMRAM] unsigned char 
 10700 ;;  strings        12   22[COMRAM] PTR const unsigned char 
 10701 ;;		 -> STR_33(7), STR_32(7), STR_31(10), STR_30(5), 
 10702 ;;		 -> STR_29(6), STR_28(3), 
 10703 ;;  so_far          6   46[COMRAM] unsigned char [6]
 10704 ;;  responses       6   40[COMRAM] const unsigned char [6]
 10705 ;;  lengths         6   34[COMRAM] const unsigned char [6]
 10706 ;;  continue_loo    1   54[COMRAM] unsigned char 
 10707 ;;  response        1   53[COMRAM] unsigned char 
 10708 ;;  received        1   52[COMRAM] unsigned char 
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      unsigned char 
 10711 ;; Registers used:
 10712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10718 ;;      Params:         0       0       0       0       0       0       0
 10719 ;;      Locals:        34       0       0       0       0       0       0
 10720 ;;      Temps:          3       0       0       0       0       0       0
 10721 ;;      Totals:        37       0       0       0       0       0       0
 10722 ;;Total ram usage:       37 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    3
 10725 ;; This function calls:
 10726 ;;		_EUSART1_Read
 10727 ;; This function is called by:
 10728 ;;		_esp8266_isStarted
 10729 ;;		_esp8266_mode
 10730 ;;		_esp8266_connect
 10731 ;;		_esp8266_send
 10732 ;;		_esp8266_server
 10733 ;;		_esp8266_CIPMUX
 10734 ;;		_esp8266_SLEEP
 10735 ;;		_esp8266_restart
 10736 ;;		_esp8266_start
 10737 ;;		_esp8266_test
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           	psect	text55
 10742  001804                     __ptext55:
 10743                           	opt stack 0
 10744  001804                     __esp8266_waitResponse:
 10745                           	opt stack 26
 10746                           
 10747                           ;esp8266.c: 322: unsigned char so_far[6] = {0,0,0,0,0,0};
 10748                           
 10749                           ;incstack = 0
 10750  001804  EE20  F080         	lfsr	2,__esp8266_waitResponse@F7010
 10751  001808  EE10  F02F         	lfsr	1,__esp8266_waitResponse@so_far
 10752  00180C  0E05               	movlw	5
 10753  00180E                     u5401:
 10754  00180E  CFDB FFE3          	movff	plusw2,plusw1
 10755  001812  06E8               	decf	wreg,f,c
 10756  001814  E2FC               	bc	u5401
 10757                           
 10758                           ;esp8266.c: 323: unsigned const char lengths[6] = {2,5,4,9,6,6};
 10759  001816  0E0D               	movlw	low __esp8266_waitResponse@F7012
 10760  001818  6EF6               	movwf	tblptrl,c
 10761  00181A                     	if	1	;There is more than 1 active tblptr byte
 10762  00181A  0E7F               	movlw	high __esp8266_waitResponse@F7012
 10763  00181C  6EF7               	movwf	tblptrh,c
 10764  00181E                     	endif
 10765  00181E                     	if	0	;There are less than 3 active tblptr bytes
 10766  00181E                     	endif
 10767  00181E  EE20  F023         	lfsr	2,__esp8266_waitResponse@lengths
 10768  001822  0E05               	movlw	5
 10769  001824                     u5410:
 10770  001824  0009               	tblrd		*+
 10771  001826  CFF5 FFDE          	movff	tablat,postinc2
 10772  00182A  06E8               	decf	wreg,f,c
 10773  00182C  E2FB               	bc	u5410
 10774                           
 10775                           ;esp8266.c: 324: unsigned const char* strings[6] = {"OK", "ready", "FAIL", "no change", 
      +                          "Linked", "Unlink"};
 10776  00182E  EE20  F0DA         	lfsr	2,__esp8266_waitResponse@F7014
 10777  001832  EE10  F017         	lfsr	1,__esp8266_waitResponse@strings
 10778  001836  0E0B               	movlw	11
 10779  001838                     u5421:
 10780  001838  CFDB FFE3          	movff	plusw2,plusw1
 10781  00183C  06E8               	decf	wreg,f,c
 10782  00183E  E2FC               	bc	u5421
 10783                           
 10784                           ;esp8266.c: 325: unsigned const char responses[6] = {1, 2, 3, 4, 5, 6};
 10785  001840  0E07               	movlw	low __esp8266_waitResponse@F7016
 10786  001842  6EF6               	movwf	tblptrl,c
 10787  001844                     	if	1	;There is more than 1 active tblptr byte
 10788  001844  0E7F               	movlw	high __esp8266_waitResponse@F7016
 10789  001846  6EF7               	movwf	tblptrh,c
 10790  001848                     	endif
 10791  001848                     	if	0	;There are less than 3 active tblptr bytes
 10792  001848                     	endif
 10793  001848  EE20  F029         	lfsr	2,__esp8266_waitResponse@responses
 10794  00184C  0E05               	movlw	5
 10795  00184E                     u5430:
 10796  00184E  0009               	tblrd		*+
 10797  001850  CFF5 FFDE          	movff	tablat,postinc2
 10798  001854  06E8               	decf	wreg,f,c
 10799  001856  E2FB               	bc	u5430
 10800                           
 10801                           ;esp8266.c: 326: unsigned char received;
 10802                           ;esp8266.c: 327: unsigned char response;
 10803                           ;esp8266.c: 328: bool continue_loop = 1;
 10804  001858  0E01               	movlw	1
 10805  00185A  6E37               	movwf	__esp8266_waitResponse@continue_loop,c
 10806                           
 10807                           ;esp8266.c: 329: while (continue_loop) {
 10808  00185C  D064               	goto	u5470
 10809  00185E                     
 10810                           ;esp8266.c: 330: received = EUSART1_Read();
 10811  00185E  ECF0  F012         	call	_EUSART1_Read	;wreg free
 10812  001862  6E35               	movwf	__esp8266_waitResponse@received,c
 10813                           
 10814                           ;esp8266.c: 331: for (unsigned char i = 0; i < 6; i++) {
 10815  001864  0E00               	movlw	0
 10816  001866  6E38               	movwf	__esp8266_waitResponse@i,c
 10817  001868                     l5562:
 10818  001868  0E05               	movlw	5
 10819  00186A  6438               	cpfsgt	__esp8266_waitResponse@i,c
 10820  00186C  D001               	goto	l433
 10821  00186E  D05B               	goto	u5470
 10822  001870                     l433:
 10823                           
 10824                           ;esp8266.c: 332: if (strings[i][so_far[i]] == received) {
 10825  001870  5038               	movf	__esp8266_waitResponse@i,w,c
 10826  001872  0D02               	mullw	2
 10827  001874  0E17               	movlw	low __esp8266_waitResponse@strings
 10828  001876  24F3               	addwf	prodl,w,c
 10829  001878  6ED9               	movwf	fsr2l,c
 10830  00187A  0E00               	movlw	high __esp8266_waitResponse@strings
 10831  00187C  20F4               	addwfc	prodh,w,c
 10832  00187E  6EDA               	movwf	fsr2h,c
 10833  001880  CFDE F014          	movff	postinc2,??__esp8266_waitResponse
 10834  001884  CFDD F015          	movff	postdec2,??__esp8266_waitResponse+1
 10835  001888  5038               	movf	__esp8266_waitResponse@i,w,c
 10836  00188A  0D01               	mullw	1
 10837  00188C  0E2F               	movlw	low __esp8266_waitResponse@so_far
 10838  00188E  24F3               	addwf	prodl,w,c
 10839  001890  6ED9               	movwf	fsr2l,c
 10840  001892  0E00               	movlw	high __esp8266_waitResponse@so_far
 10841  001894  20F4               	addwfc	prodh,w,c
 10842  001896  6EDA               	movwf	fsr2h,c
 10843  001898  50DF               	movf	indf2,w,c
 10844  00189A  6E16               	movwf	(??__esp8266_waitResponse+2)& (0+255),c
 10845  00189C  5016               	movf	??__esp8266_waitResponse+2,w,c
 10846  00189E  0D01               	mullw	1
 10847  0018A0  50F3               	movf	prodl,w,c
 10848  0018A2  2614               	addwf	??__esp8266_waitResponse,f,c
 10849  0018A4  50F4               	movf	prodh,w,c
 10850  0018A6  2215               	addwfc	??__esp8266_waitResponse+1,f,c
 10851  0018A8  C014  FFF6         	movff	??__esp8266_waitResponse,tblptrl
 10852  0018AC  C015  FFF7         	movff	??__esp8266_waitResponse+1,tblptrh
 10853  0018B0                     	if	0	;tblptru may be non-zero
 10854  0018B0                     	endif
 10855  0018B0                     	if	0	;tblptru may be non-zero
 10856  0018B0                     	endif
 10857  0018B0  0008               	tblrd		*
 10858  0018B2  50F5               	movf	tablat,w,c
 10859  0018B4  1835               	xorwf	__esp8266_waitResponse@received,w,c
 10860  0018B6  A4D8               	btfss	status,2,c
 10861  0018B8  D02A               	goto	l435
 10862                           
 10863                           ;esp8266.c: 333: so_far[i]++;
 10864  0018BA  5038               	movf	__esp8266_waitResponse@i,w,c
 10865  0018BC  0D01               	mullw	1
 10866  0018BE  0E2F               	movlw	low __esp8266_waitResponse@so_far
 10867  0018C0  24F3               	addwf	prodl,w,c
 10868  0018C2  6ED9               	movwf	fsr2l,c
 10869  0018C4  0E00               	movlw	high __esp8266_waitResponse@so_far
 10870  0018C6  20F4               	addwfc	prodh,w,c
 10871  0018C8  6EDA               	movwf	fsr2h,c
 10872  0018CA  2ADF               	incf	indf2,f,c
 10873                           
 10874                           ;esp8266.c: 334: if (so_far[i] == lengths[i]) {
 10875  0018CC  5038               	movf	__esp8266_waitResponse@i,w,c
 10876  0018CE  0D01               	mullw	1
 10877  0018D0  0E23               	movlw	low __esp8266_waitResponse@lengths
 10878  0018D2  24F3               	addwf	prodl,w,c
 10879  0018D4  6ED9               	movwf	fsr2l,c
 10880  0018D6  0E00               	movlw	high __esp8266_waitResponse@lengths
 10881  0018D8  20F4               	addwfc	prodh,w,c
 10882  0018DA  6EDA               	movwf	fsr2h,c
 10883  0018DC  5038               	movf	__esp8266_waitResponse@i,w,c
 10884  0018DE  0D01               	mullw	1
 10885  0018E0  0E2F               	movlw	low __esp8266_waitResponse@so_far
 10886  0018E2  24F3               	addwf	prodl,w,c
 10887  0018E4  6EE1               	movwf	fsr1l,c
 10888  0018E6  0E00               	movlw	high __esp8266_waitResponse@so_far
 10889  0018E8  20F4               	addwfc	prodh,w,c
 10890  0018EA  6EE2               	movwf	fsr1h,c
 10891  0018EC  50DE               	movf	postinc2,w,c
 10892  0018EE  18E6               	xorwf	postinc1,w,c
 10893  0018F0  A4D8               	btfss	status,2,c
 10894  0018F2  D017               	goto	l437
 10895                           
 10896                           ;esp8266.c: 335: response = responses[i];
 10897  0018F4  5038               	movf	__esp8266_waitResponse@i,w,c
 10898  0018F6  0D01               	mullw	1
 10899  0018F8  0E29               	movlw	low __esp8266_waitResponse@responses
 10900  0018FA  24F3               	addwf	prodl,w,c
 10901  0018FC  6ED9               	movwf	fsr2l,c
 10902  0018FE  0E00               	movlw	high __esp8266_waitResponse@responses
 10903  001900  20F4               	addwfc	prodh,w,c
 10904  001902  6EDA               	movwf	fsr2h,c
 10905  001904  50DF               	movf	indf2,w,c
 10906  001906  6E36               	movwf	__esp8266_waitResponse@response,c
 10907                           
 10908                           ;esp8266.c: 336: continue_loop = 0;
 10909  001908  0E00               	movlw	0
 10910  00190A  6E37               	movwf	__esp8266_waitResponse@continue_loop,c
 10911                           
 10912                           ;esp8266.c: 337: }
 10913                           ;esp8266.c: 338: } else {
 10914  00190C  D00A               	goto	l437
 10915  00190E                     l435:
 10916                           
 10917                           ;esp8266.c: 339: so_far[i] = 0;
 10918  00190E  5038               	movf	__esp8266_waitResponse@i,w,c
 10919  001910  0D01               	mullw	1
 10920  001912  0E2F               	movlw	low __esp8266_waitResponse@so_far
 10921  001914  24F3               	addwf	prodl,w,c
 10922  001916  6ED9               	movwf	fsr2l,c
 10923  001918  0E00               	movlw	high __esp8266_waitResponse@so_far
 10924  00191A  20F4               	addwfc	prodh,w,c
 10925  00191C  6EDA               	movwf	fsr2h,c
 10926  00191E  0E00               	movlw	0
 10927  001920  6EDF               	movwf	indf2,c
 10928  001922                     l437:
 10929  001922  2A38               	incf	__esp8266_waitResponse@i,f,c
 10930  001924  D7A1               	goto	l5562
 10931  001926                     u5470:
 10932  001926  5037               	movf	__esp8266_waitResponse@continue_loop,w,c
 10933  001928  A4D8               	btfss	status,2,c
 10934  00192A  D799               	goto	l432
 10935                           
 10936                           ;esp8266.c: 340: }
 10937                           ;esp8266.c: 341: }
 10938                           ;esp8266.c: 342: }
 10939                           ;esp8266.c: 343: return response;
 10940  00192C  5036               	movf	__esp8266_waitResponse@response,w,c
 10941  00192E  0012               	return	
 10942  001930                     __end_of__esp8266_waitResponse:
 10943                           	opt stack 0
 10944                           tblptru	equ	0xFF8
 10945                           tblptrh	equ	0xFF7
 10946                           tblptrl	equ	0xFF6
 10947                           tablat	equ	0xFF5
 10948                           prodh	equ	0xFF4
 10949                           prodl	equ	0xFF3
 10950                           intcon	equ	0xFF2
 10951                           intcon2	equ	0xFF1
 10952                           indf0	equ	0xFEF
 10953                           postinc0	equ	0xFEE
 10954                           fsr0h	equ	0xFEA
 10955                           fsr0l	equ	0xFE9
 10956                           wreg	equ	0xFE8
 10957                           indf1	equ	0xFE7
 10958                           postinc1	equ	0xFE6
 10959                           postdec1	equ	0xFE5
 10960                           plusw1	equ	0xFE3
 10961                           fsr1h	equ	0xFE2
 10962                           fsr1l	equ	0xFE1
 10963                           indf2	equ	0xFDF
 10964                           postinc2	equ	0xFDE
 10965                           postdec2	equ	0xFDD
 10966                           plusw2	equ	0xFDB
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971 ;; *************** function _EUSART1_Read *****************
 10972 ;; Defined at:
 10973 ;;		line 128 in file "mcc_generated_files/eusart1.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;		None
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;  readValue       1   18[COMRAM] unsigned char 
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  1    wreg      unsigned char 
 10980 ;; Registers used:
 10981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10987 ;;      Params:         0       0       0       0       0       0       0
 10988 ;;      Locals:         1       0       0       0       0       0       0
 10989 ;;      Temps:          0       0       0       0       0       0       0
 10990 ;;      Totals:         1       0       0       0       0       0       0
 10991 ;;Total ram usage:        1 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    2
 10994 ;; This function calls:
 10995 ;;		Nothing
 10996 ;; This function is called by:
 10997 ;;		_esp8266_ip
 10998 ;;		_esp8266_send
 10999 ;;		__esp8266_waitFor
 11000 ;;		__esp8266_waitResponse
 11001 ;;		_esp8266_receive
 11002 ;;		_gets1USART
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text56
 11007  0025E0                     __ptext56:
 11008                           	opt stack 0
 11009  0025E0                     _EUSART1_Read:
 11010                           	opt stack 26
 11011                           
 11012                           ;eusart1.c: 130: uint8_t readValue = 0;
 11013                           
 11014                           ;incstack = 0
 11015  0025E0  0E00               	movlw	0
 11016  0025E2  6E13               	movwf	EUSART1_Read@readValue,c
 11017  0025E4                     
 11018                           ;eusart1.c: 133: {
 11019  0025E4  5040               	movf	_eusart1RxCount,w,c	;volatile
 11020  0025E6  B4D8               	btfsc	status,2,c
 11021  0025E8  D7FD               	goto	l515
 11022                           
 11023                           ;eusart1.c: 134: }
 11024                           ;eusart1.c: 136: readValue = eusart1RxBuffer[eusart1RxTail++];
 11025  0025EA  5041               	movf	_eusart1RxTail,w,c	;volatile
 11026  0025EC  0D01               	mullw	1
 11027  0025EE  0E60               	movlw	low _eusart1RxBuffer
 11028  0025F0  24F3               	addwf	prodl,w,c
 11029  0025F2  6ED9               	movwf	fsr2l,c
 11030  0025F4  0E00               	movlw	high _eusart1RxBuffer
 11031  0025F6  20F4               	addwfc	prodh,w,c
 11032  0025F8  6EDA               	movwf	fsr2h,c
 11033  0025FA  50DF               	movf	indf2,w,c
 11034  0025FC  6E13               	movwf	EUSART1_Read@readValue,c
 11035  0025FE  2A41               	incf	_eusart1RxTail,f,c	;volatile
 11036                           
 11037                           ;eusart1.c: 137: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 11038  002600  0E07               	movlw	7
 11039  002602  6441               	cpfsgt	_eusart1RxTail,c	;volatile
 11040  002604  D002               	goto	l517
 11041                           
 11042                           ;eusart1.c: 138: {
 11043                           ;eusart1.c: 139: eusart1RxTail = 0;
 11044  002606  0E00               	movlw	0
 11045  002608  6E41               	movwf	_eusart1RxTail,c	;volatile
 11046  00260A                     l517:
 11047                           
 11048                           ;eusart1.c: 140: }
 11049                           ;eusart1.c: 141: PIE1bits.RC1IE = 0;
 11050  00260A  9A9D               	bcf	3997,5,c	;volatile
 11051                           
 11052                           ;eusart1.c: 142: eusart1RxCount--;
 11053  00260C  0640               	decf	_eusart1RxCount,f,c	;volatile
 11054                           
 11055                           ;eusart1.c: 143: PIE1bits.RC1IE = 1;
 11056  00260E  8A9D               	bsf	3997,5,c	;volatile
 11057                           
 11058                           ;eusart1.c: 145: return readValue;
 11059  002610  5013               	movf	EUSART1_Read@readValue,w,c
 11060  002612  0012               	return	
 11061  002614                     __end_of_EUSART1_Read:
 11062                           	opt stack 0
 11063                           tblptru	equ	0xFF8
 11064                           tblptrh	equ	0xFF7
 11065                           tblptrl	equ	0xFF6
 11066                           tablat	equ	0xFF5
 11067                           prodh	equ	0xFF4
 11068                           prodl	equ	0xFF3
 11069                           intcon	equ	0xFF2
 11070                           intcon2	equ	0xFF1
 11071                           indf0	equ	0xFEF
 11072                           postinc0	equ	0xFEE
 11073                           fsr0h	equ	0xFEA
 11074                           fsr0l	equ	0xFE9
 11075                           wreg	equ	0xFE8
 11076                           indf1	equ	0xFE7
 11077                           postinc1	equ	0xFE6
 11078                           postdec1	equ	0xFE5
 11079                           plusw1	equ	0xFE3
 11080                           fsr1h	equ	0xFE2
 11081                           fsr1l	equ	0xFE1
 11082                           indf2	equ	0xFDF
 11083                           postinc2	equ	0xFDE
 11084                           postdec2	equ	0xFDD
 11085                           plusw2	equ	0xFDB
 11086                           fsr2h	equ	0xFDA
 11087                           fsr2l	equ	0xFD9
 11088                           status	equ	0xFD8
 11089                           
 11090 ;; *************** function __esp8266_print *****************
 11091 ;; Defined at:
 11092 ;;		line 271 in file "mcc_generated_files/esp8266.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;  ptr             2   19[COMRAM] PTR const unsigned char 
 11095 ;;		 -> STR_44(10), STR_43(4), main@alldata(80), STR_41(3), 
 11096 ;;		 -> STR_40(3), STR_39(3), STR_38(10), STR_37(3), 
 11097 ;;		 -> STR_36(11), STR_35(3), STR_34(14), STR_24(3), 
 11098 ;;		 -> STR_23(14), esp8266_send@length_str(6), STR_21(3), esp8266_start@port_str(5), 
 11099 ;;		 -> STR_19(3), STR_18(4), STR_17(4), STR_16(4), 
 11100 ;;		 -> STR_15(14), STR_13(11), STR_11(11), STR_10(4), 
 11101 ;;		 -> STR_9(4), STR_8(11), STR_7(3), STR_6(11), 
 11102 ;;		 -> STR_4(3), STR_3(4), STR_2(9), STR_1(5), 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;		None
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  1    wreg      void 
 11107 ;; Registers used:
 11108 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11114 ;;      Params:         2       0       0       0       0       0       0
 11115 ;;      Locals:         0       0       0       0       0       0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0
 11117 ;;      Totals:         2       0       0       0       0       0       0
 11118 ;;Total ram usage:        2 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    3
 11121 ;; This function calls:
 11122 ;;		_EUSART1_Write
 11123 ;; This function is called by:
 11124 ;;		_esp8266_isStarted
 11125 ;;		_esp8266_mode
 11126 ;;		_esp8266_connect
 11127 ;;		_esp8266_ip
 11128 ;;		_esp8266_send
 11129 ;;		_esp8266_server
 11130 ;;		_esp8266_CIPMUX
 11131 ;;		_esp8266_SLEEP
 11132 ;;		_esp8266_restart
 11133 ;;		_esp8266_echoCmds
 11134 ;;		_esp8266_disconnect
 11135 ;;		_esp8266_start
 11136 ;;		_esp8266_test
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           	psect	text57
 11141  0022C0                     __ptext57:
 11142                           	opt stack 0
 11143  0022C0                     __esp8266_print:
 11144                           	opt stack 26
 11145                           
 11146                           ;esp8266.c: 272: while (*ptr != 0) {
 11147                           
 11148                           ;incstack = 0
 11149  0022C0  D014               	goto	l410
 11150  0022C2                     
 11151                           ;esp8266.c: 273: EUSART1_Write(*ptr++);
 11152  0022C2  C014  FFF6         	movff	__esp8266_print@ptr,tblptrl
 11153  0022C6  C015  FFF7         	movff	__esp8266_print@ptr+1,tblptrh
 11154  0022CA  6AF8               	clrf	tblptru,c
 11155  0022CC  0E05               	movlw	(high __ramtop+-1)
 11156  0022CE  64F7               	cpfsgt	tblptrh,c
 11157  0022D0  D003               	bra	u5377
 11158  0022D2  0008               	tblrd		*
 11159  0022D4  50F5               	movf	tablat,w,c
 11160  0022D6  D005               	bra	u5370
 11161  0022D8                     u5377:
 11162  0022D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11163  0022DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11164  0022E0  50EF               	movf	indf0,w,c
 11165  0022E2                     u5370:
 11166  0022E2  ECB7  F012         	call	_EUSART1_Write
 11167  0022E6  4A14               	infsnz	__esp8266_print@ptr,f,c
 11168  0022E8  2A15               	incf	__esp8266_print@ptr+1,f,c
 11169  0022EA                     l410:
 11170  0022EA  C014  FFF6         	movff	__esp8266_print@ptr,tblptrl
 11171  0022EE  C015  FFF7         	movff	__esp8266_print@ptr+1,tblptrh
 11172  0022F2  6AF8               	clrf	tblptru,c
 11173  0022F4  0E05               	movlw	(high __ramtop+-1)
 11174  0022F6  64F7               	cpfsgt	tblptrh,c
 11175  0022F8  D003               	bra	u5387
 11176  0022FA  0008               	tblrd		*
 11177  0022FC  50F5               	movf	tablat,w,c
 11178  0022FE  D005               	bra	u5380
 11179  002300                     u5387:
 11180  002300  CFF6 FFE9          	movff	tblptrl,fsr0l
 11181  002304  CFF7 FFEA          	movff	tblptrh,fsr0h
 11182  002308  50EF               	movf	indf0,w,c
 11183  00230A                     u5380:
 11184  00230A  0900               	iorlw	0
 11185  00230C  B4D8               	btfsc	status,2,c
 11186  00230E  0012               	return	
 11187  002310  D7D8               	goto	l411
 11188  002312                     __end_of__esp8266_print:
 11189                           	opt stack 0
 11190                           tblptru	equ	0xFF8
 11191                           tblptrh	equ	0xFF7
 11192                           tblptrl	equ	0xFF6
 11193                           tablat	equ	0xFF5
 11194                           prodh	equ	0xFF4
 11195                           prodl	equ	0xFF3
 11196                           intcon	equ	0xFF2
 11197                           intcon2	equ	0xFF1
 11198                           indf0	equ	0xFEF
 11199                           postinc0	equ	0xFEE
 11200                           fsr0h	equ	0xFEA
 11201                           fsr0l	equ	0xFE9
 11202                           wreg	equ	0xFE8
 11203                           indf1	equ	0xFE7
 11204                           postinc1	equ	0xFE6
 11205                           postdec1	equ	0xFE5
 11206                           plusw1	equ	0xFE3
 11207                           fsr1h	equ	0xFE2
 11208                           fsr1l	equ	0xFE1
 11209                           indf2	equ	0xFDF
 11210                           postinc2	equ	0xFDE
 11211                           postdec2	equ	0xFDD
 11212                           plusw2	equ	0xFDB
 11213                           fsr2h	equ	0xFDA
 11214                           fsr2l	equ	0xFD9
 11215                           status	equ	0xFD8
 11216                           
 11217 ;; *************** function _EUSART1_Write *****************
 11218 ;; Defined at:
 11219 ;;		line 148 in file "mcc_generated_files/eusart1.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  txData          1    wreg     unsigned char 
 11222 ;; Auto vars:     Size  Location     Type
 11223 ;;  txData          1   18[COMRAM] unsigned char 
 11224 ;; Return value:  Size  Location     Type
 11225 ;;                  1    wreg      void 
 11226 ;; Registers used:
 11227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11228 ;; Tracked objects:
 11229 ;;		On entry : 0/0
 11230 ;;		On exit  : 0/0
 11231 ;;		Unchanged: 0/0
 11232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11233 ;;      Params:         0       0       0       0       0       0       0
 11234 ;;      Locals:         1       0       0       0       0       0       0
 11235 ;;      Temps:          0       0       0       0       0       0       0
 11236 ;;      Totals:         1       0       0       0       0       0       0
 11237 ;;Total ram usage:        1 bytes
 11238 ;; Hardware stack levels used:    1
 11239 ;; Hardware stack levels required when called:    2
 11240 ;; This function calls:
 11241 ;;		Nothing
 11242 ;; This function is called by:
 11243 ;;		_esp8266_mode
 11244 ;;		__esp8266_print
 11245 ;;		_esp8266_server
 11246 ;;		_esp8266_CIPMUX
 11247 ;;		_esp8266_SLEEP
 11248 ;;		_print_
 11249 ;;		_print_ln
 11250 ;;		_get_pm
 11251 ;;		_esp8266_echoCmds
 11252 ;;		_GPS_read_data
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           	psect	text58
 11257  00256E                     __ptext58:
 11258                           	opt stack 0
 11259  00256E                     _EUSART1_Write:
 11260                           	opt stack 27
 11261                           
 11262                           ;incstack = 0
 11263                           ;EUSART1_Write@txData stored from wreg
 11264  00256E  6E13               	movwf	EUSART1_Write@txData,c
 11265  002570                     
 11266                           ;eusart1.c: 151: {
 11267                           
 11268                           ;eusart1.c: 150: while(0 == eusart1TxBufferRemaining)
 11269  002570  5043               	movf	_eusart1TxBufferRemaining,w,c	;volatile
 11270  002572  B4D8               	btfsc	status,2,c
 11271  002574  D7FD               	goto	l5298
 11272                           
 11273                           ;eusart1.c: 152: }
 11274                           ;eusart1.c: 154: if(0 == PIE1bits.TX1IE)
 11275  002576  B89D               	btfsc	3997,4,c	;volatile
 11276  002578  D003               	goto	l524
 11277                           
 11278                           ;eusart1.c: 155: {
 11279                           ;eusart1.c: 156: TXREG1 = txData;
 11280  00257A  C013  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 11281                           
 11282                           ;eusart1.c: 157: }
 11283  00257E  D012               	goto	l525
 11284  002580                     l524:
 11285                           
 11286                           ;eusart1.c: 158: else
 11287                           ;eusart1.c: 159: {
 11288                           ;eusart1.c: 160: PIE1bits.TX1IE = 0;
 11289  002580  989D               	bcf	3997,4,c	;volatile
 11290                           
 11291                           ;eusart1.c: 161: eusart1TxBuffer[eusart1TxHead++] = txData;
 11292  002582  5045               	movf	_eusart1TxHead,w,c	;volatile
 11293  002584  0D01               	mullw	1
 11294  002586  0E68               	movlw	low _eusart1TxBuffer
 11295  002588  24F3               	addwf	prodl,w,c
 11296  00258A  6ED9               	movwf	fsr2l,c
 11297  00258C  0E00               	movlw	high _eusart1TxBuffer
 11298  00258E  20F4               	addwfc	prodh,w,c
 11299  002590  6EDA               	movwf	fsr2h,c
 11300  002592  C013  FFDF         	movff	EUSART1_Write@txData,indf2
 11301  002596  2A45               	incf	_eusart1TxHead,f,c	;volatile
 11302                           
 11303                           ;eusart1.c: 162: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 11304  002598  0E07               	movlw	7
 11305  00259A  6445               	cpfsgt	_eusart1TxHead,c	;volatile
 11306  00259C  D002               	goto	l526
 11307                           
 11308                           ;eusart1.c: 163: {
 11309                           ;eusart1.c: 164: eusart1TxHead = 0;
 11310  00259E  0E00               	movlw	0
 11311  0025A0  6E45               	movwf	_eusart1TxHead,c	;volatile
 11312  0025A2                     l526:
 11313                           
 11314                           ;eusart1.c: 165: }
 11315                           ;eusart1.c: 166: eusart1TxBufferRemaining--;
 11316  0025A2  0643               	decf	_eusart1TxBufferRemaining,f,c	;volatile
 11317  0025A4                     l525:
 11318                           
 11319                           ;eusart1.c: 167: }
 11320                           ;eusart1.c: 168: PIE1bits.TX1IE = 1;
 11321  0025A4  889D               	bsf	3997,4,c	;volatile
 11322  0025A6  0012               	return		;funcret
 11323  0025A8                     __end_of_EUSART1_Write:
 11324                           	opt stack 0
 11325                           tblptru	equ	0xFF8
 11326                           tblptrh	equ	0xFF7
 11327                           tblptrl	equ	0xFF6
 11328                           tablat	equ	0xFF5
 11329                           prodh	equ	0xFF4
 11330                           prodl	equ	0xFF3
 11331                           intcon	equ	0xFF2
 11332                           intcon2	equ	0xFF1
 11333                           indf0	equ	0xFEF
 11334                           postinc0	equ	0xFEE
 11335                           fsr0h	equ	0xFEA
 11336                           fsr0l	equ	0xFE9
 11337                           wreg	equ	0xFE8
 11338                           indf1	equ	0xFE7
 11339                           postinc1	equ	0xFE6
 11340                           postdec1	equ	0xFE5
 11341                           plusw1	equ	0xFE3
 11342                           fsr1h	equ	0xFE2
 11343                           fsr1l	equ	0xFE1
 11344                           indf2	equ	0xFDF
 11345                           postinc2	equ	0xFDE
 11346                           postdec2	equ	0xFDD
 11347                           plusw2	equ	0xFDB
 11348                           fsr2h	equ	0xFDA
 11349                           fsr2l	equ	0xFD9
 11350                           status	equ	0xFD8
 11351                           
 11352 ;; *************** function _INTERRUPT_InterruptManager *****************
 11353 ;; Defined at:
 11354 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;		None
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;		None
 11359 ;; Return value:  Size  Location     Type
 11360 ;;                  1    wreg      void 
 11361 ;; Registers used:
 11362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11363 ;; Tracked objects:
 11364 ;;		On entry : 0/0
 11365 ;;		On exit  : 0/0
 11366 ;;		Unchanged: 0/0
 11367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11368 ;;      Params:         0       0       0       0       0       0       0
 11369 ;;      Locals:         0       0       0       0       0       0       0
 11370 ;;      Temps:         18       0       0       0       0       0       0
 11371 ;;      Totals:        18       0       0       0       0       0       0
 11372 ;;Total ram usage:       18 bytes
 11373 ;; Hardware stack levels used:    1
 11374 ;; Hardware stack levels required when called:    1
 11375 ;; This function calls:
 11376 ;;		Absolute function
 11377 ;;		_EUSART1_Receive_ISR
 11378 ;;		_EUSART1_Transmit_ISR
 11379 ;;		_EUSART2_Receive_ISR
 11380 ;;		_EUSART2_Transmit_ISR
 11381 ;;		_TMR0_ISR
 11382 ;; This function is called by:
 11383 ;;		Interrupt level 2
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           	psect	intcode
 11388  000008                     __pintcode:
 11389                           	opt stack 0
 11390  000008                     _INTERRUPT_InterruptManager:
 11391                           	opt stack 24
 11392                           
 11393                           ;incstack = 0
 11394  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11395  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
 11396  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11397  000012  CFE9 F003          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11398  000016  CFEA F004          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11399  00001A  CFE1 F005          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11400  00001E  CFE2 F006          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11401  000022  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11402  000026  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11403  00002A  CFF3 F009          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11404  00002E  CFF4 F00A          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11405  000032  CFF6 F00B          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11406  000036  CFF7 F00C          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11407  00003A  CFF8 F00D          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11408  00003E  CFF5 F00E          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11409  000042  C04D  F00F         	movff	btemp,??_INTERRUPT_InterruptManager+14
 11410  000046  C04E  F010         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 11411  00004A  C04F  F011         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 11412  00004E  C050  F012         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 11413                           
 11414                           ;interrupt_manager.c: 61: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 11415  000052  BAF2               	btfsc	intcon,5,c	;volatile
 11416  000054  A4F2               	btfss	intcon,2,c	;volatile
 11417  000056  D003               	goto	i2l299
 11418                           
 11419                           ;interrupt_manager.c: 62: {
 11420                           ;interrupt_manager.c: 63: TMR0_ISR();
 11421  000058  EC74  F014         	call	_TMR0_ISR	;wreg free
 11422                           
 11423                           ;interrupt_manager.c: 64: }
 11424  00005C  D034               	goto	i2u444_49
 11425  00005E                     i2l299:
 11426                           
 11427                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
 11428  00005E  ACF2               	btfss	intcon,6,c	;volatile
 11429  000060  D032               	goto	i2u444_49
 11430                           
 11431                           ;interrupt_manager.c: 66: {
 11432                           ;interrupt_manager.c: 67: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 11433  000062  B8A3               	btfsc	4003,4,c	;volatile
 11434  000064  A8A4               	btfss	4004,4,c	;volatile
 11435  000066  D008               	goto	i2l302
 11436                           
 11437                           ;interrupt_manager.c: 68: {
 11438                           ;interrupt_manager.c: 69: EUSART2_TxDefaultInterruptHandler();
 11439  000068  D801               	call	i2u435_48
 11440  00006A  D02D               	goto	i2u444_49
 11441  00006C                     i2u435_48:
 11442  00006C  0005               	push	
 11443  00006E  6EFA               	movwf	pclath,c
 11444  000070  503E               	movf	_EUSART2_TxDefaultInterruptHandler,w,c
 11445  000072  6EFD               	movwf	tosl,c
 11446  000074  503F               	movf	_EUSART2_TxDefaultInterruptHandler+1,w,c
 11447  000076  D022               	goto	L17
 11448  000078                     i2l302:
 11449                           
 11450                           ;interrupt_manager.c: 71: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 11451  000078  BAA3               	btfsc	4003,5,c	;volatile
 11452  00007A  AAA4               	btfss	4004,5,c	;volatile
 11453  00007C  D008               	goto	i2l304
 11454                           
 11455                           ;interrupt_manager.c: 72: {
 11456                           ;interrupt_manager.c: 73: EUSART2_RxDefaultInterruptHandler();
 11457  00007E  D801               	call	i2u438_48
 11458  000080  D022               	goto	i2u444_49
 11459  000082                     i2u438_48:
 11460  000082  0005               	push	
 11461  000084  6EFA               	movwf	pclath,c
 11462  000086  503C               	movf	_EUSART2_RxDefaultInterruptHandler,w,c
 11463  000088  6EFD               	movwf	tosl,c
 11464  00008A  503D               	movf	_EUSART2_RxDefaultInterruptHandler+1,w,c
 11465  00008C  D017               	goto	L17
 11466  00008E                     i2l304:
 11467                           
 11468                           ;interrupt_manager.c: 75: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11469  00008E  B89D               	btfsc	3997,4,c	;volatile
 11470  000090  A89E               	btfss	3998,4,c	;volatile
 11471  000092  D009               	goto	i2l306
 11472                           
 11473                           ;interrupt_manager.c: 76: {
 11474                           ;interrupt_manager.c: 77: EUSART1_TxDefaultInterruptHandler();
 11475  000094  D801               	call	i2u441_48
 11476  000096  D017               	goto	i2u444_49
 11477  000098                     i2u441_48:
 11478  000098  0005               	push	
 11479  00009A  0100               	movlb	0	; () banked
 11480  00009C  6EFA               	movwf	pclath,c
 11481  00009E  5198               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
 11482  0000A0  6EFD               	movwf	tosl,c
 11483  0000A2  5199               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
 11484  0000A4  D00B               	goto	L17
 11485  0000A6                     i2l306:
 11486                           
 11487                           ;interrupt_manager.c: 79: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11488  0000A6  BA9D               	btfsc	3997,5,c	;volatile
 11489  0000A8  AA9E               	btfss	3998,5,c	;volatile
 11490  0000AA  D00D               	goto	i2u444_49
 11491                           
 11492                           ;interrupt_manager.c: 80: {
 11493                           ;interrupt_manager.c: 81: EUSART1_RxDefaultInterruptHandler();
 11494  0000AC  D801               	call	i2u444_48
 11495  0000AE  D00B               	goto	i2u444_49
 11496  0000B0                     i2u444_48:
 11497  0000B0  0005               	push	
 11498  0000B2  0100               	movlb	0	; () banked
 11499  0000B4  6EFA               	movwf	pclath,c
 11500  0000B6  5196               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
 11501  0000B8  6EFD               	movwf	tosl,c
 11502  0000BA  5197               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
 11503  0000BC                     L17:
 11504  0000BC  6EFE               	movwf	tosh,c
 11505  0000BE  50F8               	movf	tblptru,w,c
 11506  0000C0  6EFF               	movwf	tosu,c
 11507  0000C2  50FA               	movf	pclath,w,c
 11508  0000C4  0012               	return		;indir
 11509  0000C6                     i2u444_49:
 11510                           
 11511                           ;interrupt_manager.c: 88: else
 11512                           ;interrupt_manager.c: 89: {
 11513                           
 11514                           ;interrupt_manager.c: 86: }
 11515                           ;interrupt_manager.c: 87: }
 11516                           
 11517                           ;interrupt_manager.c: 83: else
 11518                           ;interrupt_manager.c: 84: {
 11519                           
 11520                           ;interrupt_manager.c: 82: }
 11521  0000C6  C012  F050         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 11522  0000CA  C011  F04F         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 11523  0000CE  C010  F04E         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 11524  0000D2  C00F  F04D         	movff	??_INTERRUPT_InterruptManager+14,btemp
 11525  0000D6  C00E  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11526  0000DA  C00D  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11527  0000DE  C00C  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11528  0000E2  C00B  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11529  0000E6  C00A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11530  0000EA  C009  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11531  0000EE  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11532  0000F2  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11533  0000F6  C006  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11534  0000FA  C005  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11535  0000FE  C004  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11536  000102  C003  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11537  000106  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11538  00010A  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11539  00010E  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11540  000110  0011               	retfie		f
 11541  000112                     __end_of_INTERRUPT_InterruptManager:
 11542                           	opt stack 0
 11543                           tosu	equ	0xFFF
 11544                           tosh	equ	0xFFE
 11545                           tosl	equ	0xFFD
 11546                           pclatu	equ	0xFFB
 11547                           pclath	equ	0xFFA
 11548                           tblptru	equ	0xFF8
 11549                           tblptrh	equ	0xFF7
 11550                           tblptrl	equ	0xFF6
 11551                           tablat	equ	0xFF5
 11552                           prodh	equ	0xFF4
 11553                           prodl	equ	0xFF3
 11554                           intcon	equ	0xFF2
 11555                           intcon2	equ	0xFF1
 11556                           indf0	equ	0xFEF
 11557                           postinc0	equ	0xFEE
 11558                           fsr0h	equ	0xFEA
 11559                           fsr0l	equ	0xFE9
 11560                           wreg	equ	0xFE8
 11561                           indf1	equ	0xFE7
 11562                           postinc1	equ	0xFE6
 11563                           postdec1	equ	0xFE5
 11564                           plusw1	equ	0xFE3
 11565                           fsr1h	equ	0xFE2
 11566                           fsr1l	equ	0xFE1
 11567                           indf2	equ	0xFDF
 11568                           postinc2	equ	0xFDE
 11569                           postdec2	equ	0xFDD
 11570                           plusw2	equ	0xFDB
 11571                           fsr2h	equ	0xFDA
 11572                           fsr2l	equ	0xFD9
 11573                           status	equ	0xFD8
 11574                           
 11575 ;; *************** function _TMR0_ISR *****************
 11576 ;; Defined at:
 11577 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 11578 ;; Parameters:    Size  Location     Type
 11579 ;;		None
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;		None
 11582 ;; Return value:  Size  Location     Type
 11583 ;;                  1    wreg      void 
 11584 ;; Registers used:
 11585 ;;		status,2, status,0
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11591 ;;      Params:         0       0       0       0       0       0       0
 11592 ;;      Locals:         0       0       0       0       0       0       0
 11593 ;;      Temps:          0       0       0       0       0       0       0
 11594 ;;      Totals:         0       0       0       0       0       0       0
 11595 ;;Total ram usage:        0 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; This function calls:
 11598 ;;		Nothing
 11599 ;; This function is called by:
 11600 ;;		_INTERRUPT_InterruptManager
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           	psect	text60
 11605  0028E8                     __ptext60:
 11606                           	opt stack 0
 11607  0028E8                     _TMR0_ISR:
 11608                           	opt stack 24
 11609                           
 11610                           ;tmr0.c: 133: INTCONbits.TMR0IF = 0;
 11611                           
 11612                           ;incstack = 0
 11613  0028E8  94F2               	bcf	intcon,2,c	;volatile
 11614                           
 11615                           ;tmr0.c: 136: TMR0L = timer0ReloadVal;
 11616  0028EA  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 11617                           
 11618                           ;tmr0.c: 141: timecount++;
 11619  0028EE  0101               	movlb	1	; () banked
 11620  0028F0  4BC7               	infsnz	_timecount& (0+255),f,b
 11621  0028F2  2BC8               	incf	(_timecount+1)& (0+255),f,b
 11622                           
 11623                           ; BSR set to: 1
 11624  0028F4  0012               	return		;funcret
 11625  0028F6                     __end_of_TMR0_ISR:
 11626                           	opt stack 0
 11627                           tosu	equ	0xFFF
 11628                           tosh	equ	0xFFE
 11629                           tosl	equ	0xFFD
 11630                           pclatu	equ	0xFFB
 11631                           pclath	equ	0xFFA
 11632                           tblptru	equ	0xFF8
 11633                           tblptrh	equ	0xFF7
 11634                           tblptrl	equ	0xFF6
 11635                           tablat	equ	0xFF5
 11636                           prodh	equ	0xFF4
 11637                           prodl	equ	0xFF3
 11638                           intcon	equ	0xFF2
 11639                           intcon2	equ	0xFF1
 11640                           indf0	equ	0xFEF
 11641                           postinc0	equ	0xFEE
 11642                           fsr0h	equ	0xFEA
 11643                           fsr0l	equ	0xFE9
 11644                           wreg	equ	0xFE8
 11645                           indf1	equ	0xFE7
 11646                           postinc1	equ	0xFE6
 11647                           postdec1	equ	0xFE5
 11648                           plusw1	equ	0xFE3
 11649                           fsr1h	equ	0xFE2
 11650                           fsr1l	equ	0xFE1
 11651                           indf2	equ	0xFDF
 11652                           postinc2	equ	0xFDE
 11653                           postdec2	equ	0xFDD
 11654                           plusw2	equ	0xFDB
 11655                           fsr2h	equ	0xFDA
 11656                           fsr2l	equ	0xFD9
 11657                           status	equ	0xFD8
 11658                           
 11659 ;; *************** function _EUSART2_Transmit_ISR *****************
 11660 ;; Defined at:
 11661 ;;		line 172 in file "mcc_generated_files/eusart2.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;		None
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;		None
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      void 
 11668 ;; Registers used:
 11669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11675 ;;      Params:         0       0       0       0       0       0       0
 11676 ;;      Locals:         0       0       0       0       0       0       0
 11677 ;;      Temps:          0       0       0       0       0       0       0
 11678 ;;      Totals:         0       0       0       0       0       0       0
 11679 ;;Total ram usage:        0 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_EUSART2_Initialize
 11685 ;;		_INTERRUPT_InterruptManager
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text61
 11690  002642                     __ptext61:
 11691                           	opt stack 0
 11692  002642                     _EUSART2_Transmit_ISR:
 11693                           	opt stack 24
 11694                           
 11695                           ;eusart2.c: 176: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 11696                           
 11697                           ; BSR set to: 1
 11698                           ;incstack = 0
 11699  002642  0E08               	movlw	8
 11700  002644  604A               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 11701  002646  D012               	goto	i2l120
 11702                           
 11703                           ;eusart2.c: 177: {
 11704                           ;eusart2.c: 178: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
 11705  002648  504B               	movf	_eusart2TxTail,w,c	;volatile
 11706  00264A  0D01               	mullw	1
 11707  00264C  0E78               	movlw	low _eusart2TxBuffer
 11708  00264E  24F3               	addwf	prodl,w,c
 11709  002650  6ED9               	movwf	fsr2l,c
 11710  002652  0E00               	movlw	high _eusart2TxBuffer
 11711  002654  20F4               	addwfc	prodh,w,c
 11712  002656  6EDA               	movwf	fsr2h,c
 11713  002658  50DF               	movf	indf2,w,c
 11714  00265A  6E73               	movwf	3955,c	;volatile
 11715  00265C  2A4B               	incf	_eusart2TxTail,f,c	;volatile
 11716                           
 11717                           ;eusart2.c: 179: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 11718  00265E  0E07               	movlw	7
 11719  002660  644B               	cpfsgt	_eusart2TxTail,c	;volatile
 11720  002662  D002               	goto	i2l121
 11721                           
 11722                           ;eusart2.c: 180: {
 11723                           ;eusart2.c: 181: eusart2TxTail = 0;
 11724  002664  0E00               	movlw	0
 11725  002666  6E4B               	movwf	_eusart2TxTail,c	;volatile
 11726  002668                     i2l121:
 11727                           
 11728                           ;eusart2.c: 182: }
 11729                           ;eusart2.c: 183: eusart2TxBufferRemaining++;
 11730  002668  2A4A               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 11731                           
 11732                           ;eusart2.c: 184: }
 11733  00266A  0012               	return	
 11734  00266C                     i2l120:
 11735                           
 11736                           ;eusart2.c: 185: else
 11737                           ;eusart2.c: 186: {
 11738                           ;eusart2.c: 187: PIE3bits.TX2IE = 0;
 11739  00266C  98A3               	bcf	4003,4,c	;volatile
 11740  00266E  0012               	return	
 11741  002670                     __end_of_EUSART2_Transmit_ISR:
 11742                           	opt stack 0
 11743                           tosu	equ	0xFFF
 11744                           tosh	equ	0xFFE
 11745                           tosl	equ	0xFFD
 11746                           pclatu	equ	0xFFB
 11747                           pclath	equ	0xFFA
 11748                           tblptru	equ	0xFF8
 11749                           tblptrh	equ	0xFF7
 11750                           tblptrl	equ	0xFF6
 11751                           tablat	equ	0xFF5
 11752                           prodh	equ	0xFF4
 11753                           prodl	equ	0xFF3
 11754                           intcon	equ	0xFF2
 11755                           intcon2	equ	0xFF1
 11756                           indf0	equ	0xFEF
 11757                           postinc0	equ	0xFEE
 11758                           fsr0h	equ	0xFEA
 11759                           fsr0l	equ	0xFE9
 11760                           wreg	equ	0xFE8
 11761                           indf1	equ	0xFE7
 11762                           postinc1	equ	0xFE6
 11763                           postdec1	equ	0xFE5
 11764                           plusw1	equ	0xFE3
 11765                           fsr1h	equ	0xFE2
 11766                           fsr1l	equ	0xFE1
 11767                           indf2	equ	0xFDF
 11768                           postinc2	equ	0xFDE
 11769                           postdec2	equ	0xFDD
 11770                           plusw2	equ	0xFDB
 11771                           fsr2h	equ	0xFDA
 11772                           fsr2l	equ	0xFD9
 11773                           status	equ	0xFD8
 11774                           
 11775 ;; *************** function _EUSART2_Receive_ISR *****************
 11776 ;; Defined at:
 11777 ;;		line 191 in file "mcc_generated_files/eusart2.c"
 11778 ;; Parameters:    Size  Location     Type
 11779 ;;		None
 11780 ;; Auto vars:     Size  Location     Type
 11781 ;;		None
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  1    wreg      void 
 11784 ;; Registers used:
 11785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11791 ;;      Params:         0       0       0       0       0       0       0
 11792 ;;      Locals:         0       0       0       0       0       0       0
 11793 ;;      Temps:          0       0       0       0       0       0       0
 11794 ;;      Totals:         0       0       0       0       0       0       0
 11795 ;;Total ram usage:        0 bytes
 11796 ;; Hardware stack levels used:    1
 11797 ;; This function calls:
 11798 ;;		Nothing
 11799 ;; This function is called by:
 11800 ;;		_EUSART2_Initialize
 11801 ;;		_INTERRUPT_InterruptManager
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text62
 11806  0026CA                     __ptext62:
 11807                           	opt stack 0
 11808  0026CA                     _EUSART2_Receive_ISR:
 11809                           	opt stack 24
 11810                           
 11811                           ;eusart2.c: 194: if(1 == RCSTA2bits.OERR)
 11812                           
 11813                           ;incstack = 0
 11814  0026CA  A271               	btfss	3953,1,c	;volatile
 11815  0026CC  D002               	goto	i2l126
 11816                           
 11817                           ;eusart2.c: 195: {
 11818                           ;eusart2.c: 198: RCSTA2bits.CREN = 0;
 11819  0026CE  9871               	bcf	3953,4,c	;volatile
 11820                           
 11821                           ;eusart2.c: 199: RCSTA2bits.CREN = 1;
 11822  0026D0  8871               	bsf	3953,4,c	;volatile
 11823  0026D2                     i2l126:
 11824                           
 11825                           ;eusart2.c: 200: }
 11826                           ;eusart2.c: 203: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
 11827  0026D2  5049               	movf	_eusart2RxHead,w,c	;volatile
 11828  0026D4  0D01               	mullw	1
 11829  0026D6  0E70               	movlw	low _eusart2RxBuffer
 11830  0026D8  24F3               	addwf	prodl,w,c
 11831  0026DA  6ED9               	movwf	fsr2l,c
 11832  0026DC  0E00               	movlw	high _eusart2RxBuffer
 11833  0026DE  20F4               	addwfc	prodh,w,c
 11834  0026E0  6EDA               	movwf	fsr2h,c
 11835  0026E2  CF74 FFDF          	movff	3956,indf2	;volatile
 11836  0026E6  2A49               	incf	_eusart2RxHead,f,c	;volatile
 11837                           
 11838                           ;eusart2.c: 204: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 11839  0026E8  0E07               	movlw	7
 11840  0026EA  6449               	cpfsgt	_eusart2RxHead,c	;volatile
 11841  0026EC  D002               	goto	i2l127
 11842                           
 11843                           ;eusart2.c: 205: {
 11844                           ;eusart2.c: 206: eusart2RxHead = 0;
 11845  0026EE  0E00               	movlw	0
 11846  0026F0  6E49               	movwf	_eusart2RxHead,c	;volatile
 11847  0026F2                     i2l127:
 11848                           
 11849                           ;eusart2.c: 207: }
 11850                           ;eusart2.c: 208: eusart2RxCount++;
 11851  0026F2  2A47               	incf	_eusart2RxCount,f,c	;volatile
 11852  0026F4  0012               	return		;funcret
 11853  0026F6                     __end_of_EUSART2_Receive_ISR:
 11854                           	opt stack 0
 11855                           tosu	equ	0xFFF
 11856                           tosh	equ	0xFFE
 11857                           tosl	equ	0xFFD
 11858                           pclatu	equ	0xFFB
 11859                           pclath	equ	0xFFA
 11860                           tblptru	equ	0xFF8
 11861                           tblptrh	equ	0xFF7
 11862                           tblptrl	equ	0xFF6
 11863                           tablat	equ	0xFF5
 11864                           prodh	equ	0xFF4
 11865                           prodl	equ	0xFF3
 11866                           intcon	equ	0xFF2
 11867                           intcon2	equ	0xFF1
 11868                           indf0	equ	0xFEF
 11869                           postinc0	equ	0xFEE
 11870                           fsr0h	equ	0xFEA
 11871                           fsr0l	equ	0xFE9
 11872                           wreg	equ	0xFE8
 11873                           indf1	equ	0xFE7
 11874                           postinc1	equ	0xFE6
 11875                           postdec1	equ	0xFE5
 11876                           plusw1	equ	0xFE3
 11877                           fsr1h	equ	0xFE2
 11878                           fsr1l	equ	0xFE1
 11879                           indf2	equ	0xFDF
 11880                           postinc2	equ	0xFDE
 11881                           postdec2	equ	0xFDD
 11882                           plusw2	equ	0xFDB
 11883                           fsr2h	equ	0xFDA
 11884                           fsr2l	equ	0xFD9
 11885                           status	equ	0xFD8
 11886                           
 11887 ;; *************** function _EUSART1_Transmit_ISR *****************
 11888 ;; Defined at:
 11889 ;;		line 172 in file "mcc_generated_files/eusart1.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  1    wreg      void 
 11896 ;; Registers used:
 11897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11903 ;;      Params:         0       0       0       0       0       0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0
 11905 ;;      Temps:          0       0       0       0       0       0       0
 11906 ;;      Totals:         0       0       0       0       0       0       0
 11907 ;;Total ram usage:        0 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; This function calls:
 11910 ;;		Nothing
 11911 ;; This function is called by:
 11912 ;;		_EUSART1_Initialize
 11913 ;;		_INTERRUPT_InterruptManager
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           	psect	text63
 11918  002670                     __ptext63:
 11919                           	opt stack 0
 11920  002670                     _EUSART1_Transmit_ISR:
 11921                           	opt stack 24
 11922                           
 11923                           ;eusart1.c: 176: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11924                           
 11925                           ;incstack = 0
 11926  002670  0E08               	movlw	8
 11927  002672  6043               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 11928  002674  D012               	goto	i2l530
 11929                           
 11930                           ;eusart1.c: 177: {
 11931                           ;eusart1.c: 178: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11932  002676  5044               	movf	_eusart1TxTail,w,c	;volatile
 11933  002678  0D01               	mullw	1
 11934  00267A  0E68               	movlw	low _eusart1TxBuffer
 11935  00267C  24F3               	addwf	prodl,w,c
 11936  00267E  6ED9               	movwf	fsr2l,c
 11937  002680  0E00               	movlw	high _eusart1TxBuffer
 11938  002682  20F4               	addwfc	prodh,w,c
 11939  002684  6EDA               	movwf	fsr2h,c
 11940  002686  50DF               	movf	indf2,w,c
 11941  002688  6EAD               	movwf	4013,c	;volatile
 11942  00268A  2A44               	incf	_eusart1TxTail,f,c	;volatile
 11943                           
 11944                           ;eusart1.c: 179: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11945  00268C  0E07               	movlw	7
 11946  00268E  6444               	cpfsgt	_eusart1TxTail,c	;volatile
 11947  002690  D002               	goto	i2l531
 11948                           
 11949                           ;eusart1.c: 180: {
 11950                           ;eusart1.c: 181: eusart1TxTail = 0;
 11951  002692  0E00               	movlw	0
 11952  002694  6E44               	movwf	_eusart1TxTail,c	;volatile
 11953  002696                     i2l531:
 11954                           
 11955                           ;eusart1.c: 182: }
 11956                           ;eusart1.c: 183: eusart1TxBufferRemaining++;
 11957  002696  2A43               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11958                           
 11959                           ;eusart1.c: 184: }
 11960  002698  0012               	return	
 11961  00269A                     i2l530:
 11962                           
 11963                           ;eusart1.c: 185: else
 11964                           ;eusart1.c: 186: {
 11965                           ;eusart1.c: 187: PIE1bits.TX1IE = 0;
 11966  00269A  989D               	bcf	3997,4,c	;volatile
 11967  00269C  0012               	return	
 11968  00269E                     __end_of_EUSART1_Transmit_ISR:
 11969                           	opt stack 0
 11970                           tosu	equ	0xFFF
 11971                           tosh	equ	0xFFE
 11972                           tosl	equ	0xFFD
 11973                           pclatu	equ	0xFFB
 11974                           pclath	equ	0xFFA
 11975                           tblptru	equ	0xFF8
 11976                           tblptrh	equ	0xFF7
 11977                           tblptrl	equ	0xFF6
 11978                           tablat	equ	0xFF5
 11979                           prodh	equ	0xFF4
 11980                           prodl	equ	0xFF3
 11981                           intcon	equ	0xFF2
 11982                           intcon2	equ	0xFF1
 11983                           indf0	equ	0xFEF
 11984                           postinc0	equ	0xFEE
 11985                           fsr0h	equ	0xFEA
 11986                           fsr0l	equ	0xFE9
 11987                           wreg	equ	0xFE8
 11988                           indf1	equ	0xFE7
 11989                           postinc1	equ	0xFE6
 11990                           postdec1	equ	0xFE5
 11991                           plusw1	equ	0xFE3
 11992                           fsr1h	equ	0xFE2
 11993                           fsr1l	equ	0xFE1
 11994                           indf2	equ	0xFDF
 11995                           postinc2	equ	0xFDE
 11996                           postdec2	equ	0xFDD
 11997                           plusw2	equ	0xFDB
 11998                           fsr2h	equ	0xFDA
 11999                           fsr2l	equ	0xFD9
 12000                           status	equ	0xFD8
 12001                           
 12002 ;; *************** function _EUSART1_Receive_ISR *****************
 12003 ;; Defined at:
 12004 ;;		line 191 in file "mcc_generated_files/eusart1.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;		None
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;		None
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  1    wreg      void 
 12011 ;; Registers used:
 12012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12018 ;;      Params:         0       0       0       0       0       0       0
 12019 ;;      Locals:         0       0       0       0       0       0       0
 12020 ;;      Temps:          0       0       0       0       0       0       0
 12021 ;;      Totals:         0       0       0       0       0       0       0
 12022 ;;Total ram usage:        0 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; This function calls:
 12025 ;;		Nothing
 12026 ;; This function is called by:
 12027 ;;		_EUSART1_Initialize
 12028 ;;		_INTERRUPT_InterruptManager
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           	psect	text64
 12033  0026F6                     __ptext64:
 12034                           	opt stack 0
 12035  0026F6                     _EUSART1_Receive_ISR:
 12036                           	opt stack 24
 12037                           
 12038                           ;eusart1.c: 194: if(1 == RCSTA1bits.OERR)
 12039                           
 12040                           ;incstack = 0
 12041  0026F6  A2AB               	btfss	4011,1,c	;volatile
 12042  0026F8  D002               	goto	i2l536
 12043                           
 12044                           ;eusart1.c: 195: {
 12045                           ;eusart1.c: 198: RCSTA1bits.CREN = 0;
 12046  0026FA  98AB               	bcf	4011,4,c	;volatile
 12047                           
 12048                           ;eusart1.c: 199: RCSTA1bits.CREN = 1;
 12049  0026FC  88AB               	bsf	4011,4,c	;volatile
 12050  0026FE                     i2l536:
 12051                           
 12052                           ;eusart1.c: 200: }
 12053                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 12054  0026FE  5042               	movf	_eusart1RxHead,w,c	;volatile
 12055  002700  0D01               	mullw	1
 12056  002702  0E60               	movlw	low _eusart1RxBuffer
 12057  002704  24F3               	addwf	prodl,w,c
 12058  002706  6ED9               	movwf	fsr2l,c
 12059  002708  0E00               	movlw	high _eusart1RxBuffer
 12060  00270A  20F4               	addwfc	prodh,w,c
 12061  00270C  6EDA               	movwf	fsr2h,c
 12062  00270E  CFAE FFDF          	movff	4014,indf2	;volatile
 12063  002712  2A42               	incf	_eusart1RxHead,f,c	;volatile
 12064                           
 12065                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 12066  002714  0E07               	movlw	7
 12067  002716  6442               	cpfsgt	_eusart1RxHead,c	;volatile
 12068  002718  D002               	goto	i2l537
 12069                           
 12070                           ;eusart1.c: 205: {
 12071                           ;eusart1.c: 206: eusart1RxHead = 0;
 12072  00271A  0E00               	movlw	0
 12073  00271C  6E42               	movwf	_eusart1RxHead,c	;volatile
 12074  00271E                     i2l537:
 12075                           
 12076                           ;eusart1.c: 207: }
 12077                           ;eusart1.c: 208: eusart1RxCount++;
 12078  00271E  2A40               	incf	_eusart1RxCount,f,c	;volatile
 12079  002720  0012               	return		;funcret
 12080  002722                     __end_of_EUSART1_Receive_ISR:
 12081                           	opt stack 0
 12082                           tosu	equ	0xFFF
 12083                           tosh	equ	0xFFE
 12084                           tosl	equ	0xFFD
 12085                           pclatu	equ	0xFFB
 12086                           pclath	equ	0xFFA
 12087                           tblptru	equ	0xFF8
 12088                           tblptrh	equ	0xFF7
 12089                           tblptrl	equ	0xFF6
 12090                           tablat	equ	0xFF5
 12091                           prodh	equ	0xFF4
 12092                           prodl	equ	0xFF3
 12093                           intcon	equ	0xFF2
 12094                           intcon2	equ	0xFF1
 12095                           indf0	equ	0xFEF
 12096                           postinc0	equ	0xFEE
 12097                           fsr0h	equ	0xFEA
 12098                           fsr0l	equ	0xFE9
 12099                           wreg	equ	0xFE8
 12100                           indf1	equ	0xFE7
 12101                           postinc1	equ	0xFE6
 12102                           postdec1	equ	0xFE5
 12103                           plusw1	equ	0xFE3
 12104                           fsr1h	equ	0xFE2
 12105                           fsr1l	equ	0xFE1
 12106                           indf2	equ	0xFDF
 12107                           postinc2	equ	0xFDE
 12108                           postdec2	equ	0xFDD
 12109                           plusw2	equ	0xFDB
 12110                           fsr2h	equ	0xFDA
 12111                           fsr2l	equ	0xFD9
 12112                           status	equ	0xFD8
 12113                           tosu	equ	0xFFF
 12114                           tosh	equ	0xFFE
 12115                           tosl	equ	0xFFD
 12116                           pclatu	equ	0xFFB
 12117                           pclath	equ	0xFFA
 12118                           tblptru	equ	0xFF8
 12119                           tblptrh	equ	0xFF7
 12120                           tblptrl	equ	0xFF6
 12121                           tablat	equ	0xFF5
 12122                           prodh	equ	0xFF4
 12123                           prodl	equ	0xFF3
 12124                           intcon	equ	0xFF2
 12125                           intcon2	equ	0xFF1
 12126                           indf0	equ	0xFEF
 12127                           postinc0	equ	0xFEE
 12128                           fsr0h	equ	0xFEA
 12129                           fsr0l	equ	0xFE9
 12130                           wreg	equ	0xFE8
 12131                           indf1	equ	0xFE7
 12132                           postinc1	equ	0xFE6
 12133                           postdec1	equ	0xFE5
 12134                           plusw1	equ	0xFE3
 12135                           fsr1h	equ	0xFE2
 12136                           fsr1l	equ	0xFE1
 12137                           indf2	equ	0xFDF
 12138                           postinc2	equ	0xFDE
 12139                           postdec2	equ	0xFDD
 12140                           plusw2	equ	0xFDB
 12141                           fsr2h	equ	0xFDA
 12142                           fsr2l	equ	0xFD9
 12143                           status	equ	0xFD8
 12144                           
 12145                           	psect	text65
 12146  000000                     __ptext65:
 12147                           	opt stack 0
 12148                           tosu	equ	0xFFF
 12149                           tosh	equ	0xFFE
 12150                           tosl	equ	0xFFD
 12151                           pclatu	equ	0xFFB
 12152                           pclath	equ	0xFFA
 12153                           tblptru	equ	0xFF8
 12154                           tblptrh	equ	0xFF7
 12155                           tblptrl	equ	0xFF6
 12156                           tablat	equ	0xFF5
 12157                           prodh	equ	0xFF4
 12158                           prodl	equ	0xFF3
 12159                           intcon	equ	0xFF2
 12160                           intcon2	equ	0xFF1
 12161                           indf0	equ	0xFEF
 12162                           postinc0	equ	0xFEE
 12163                           fsr0h	equ	0xFEA
 12164                           fsr0l	equ	0xFE9
 12165                           wreg	equ	0xFE8
 12166                           indf1	equ	0xFE7
 12167                           postinc1	equ	0xFE6
 12168                           postdec1	equ	0xFE5
 12169                           plusw1	equ	0xFE3
 12170                           fsr1h	equ	0xFE2
 12171                           fsr1l	equ	0xFE1
 12172                           indf2	equ	0xFDF
 12173                           postinc2	equ	0xFDE
 12174                           postdec2	equ	0xFDD
 12175                           plusw2	equ	0xFDB
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8
 12179                           
 12180                           	psect	rparam
 12181  0000                     tosu	equ	0xFFF
 12182                           tosh	equ	0xFFE
 12183                           tosl	equ	0xFFD
 12184                           pclatu	equ	0xFFB
 12185                           pclath	equ	0xFFA
 12186                           tblptru	equ	0xFF8
 12187                           tblptrh	equ	0xFF7
 12188                           tblptrl	equ	0xFF6
 12189                           tablat	equ	0xFF5
 12190                           prodh	equ	0xFF4
 12191                           prodl	equ	0xFF3
 12192                           intcon	equ	0xFF2
 12193                           intcon2	equ	0xFF1
 12194                           indf0	equ	0xFEF
 12195                           postinc0	equ	0xFEE
 12196                           fsr0h	equ	0xFEA
 12197                           fsr0l	equ	0xFE9
 12198                           wreg	equ	0xFE8
 12199                           indf1	equ	0xFE7
 12200                           postinc1	equ	0xFE6
 12201                           postdec1	equ	0xFE5
 12202                           plusw1	equ	0xFE3
 12203                           fsr1h	equ	0xFE2
 12204                           fsr1l	equ	0xFE1
 12205                           indf2	equ	0xFDF
 12206                           postinc2	equ	0xFDE
 12207                           postdec2	equ	0xFDD
 12208                           plusw2	equ	0xFDB
 12209                           fsr2h	equ	0xFDA
 12210                           fsr2l	equ	0xFD9
 12211                           status	equ	0xFD8
 12212                           
 12213                           	psect	temp
 12214  00004D                     btemp:
 12215                           	opt stack 0
 12216  00004D                     	ds	1
 12217  0000                     int$flags	set	btemp
 12218  0000                     wtemp6	set	btemp+1
 12219                           tosu	equ	0xFFF
 12220                           tosh	equ	0xFFE
 12221                           tosl	equ	0xFFD
 12222                           pclatu	equ	0xFFB
 12223                           pclath	equ	0xFFA
 12224                           tblptru	equ	0xFF8
 12225                           tblptrh	equ	0xFF7
 12226                           tblptrl	equ	0xFF6
 12227                           tablat	equ	0xFF5
 12228                           prodh	equ	0xFF4
 12229                           prodl	equ	0xFF3
 12230                           intcon	equ	0xFF2
 12231                           intcon2	equ	0xFF1
 12232                           indf0	equ	0xFEF
 12233                           postinc0	equ	0xFEE
 12234                           fsr0h	equ	0xFEA
 12235                           fsr0l	equ	0xFE9
 12236                           wreg	equ	0xFE8
 12237                           indf1	equ	0xFE7
 12238                           postinc1	equ	0xFE6
 12239                           postdec1	equ	0xFE5
 12240                           plusw1	equ	0xFE3
 12241                           fsr1h	equ	0xFE2
 12242                           fsr1l	equ	0xFE1
 12243                           indf2	equ	0xFDF
 12244                           postinc2	equ	0xFDE
 12245                           postdec2	equ	0xFDD
 12246                           plusw2	equ	0xFDB
 12247                           fsr2h	equ	0xFDA
 12248                           fsr2l	equ	0xFD9
 12249                           status	equ	0xFD8


Data Sizes:
    Strings     235
    Constant    130
    Data        93
    BSS         134
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      76
    BANK0           160     61     159
    BANK1           256    141     251
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> DataRead(BANK1[25]), pdust(BANK1[21]), main@alldata(BANK1[80]), main@data_test(BANK1[6]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> DataRead(BANK1[25]), pdust(BANK1[21]), main@alldata(BANK1[80]), main@data_test(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 29
		 -> pdust(BANK1[21]), main@GPSd_(BANK1[29]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> main@alldata(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> main@alldata(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> GPS_read_data@Databuf(COMRAM[25]), main@alldata(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> GPS_read_data@Databuf(COMRAM[25]), main@alldata(BANK1[80]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_42(CODE[16]), STR_22(CODE[3]), STR_20(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 21
		 -> pdust(BANK1[21]), esp8266_send@length_str(BANK1[6]), esp8266_start@port_str(COMRAM[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 25
		 -> DataRead(BANK1[25]), 

    print_ln@text	PTR unsigned char  size(2) Largest target is 25
		 -> DataRead(BANK1[25]), main@data_test(BANK1[6]), 

    print_@text	PTR unsigned char  size(2) Largest target is 21
		 -> pdust(BANK1[21]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> GPS_read_data@Databuf(COMRAM[25]), main@alldata(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> main@alldata(BANK1[80]), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    _esp8266_waitResponse@strings	PTR const unsigned char [6] size(2) Largest target is 10
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[10]), STR_30(CODE[5]), 
		 -> STR_29(CODE[6]), STR_28(CODE[3]), 

    _esp8266_waitResponse@F7014	PTR const unsigned char [6] size(2) Largest target is 10
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[10]), STR_30(CODE[5]), 
		 -> STR_29(CODE[6]), STR_28(CODE[3]), 

    _esp8266_waitFor@string	PTR unsigned char  size(2) Largest target is 8
		 -> main@wait(BANK1[8]), STR_27(CODE[3]), STR_26(CODE[5]), STR_25(CODE[6]), 
		 -> STR_14(CODE[3]), STR_12(CODE[3]), STR_5(CODE[3]), 

    _esp8266_print@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_44(CODE[10]), STR_43(CODE[4]), main@alldata(BANK1[80]), STR_41(CODE[3]), 
		 -> STR_40(CODE[3]), STR_39(CODE[3]), STR_38(CODE[10]), STR_37(CODE[3]), 
		 -> STR_36(CODE[11]), STR_35(CODE[3]), STR_34(CODE[14]), STR_24(CODE[3]), 
		 -> STR_23(CODE[14]), esp8266_send@length_str(BANK1[6]), STR_21(CODE[3]), esp8266_start@port_str(COMRAM[5]), 
		 -> STR_19(CODE[3]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), 
		 -> STR_15(CODE[14]), STR_13(CODE[11]), STR_11(CODE[11]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_8(CODE[11]), STR_7(CODE[3]), STR_6(CODE[11]), 
		 -> STR_4(CODE[3]), STR_3(CODE[4]), STR_2(CODE[9]), STR_1(CODE[5]), 

    esp8266_send@data	PTR unsigned char  size(2) Largest target is 80
		 -> main@alldata(BANK1[80]), 

    esp8266_ip@store_in	PTR unsigned char  size(2) Largest target is 4
		 -> main@ip(BANK1[4]), 

    esp8266_connect@pass	PTR unsigned char  size(2) Largest target is 10
		 -> STR_44(CODE[10]), 

    esp8266_connect@ssid	PTR unsigned char  size(2) Largest target is 4
		 -> STR_43(CODE[4]), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_Transmit_ISR(), 


Critical Paths under _main in COMRAM

    _print_ln->_strlen
    _get_pm->___ftdiv
    _print_->_strlen
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _esp8266_send->__esp8266_waitResponse
    _sprintf->_fround
    _sprintf->_scale
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftadd->_fround
    _esp8266_ip->__esp8266_waitFor
    __esp8266_waitFor->_EUSART1_Read
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ESP_Initialize->_esp8266_CIPMUX
    _ESP_Initialize->_esp8266_SLEEP
    _ESP_Initialize->_esp8266_mode
    _ESP_Initialize->_esp8266_server
    _esp8266_server->__esp8266_waitResponse
    _esp8266_mode->__esp8266_waitResponse
    _esp8266_isStarted->__esp8266_waitResponse
    _esp8266_connect->__esp8266_waitResponse
    _esp8266_SLEEP->__esp8266_waitResponse
    _esp8266_CIPMUX->__esp8266_waitResponse
    __esp8266_waitResponse->_EUSART1_Read
    __esp8266_print->_EUSART1_Write

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _get_pm->_sprintf
    _esp8266_send->_sprintf
    _sprintf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _ESP_Initialize->_esp8266_connect

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_get_pm

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               129   129      0  182078
                                             12 BANK1    129   129      0
                     _ADC_Initialize
                     _ESP_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                   __esp8266_waitFor
                         _esp8266_ip
                       _esp8266_send
                             _get_pm
                             _memset
                           _print_ln
                             _strcat
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     402
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _print_ln                                             8     5      3     732
                                             24 COMRAM     8     5      3
                      _EUSART1_Write
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     552
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _get_pm                                              59    59      0   82039
                                              0 BANK1     12    12      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                      _EUSART1_Write
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             _print_
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _print_                                               8     5      3     372
                                             24 COMRAM     8     5      3
                      _EUSART1_Write
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3074
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3693
                                             53 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    2     2      0      31
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversionResult                              4     2      2       0
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _esp8266_send                                         8     6      2   67354
                                              0 BANK1      8     6      2
                       _EUSART1_Read
                     __esp8266_print
              __esp8266_waitResponse
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     580
                                             18 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   62674
                                             25 BANK0     36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   14790
                                             53 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   14511
                                             53 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3402
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6461
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3145
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     952
                                             31 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                              4 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5274
                                             19 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4858
                                              7 BANK0     12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2953
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     155
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     738
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _esp8266_ip                                           4     2      2    4513
                                             27 COMRAM     4     2      2
                       _EUSART1_Read
                     __esp8266_print
                   __esp8266_waitFor
 ---------------------------------------------------------------------------------
 (2) __esp8266_waitFor                                     8     6      2     871
                                             19 COMRAM     8     6      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     490
                     _ADC_Initialize
                    _CCP5_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     196
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     196
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_Initialize                                      14    14      0   23540
                                              4 BANK0     14    14      0
                     _esp8266_CIPMUX
                      _esp8266_SLEEP
                    _esp8266_connect
                  _esp8266_isStarted
                       _esp8266_mode
                     _esp8266_server
 ---------------------------------------------------------------------------------
 (2) _esp8266_server                                       1     1      0    3873
                                             56 COMRAM     1     1      0
                      _EUSART1_Write
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) _esp8266_mode                                         1     1      0    3873
                                             56 COMRAM     1     1      0
                      _EUSART1_Write
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) _esp8266_isStarted                                    0     0      0    3780
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) _esp8266_connect                                      4     0      4    4022
                                              0 BANK0      4     0      4
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) _esp8266_SLEEP                                        1     1      0    3873
                                             56 COMRAM     1     1      0
                      _EUSART1_Write
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) _esp8266_CIPMUX                                       1     1      0    3873
                                             56 COMRAM     1     1      0
                      _EUSART1_Write
                     __esp8266_print
              __esp8266_waitResponse
 ---------------------------------------------------------------------------------
 (2) __esp8266_waitResponse                               37    37      0     683
                                             19 COMRAM    37    37      0
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      37
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) __esp8266_print                                       2     0      2    3097
                                             19 COMRAM     2     0      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      62
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ESP_Initialize
     _esp8266_CIPMUX
       _EUSART1_Write
       __esp8266_print
         _EUSART1_Write
       __esp8266_waitResponse
         _EUSART1_Read
     _esp8266_SLEEP
       _EUSART1_Write
       __esp8266_print
         _EUSART1_Write
       __esp8266_waitResponse
         _EUSART1_Read
     _esp8266_connect
       __esp8266_print
         _EUSART1_Write
       __esp8266_waitResponse
         _EUSART1_Read
     _esp8266_isStarted
       __esp8266_print
         _EUSART1_Write
       __esp8266_waitResponse
         _EUSART1_Read
     _esp8266_mode
       _EUSART1_Write
       __esp8266_print
         _EUSART1_Write
       __esp8266_waitResponse
         _EUSART1_Read
     _esp8266_server
       _EUSART1_Write
       __esp8266_print
         _EUSART1_Write
       __esp8266_waitResponse
         _EUSART1_Read
   _EUSART1_Initialize
     _EUSART1_SetRxInterruptHandler
     _EUSART1_SetTxInterruptHandler
   _EUSART2_Initialize
     _EUSART2_SetRxInterruptHandler
     _EUSART2_SetTxInterruptHandler
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP5_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_Initialize
     _TMR0_SetInterruptHandler
   __esp8266_waitFor
     _EUSART1_Read
   _esp8266_ip
     _EUSART1_Read
     __esp8266_print
       _EUSART1_Write
     __esp8266_waitFor
       _EUSART1_Read
   _esp8266_send
     _EUSART1_Read
     __esp8266_print
       _EUSART1_Write
     __esp8266_waitResponse
       _EUSART1_Read
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _strlen (ARG)
     _strlen
   _get_pm
     _ADC_GetConversionResult
     _ADC_IsConversionDone
     _ADC_SelectChannel
     _ADC_StartConversion
     _EUSART1_Write
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _print_
       _EUSART1_Write
       _strlen (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _strlen (ARG)
     _strlen
   _memset
   _print_ln
     _EUSART1_Write
     _strlen (ARG)
   _strcat
   _strlen

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _EUSART2_Receive_ISR *
   _EUSART2_Transmit_ISR *
   _TMR0_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     8D      FB       6       98.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3D      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      4C       1       80.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E6       9        0.0%
DATA                 0      0     1E6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul  5 12:16:31 2018

                              ?_esp8266_CIPMUX 0001                       _eusart1TxBufferRemaining 0043  
                                           l39 28C0                                   ___awdiv@sign 001E  
                          ___wmul@multiplicand 0023                                _timer0ReloadVal 0046  
                                 __CFG_CP0$OFF 000000                                   __CFG_CP1$OFF 000000  
                                 __CFG_CP2$OFF 000000                                   __CFG_CP3$OFF 000000  
                                 ___ftadd@exp1 00AF                                   ___ftadd@exp2 00AE  
                           __esp8266_print@ptr 0014                                    __CFG_LVP$ON 000000  
                                 ___ftadd@sign 00AD                                            l410 22EA  
                                          l411 22C2                                            l432 185E  
                                          l416 1DE6                                            l433 1870  
                                          l417 1E2E                                            l418 1E32  
                                          l370 1EB4                                            l515 25E4  
                                          l435 190E                                            l524 2580  
                                          l525 25A4                                            l517 260A  
                                          l437 1922                                            l701 0D1A  
                                          l526 25A2                                            l366 1E82  
                                          l710 0E94                                            l702 0D3E  
                                          l720 138E                                            l368 1EA0  
                                          l704 0D52                                            l721 13C2  
                                          l801 10FC                                            l641 1168  
                                          l723 13F0                                            l811 0C54  
                                          l707 0E60                                            l732 14BA  
                                          l724 1426                                            l804 0A70  
                                          l820 0146                                            l660 12D4  
                                          l644 117E                                            l717 14DE  
                                          l733 14D4                                            l805 0996  
                                          l821 0178                                            l389 2100  
                                          l726 1436                                            l718 1376  
                                          l830 02E8                                            l670 2518  
                                          l662 12DC                                            l654 120E  
                                          l719 1516                                            l727 146C  
                                          l831 0328                                            l823 014A  
                                          l815 0122                                            l671 2502  
                                          l808 0A4A                                            l824 070C  
                                          l832 03EE                                            l816 013C  
                                          l664 1300                                            l656 1226  
                                          l729 1484                                            l809 0BA0  
                                          l841 0454                                            l825 01CA  
                                          l817 0150                                            l657 1252  
                                          l850 054E                                            l835 0396  
                                          l827 025C                                            l659 1278  
                                          l852 0588                                            l828 02C2  
                                          l676 2452                                            l853 058C  
                                          l693 0E9E                                            l677 243C  
                                          l854 05AE                                            l846 0544  
                                          l694 0CA6                                            l855 06E0  
                                          l847 04B0                                            l695 0ED6  
                                          l864 0790                                            l856 05FE  
                                          l696 0CB8                                            l865 0824  
                                          l849 0564                                            l866 079C  
                                          l858 0702                                            l859 06EC  
                                          l699 0CF0                                            l798 102E  
                           esp8266_start@F6991 008C                                   __CFG_CPB$OFF 000000  
                                 __CFG_CPD$OFF 000000                                   print_@length 001B  
                                 ___awmod@sign 0018                                            prod 000FF3  
                                          tosl 000FFD                                            wreg 000FE8  
                                   _TXSTA1bits 000FAC                                     _TXSTA2bits 000F72  
                              _CCP5_Initialize 28D8                                    main@alldata 012B  
                                 ___ftdiv@cntr 00A3                                   ___ftdiv@sign 00A8  
                                         l1101 1D54                                           l1102 1D4A  
                                         l1104 1D88                                           l1040 1FDC  
                                         l1200 1BD2                                           l1105 1D72  
                                         l1041 1FD4                                           l1201 1BE2  
                                         l1050 21A2                                           l1107 1DB0  
                                         l1051 21AE                                           l1203 1BFA  
                                         l1108 1DA6                                           l1132 1578  
                                         l1220 1AFE                                           l1044 1FFC  
                                         l1204 1C0A                                           l1141 1608  
                                         l1221 1AEE                                           l1045 2006  
                                         l1037 1FAE                                           l1053 21C4  
                                         l1214 248C                                           l1046 2014  
                                         l1038 1FBE                                           l1054 21BC  
                                         l1071 196C                                           l1208 2820  
                                         l1160 16AC                                           l1136 15A2  
                                         l1072 19AE                                           l1081 1A40  
                                         l1073 19DE                                           l1057 21DC  
                                         l1146 15FE                                           l1226 1B22  
                                         l1218 1A86                                           l1082 1A34  
                                         l1058 21E6                                           l1155 163C  
                                         l1147 15F4                                           l1227 1B16  
                                         l1075 1A1C                                           l1059 21F4  
                                         l1331 26B8                                           l1156 1632  
                                         l1076 1A0C                                           l1180 17B8  
                                         l1332 26A8                                           l1229 1B3E  
                                         l1069 194E                                           l1173 16FE  
                                         l1165 1C6E                                           l1190 1F3A  
                                         l1158 1660                                           l1254 204C  
                                         l1191 1F6A                                           l1159 167C  
                                         l1255 2040                                           l1175 172A  
                                         l1167 1C96                                           l1264 221C  
                                         l1176 1764                                           l1168 1CD4  
                                         l1265 2210                                           l1185 17EC  
                                         l1177 178C                                           l1169 1CFA  
                                         l1258 2080                                           l1186 17E0  
                                         l1259 208E                                           l1275 2276  
                                         l1179 17C8                                           l1268 2244  
                                         l1276 226A                                           l1269 2252  
                                         l1197 1B78                                           l1461 23FE  
                                         l1462 23FA                                           l1199 1BA0  
                                         l1464 2416                                           l1465 240E  
                                         l1484 2542                                           l1485 253E  
                                         l6000 0328                                           l6008 0370  
                                         l6106 0734                                           l6028 0458  
                                         l6126 079C                                           l6304 13C2  
                                         l6056 054E                                           l5258 1F96  
                                         l6252 1E98                                           l5298 2570  
                                         l5562 1868                                           l4852 26A8  
                                         l6374 0CDC                                ?_esp8266_server 0001  
                                         l6594 1308                                           STR_1 7FD0  
                                         STR_2 7FA2                                           STR_3 7FE6  
                                         STR_5 7FF5                                           STR_6 7F6E  
                                         STR_7 7FCD                                           STR_8 7F63  
                                         STR_9 7FE2                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         u5020 156A                                           u5120 1610  
                                         u5050 1594                                           u5211 1B88  
                                         u6100 0370                                           u6020 0202  
                                         u5150 1644                                           u5080 15D2  
                                         u5401 180E                                           u6025 01F8  
                                         u5410 1824                                           u5340 21C8  
                                         u6140 0490                                           u6060 02FA  
                                         u5421 1838                                           u6301 1C56  
                                         u5430 184E                                           u6070 033A  
                                         u5191 1B60                                           u6400 1EFC  
                                         u5280 1FE0                                           u6240 076C  
                                         u6321 1C7E                                           u5370 22E2  
                                         u6170 0572                                           u6411 20AA  
                                         u5380 230A                                           u4900 1DBA  
                                         u6260 0834                                           u6180 0582  
                                         u5470 1926                                           u5710 1A46  
                                         u6270 084C                                           u5640 17F2  
                                         u5377 22D8                                           u5561 16E2  
                                         u5387 2300                                           u4860 1D3C  
                                         u5581 170E                                           u6701 11DC  
                                         u6390 1EF2                                           u5830 1B28  
                                         u5920 28FE                                           u5771 1A6A  
                                         u5940 1E24                                           u5860 2050  
                                         u4981 1536                                           u5790 1AA4  
                                         u4991 154A                                           u5960 1E66  
                                         u6681 11B8                                           u5890 2220  
                                         u5947 1E1A                                           u5795 1A9C  
                                         u6691 11CA                                           u5967 1E5C  
                                         _WPUB 000F61                          ??_EUSART2_Receive_ISR 0001  
                                _EUSART1_Write 256E                                           _main 113E  
                                 ___ftpack@arg 0013                                  ?_EUSART1_Read 0001  
                                 ___ftpack@exp 0016                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                         btemp 004D                                  __CFG_BORV$190 000000  
                                         prodh 000FF4                                           prodl 000FF3  
                                         start 0112                                  __CFG_IESO$OFF 000000  
                                 print_ln@text 0019                   __end_of_EUSART2_Transmit_ISR 2670  
                                 _sprintf$2238 00C3                                   ___ftmul@cntr 0034  
                                 ___param_bank 000000                                   ___ftmul@sign 0035  
                             ?_esp8266_connect 009D                                   ___fttol@exp1 00AF  
                                 ___fttol@lval 00AB                        __end_of_TMR0_Initialize 2872  
               __size_of_OSCILLATOR_Initialize 0012                  __end_of_OSCILLATOR_Initialize 28C6  
                                        ?_main 0001                                __end_of___awdiv 201E  
                              __end_of___ftadd 16D2                                          STR_10 7FDE  
                                        STR_11 7F4D                                          STR_20 7FFB  
                                        STR_13 7F58                                          STR_14 7FF5  
                                        STR_22 7FFB                                          STR_30 7FD5  
                                        STR_23 7F31                                          STR_15 7F23  
                                        STR_31 7F98                                          STR_24 7FCD  
                                        STR_40 7FF8                                          STR_16 7FEA  
                                        STR_32 7FAB                                          STR_17 7FEE  
                                        STR_25 7FBF                                          STR_33 7FB2  
                                        STR_26 7FCB                                          STR_34 7F3F  
                                        STR_42 7F13                                          STR_35 7FCD  
                                        STR_19 7FF2                                          STR_43 7FDA  
                                        STR_44 7F84                                          STR_36 7F79  
                                        STR_28 7FF5                                __end_of___awmod 21FE  
                                        STR_37 7FCD                                          STR_45 7FB9  
                                        STR_29 7FC5                                          STR_38 7F8E  
                                        STR_39 7FCD                                __end_of___ftdiv 1D2C  
                              __end_of___ftneg 282E                                __end_of___lldiv 20A0  
                              __end_of___ftmul 1C44                                          _T0CON 000FD5  
                              ___awdiv@divisor 001B                                __end_of___llmod 2264  
                              __end_of___ftsub 24B6                                __end_of___fttol 1B50  
                               __CFG_DEBUG$OFF 000000                                          i2l120 266C  
                                        i2l121 2668                                          i2l126 26D2  
                                        i2l302 0078                                          i2l127 26F2  
                                        i2l304 008E                                          i2l306 00A6  
                                        i2l530 269A                                          i2l531 2696  
                                        i2l536 26FE                                          i2l537 271E  
                                        i2l299 005E                                ___awdiv@counter 001D  
                                        _TMR0H 000FD7                                          _TMR0L 000FD6  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94               __size_of_ADC_GetConversionResult 0014  
            __size_of_TMR0_SetInterruptHandler 000A                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                                  __CFG_WRT2$OFF 000000  
                    ?_TMR0_SetInterruptHandler 0013                                  __CFG_WRT3$OFF 000000  
                                 ___lltoft@exp 0023                          __esp8266_waitResponse 1804  
                         _EUSART1_Transmit_ISR 2670                                 __CFG_EBTR0$OFF 000000  
                               __CFG_FCMEN$OFF 000000                                 __CFG_EBTR1$OFF 000000  
                               __CFG_EBTR2$OFF 000000                                 __CFG_EBTR3$OFF 000000  
                             __end_of_TMR0_ISR 28F6                                  __CFG_WRTB$OFF 000000  
                                __CFG_WRTC$OFF 000000                                  __CFG_WRTD$OFF 000000  
                               __CFG_EBTRB$OFF 000000                                __end_of_dpowers 7EB9  
                                        _scale 085A                                          _pdust 01E2  
                           __CFG_MCLRE$EXTMCLR 000000                                  ___ftpack@sign 0017  
                               ?_EUSART1_Write 0001                                          pclath 000FFA  
                                        tablat 000FF5                                 ??_EUSART1_Read 0013  
                                        plusw1 000FE3                                          plusw2 000FDB  
                                        status 000FD8                                          wtemp6 004E  
                              __end_of_sprintf 085A                                 __CFG_HFOFST$ON 000000  
                               __CFG_PBADEN$ON 000000          __end_of_EUSART2_SetTxInterruptHandler 2916  
       __size_of_EUSART2_SetTxInterruptHandler 000A                  _EUSART2_SetTxInterruptHandler 290C  
                              __initialization 211C                     __end_of_EUSART1_Initialize 23AA  
                                 __end_of_main 1336                                  main@data_test 0183  
                  ?_INTERRUPT_InterruptManager 0001                                         ??_main 010C  
                                ___fttol@sign1 00AA                        __end_of_CCP5_Initialize 28E8  
                                __activetblptr 000002                           __size_of__tdiv_to_l_ 0132  
                        ?_EUSART1_Transmit_ISR 0001                  __size_of_ADC_IsConversionDone 000C  
                   __end_of_EUSART2_Initialize 235E                                         _ADCON0 000FC2  
                                       _ADCON1 000FC1                                         _ADCON2 000FC0  
                     _eusart2TxBufferRemaining 004A                               ___llmod@dividend 0020  
                                       ?_scale 0036                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _CCPR5H 000F56  
                                       _CCPR5L 000F55                               ___awdiv@dividend 0019  
                                       _ANSELA 000F38                                         _ANSELB 000F39  
                                       _ANSELC 000F3A                               __end_of___ftpack 1DDA  
                        __size_of_esp8266_mode 0028                               __end_of___lltoft 22C0  
                        __size_of_esp8266_send 007C                             GPS_read_data@F7061 00EF  
                           GPS_read_data@F7063 00E6                             GPS_read_data@F7059 01AA  
                           GPS_read_data@F7067 00F8                                 __CFG_WDTEN$OFF 000000  
                                       _RCREG1 000FAE                                         _RCREG2 000F74  
                             __end_of___lwtoft 280A                                         _RCSTA1 000FAB  
                                       _RCSTA2 000F71                                         _OSCCON 000FD3  
                                       _PLLRDY 007E97                                         _SPBRG1 000FAF  
                                       _SPBRG2 000F75                                         _TXREG1 000FAD  
                                       _TXREG2 000F73                                 __esp8266_print 22C0  
                                       _TXSTA1 000FAC                                         _TXSTA2 000F72  
                               __CFG_XINST$OFF 000000                               __end_of__powers_ 7EE0  
                                       ___ftge 1F0A                                         ___wmul 279A  
                                    ??___awdiv 001D                                      ??___ftadd 00AA  
                               __CFG_STVREN$ON 000000                                      ??___awmod 0017  
                                    ??___ftdiv 0036                                      ??___ftneg 0016  
                                    ??___lldiv 001B                                      ??___ftmul 002D  
                                    ??___llmod 0028                                      ??___ftsub 0039  
                                    ??___fttol 00A5                                         _get_pm 0C7A  
                             ?_TMR0_Initialize 0001                                         _memset 269E  
                                       _fround 0EE4                                         clear_0 2162  
                                       clear_1 216E                                         clear_2 217A  
                             ___awdiv@quotient 001F                                ___awmod@divisor 0015  
                              ___awmod@counter 0017                                         _print_ 24F8  
                                       main@ip 01F7                                         _strcat 23F0  
                                       _strlen 2534                          ___ftmul@f3_as_product 0031  
                       ?__esp8266_waitResponse 0001                                   _esp8266_mode 2722  
                                 _esp8266_send 20A0                            get_pm@oldtimecount1 0102  
                          get_pm@oldtimecount2 0104                            get_pm@oldtimecount3 0106  
                          get_pm@oldtimecount4 0108                                   __mediumconst 7E90  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                               __end_of_print_ln 2474  
                         _EUSART2_Transmit_ISR 2642                                ??_EUSART1_Write 0013  
     TMR0_SetInterruptHandler@InterruptHandler 0013                                      ??_sprintf 00BD  
                              _eusart1RxBuffer 0060                                 print_ln@length 001B  
                __size_of_INTERRUPT_Initialize 0004                                _eusart2RxBuffer 0070  
                              _eusart1TxBuffer 0068                         __end_of__esp8266_print 2312  
                            _SYSTEM_Initialize 282E                                _eusart2TxBuffer 0078  
                                   __accesstop 0060                        __end_of__initialization 2180  
                                   ___ftadd@f1 00A4                                     ___ftadd@f2 00A7  
                             ??_esp8266_CIPMUX 0039                                     ___ftge@ff1 0013  
                                   ___ftge@ff2 0016                              ?__esp8266_waitFor 0014  
                           ?_SYSTEM_Initialize 0001                                  ___rparam_used 000001  
                                   ___ftdiv@f1 009D                                     ___ftdiv@f2 00A0  
                                   ___ftdiv@f3 00A4                                     ___ftneg@f1 0013  
          __esp8266_waitResponse@continue_loop 0037                             ??__esp8266_waitFor 0016  
                                   ___ftmul@f1 0027                                     ___ftmul@f2 002A  
                                   ___ftsub@f1 00B0                                     ___ftsub@f2 00B3  
                                   ___fttol@f1 00A1                   __size_of_ADC_StartConversion 0004  
                               __pcstackCOMRAM 0001                                   __pidataBANK0 27C0  
                                 __pidataBANK1 25A8                            ??_SYSTEM_Initialize 0015  
                                    ?_TMR0_ISR 0001                                     ___lltoft@c 001B  
                                __end_of_scale 0C7A                 ?_EUSART2_SetTxInterruptHandler 0013  
                      __esp8266_waitFor@so_far 001B                                     ___lwtoft@c 001B  
                      __esp8266_waitFor@string 0014                           __end_of_EUSART1_Read 2614  
                             ?_CCP5_Initialize 0001                         ??_EUSART1_Transmit_ISR 0001  
                      _ADC_GetConversionResult 28A0                                  _voltsMeasured 0094  
                                   __div_to_l_ 1930                              _esp8266_isStarted 28C6  
                             ??_esp8266_server 0039                          ?_EUSART2_Transmit_ISR 0001  
                  __end_of_EUSART1_Receive_ISR 2722                             ?_esp8266_isStarted 0001  
                              __div_to_l_@exp1 001E                                __div_to_l_@cntr 001D  
                                   _esp8266_ip 1E76                                        ??_scale 0039  
                    __end_of_SYSTEM_Initialize 2850                                __div_to_l_@quot 0019  
                                _eusart1RxHead 0042                                  _eusart2RxHead 0049  
                                _eusart1TxHead 0045                                  _eusart1RxTail 0041  
                                _eusart2TxHead 004C                                     __pbssBANK0 0060  
                                   __pbssBANK1 01C5                                  _eusart2RxTail 0048  
                                _eusart1TxTail 0044              _EUSART1_TxDefaultInterruptHandler 0098  
                                _eusart2TxTail 004B                ??_EUSART1_SetRxInterruptHandler 0015  
                              ?__esp8266_print 0014                                __CFG_PLLCFG$OFF 000000  
              __esp8266_waitResponse@responses 0029                            ??_esp8266_isStarted 0039  
                __esp8266_waitResponse@lengths 0023                                  __div_to_l_@f1 0013  
                                __div_to_l_@f2 0016                             __CFG_CCP2MX$PORTC1 000000  
                __esp8266_waitResponse@strings 0017                                        ?___ftge 0013  
             __end_of_TMR0_SetInterruptHandler 290C                                        ?___wmul 0021  
                                   ??_TMR0_ISR 0001                             __CFG_CCP3MX$PORTB5 000000  
                       __size_of_esp8266_SLEEP 0028                                        ?_get_pm 0001  
                                      _CCP5CON 000F54                                        ?_memset 0013  
                                      ?_fround 0036                                      ?___ftpack 0013  
                      __size_of_ESP_Initialize 01EE                                        ?_print_ 0019  
                                    ?___lltoft 001B                      __end_of_esp8266_isStarted 28D8  
                      __size_of_ADC_Initialize 0016                                        ?_strcat 0013  
                                      ?_strlen 0013                                      ?___lwtoft 001B  
                                      _OSCCON2 000FD2                    __end_of_EUSART2_Receive_ISR 26F6  
                                      _OSCTUNE 000F9B                                        _SPBRGH1 000FB0  
                                      _SPBRGH2 000F76                        __esp8266_waitResponse@i 0038  
                              __CFG_PWRTEN$OFF 000000                              __end_of__npowers_ 7F07  
                                      __Hparam 0000                                     _scale$2237 009D  
                                      __Lparam 0000                                __size_of___ftge 0090  
                                    ?_print_ln 0019                                        ___awdiv 1F9A  
                                      ___ftadd 1524                                        ___awmod 218E  
                                      ___ftdiv 1C44                                        ___ftneg 280A  
                                      ___lldiv 201E                                __size_of___wmul 0026  
                                      ___ftmul 1B50                                        ___llmod 21FE  
                                      ___ftsub 2474                                        ___fttol 1A58  
                              __size_of_get_pm 026A                      ??_ADC_GetConversionResult 0015  
                                      __pcinit 211C                                     ??___ftpack 0018  
                              __size_of_memset 002C                                __size_of_fround 025A  
                                      __ramtop 0600                                     ??___lltoft 001F  
                                      __ptext0 113E                                        __ptext1 23F0  
                                      __ptext2 2432                                        __ptext3 269E  
                                      __ptext4 0C7A                                        __ptext5 24F8  
                                      __ptext6 27E6                                        __ptext7 1C44  
                                      __ptext8 2934                                        __ptext9 2872  
                              __size_of_print_ 003C                                     ??___lwtoft 001E  
                                    _T0CONbits 000FD5                                __size_of_strcat 0042  
                              __size_of_strlen 003A                                    ?__div_to_l_ 0013  
                                      _dpowers 7E91                          _OSCILLATOR_Initialize 28B4  
                       ??_EUSART2_Transmit_ISR 0001                       __size_of_esp8266_connect 0042  
                             ___awmod@dividend 0013                             _EUSART1_Initialize 235E  
                     ??_PIN_MANAGER_Initialize 0013                                    ?_esp8266_ip 001C  
                   __size_of_SYSTEM_Initialize 0022                                        _sprintf 0116  
                                _esp8266_SLEEP 274A                           end_of_initialization 2180  
                          ?_EUSART1_Initialize 0001                                        memset@c 0015  
                                      memset@n 0017                                        memset@p 0019  
                                __Lmediumconst 7E90                              esp8266_SLEEP@mode 0039  
                              ___lldiv@divisor 0017          __end_of_EUSART1_SetRxInterruptHandler 2934  
       __size_of_EUSART1_SetRxInterruptHandler 000A                  _EUSART1_SetRxInterruptHandler 292A  
                 __end_of_ADC_IsConversionDone 2902                                ___lldiv@counter 001F  
                             esp8266_mode@mode 0039                             _EUSART2_Initialize 2312  
                                      print_@i 001F                                        postdec1 000FE5  
                                      postdec2 000FDD                                     ??_print_ln 001C  
                                      postinc0 000FEE                                        postinc1 000FE6  
                                      postinc2 000FDE                          __size_of_EUSART1_Read 0034  
                             esp8266_send@data 0100                                 __tdiv_to_l_@f1 0013  
                               __tdiv_to_l_@f2 0016                           ??_EUSART1_Initialize 0015  
                          ?_EUSART2_Initialize 0001                                        strlen@s 0013  
                      ??__esp8266_waitResponse 0014                                  ??__tdiv_to_l_ 0019  
                     _TMR0_SetInterruptHandler 2902                     __size_of_esp8266_isStarted 0012  
                          _ADC_StartConversion 2934                                     get_pm@TASK 010A  
                               ?_esp8266_SLEEP 0001                            EUSART1_Write@txData 0013  
                         ??_EUSART2_Initialize 0015                                     main@m_TASK 0189  
                                  ___ftdiv@exp 00A7                                   _EUSART1_Read 25E0  
                          __size_of__div_to_l_ 0128                                    ___ftmul@exp 0030  
                         ?_ADC_StartConversion 0001                   __end_of_INTERRUPT_Initialize 293C  
                               __end_of___ftge 1F9A                            __size_of_esp8266_ip 0094  
                               __end_of___wmul 27C0                                 _ESP_Initialize 1336  
                            __size_of_TMR0_ISR 000E                                 __end_of_get_pm 0EE4  
                               _ADC_Initialize 288A                      __size_of__esp8266_waitFor 009C  
                       ?_OSCILLATOR_Initialize 0001                                 __end_of_memset 26CA  
                               __end_of_fround 113E                       __esp8266_waitFor@counter 0019  
                          esp8266_connect@pass 009F                            esp8266_connect@ssid 009D  
                               __end_of_print_ 2534                                 __end_of_strcat 2432  
                               __end_of_strlen 256E                            start_initialization 211C  
                     __size_of_TMR0_Initialize 0022                               ??__esp8266_print 0016  
              __size_of_PIN_MANAGER_Initialize 002E                            __end_of__tdiv_to_l_ 1804  
                       esp8266_send@length_str 0102  EUSART1_SetRxInterruptHandler@interruptHandler 0013  
EUSART1_SetTxInterruptHandler@interruptHandler 0013  EUSART2_SetRxInterruptHandler@interruptHandler 0013  
EUSART2_SetTxInterruptHandler@interruptHandler 0013                              ??_esp8266_connect 0039  
                        __end_of_EUSART1_Write 25A8                                    _calcVoltage 009A  
                              ___llmod@divisor 0024                                ___llmod@counter 0028  
                        ??_ADC_StartConversion 0013                                       ??___ftge 0019  
                                     ??___wmul 0025                         __end_of_ESP_Initialize 1524  
               ?_EUSART1_SetRxInterruptHandler 0013                         __end_of_ADC_Initialize 28A0  
                                     ??_get_pm 0100                                    __pdataBANK0 00DA  
                                  __pdataBANK1 018D                                       ??_memset 0019  
                                     ??_fround 0039                                       ??_print_ 001C  
                                sprintf@tmpval 00D2                                       ??_strcat 0017  
                                     ??_strlen 0015                                 _eusart1RxCount 0040  
                                   fround@prec 00A3                                 _eusart2RxCount 0047  
                            __size_of___ftpack 00AE                              __size_of___lltoft 005C  
                                  __pbssCOMRAM 003A              _EUSART1_RxDefaultInterruptHandler 0096  
                              ??_esp8266_SLEEP 0039                              __size_of___lwtoft 0024  
                __size_of_EUSART1_Transmit_ISR 002E                                  __pcstackBANK0 009D  
                                __pcstackBANK1 0100                           _ADC_IsConversionDone 28F6  
                     __size_of_CCP5_Initialize 0010                 __esp8266_waitResponse@received 0035  
              ??_EUSART1_SetTxInterruptHandler 0015                ??_EUSART2_SetRxInterruptHandler 0015  
                 __size_of_EUSART1_Receive_ISR 002C                                    sprintf@flag 00C8  
                                  sprintf@fval 00D6                                    sprintf@prec 00CA  
                        _TMR0_InterruptHandler 003A                 __esp8266_waitResponse@response 0036  
                 __esp8266_waitResponse@so_far 002F                         _PIN_MANAGER_Initialize 2614  
                             main@oldtimecount 018B                                      __pintcode 0008  
                            _ADC_SelectChannel 2872                                  __pmediumconst 7E90  
                                     ?___awdiv 0019                                       ?___ftadd 00A4  
                                     ?___awmod 0013                                       ?___ftdiv 009D  
                              ?_ESP_Initialize 0001                                       ?___ftneg 0013  
                                     ?___lldiv 0013                                       ?___ftmul 0027  
                                     ?___llmod 0020                                       ?___ftsub 00B0  
                                    __npowers_ 7EE0                                       ?___fttol 00A1  
                              ?_ADC_Initialize 0001                             ?_ADC_SelectChannel 0001  
            _EUSART2_TxDefaultInterruptHandler 003E                        __size_of_esp8266_CIPMUX 0028  
                            __size_of_print_ln 0042                   ??_INTERRUPT_InterruptManager 0001  
                             __CFG_PRICLKEN$ON 000000                                    __tdiv_to_l_ 16D2  
                           esp8266_CIPMUX@mode 0039                                   ??__div_to_l_ 0019  
                                     _BAUDCON1 000FB8                                       _BAUDCON2 000F70  
                          ??_ADC_SelectChannel 0013                          ?_ADC_IsConversionDone 0001  
                           esp8266_ip@received 001F                                   ??_esp8266_ip 001E  
                                     ?_sprintf 00B6                      __esp8266_waitFor@received 0018  
                               __size_of_scale 0420                           _INTERRUPT_Initialize 2938  
                            ??_TMR0_Initialize 0015                   __size_of_EUSART2_Receive_ISR 002C  
                               ___wmul@product 0025                        __size_of_esp8266_server 0046  
                                     _LATAbits 000F89                                       _PIE1bits 000F9D  
                                     _PIE3bits 000FA3                      __end_of_ADC_SelectChannel 288A  
                           esp8266_ip@store_in 001C                                       _ESP_flag 01C5  
          __size_of_INTERRUPT_InterruptManager 010A                     ??_TMR0_SetInterruptHandler 0015  
                                     _PIR1bits 000F9E                             __end_of__div_to_l_ 1A58  
                                     i2u441_48 0098                                       i2u435_48 006C  
                                     i2u444_48 00B0                                       i2u444_49 00C6  
                                     _PIR3bits 000FA4                                       i2u438_48 0082  
                                     _RCONbits 000FD0                               __CFG_WDTPS$32768 000000  
                                    main@F7011 01BF                                      main@F7013 01B7  
                                    main@F7015 018D                                       _TMR0_ISR 28E8  
                                    _timecount 01C7                                      main@GPSd_ 010E  
                           __end_of_esp8266_ip 1F0A                               __esp8266_waitFor 1DDA  
                                   _ADCON0bits 000FC2                              ___wmul@multiplier 0021  
               __size_of__esp8266_waitResponse 012C                  __end_of__esp8266_waitResponse 1930  
                     ADC_SelectChannel@channel 0014                                     print_@text 0019  
                                     _DataRead 01C9                                  ?_esp8266_mode 0001  
                                ?_esp8266_send 0100                  __size_of_EUSART2_Transmit_ISR 002E  
                                  _INTCON2bits 000FF1                                      copy_data0 2130  
                                    copy_data1 2150                          ?_INTERRUPT_Initialize 0001  
                        EUSART1_Read@readValue 0013                              ??_CCP5_Initialize 0013  
                                  esp8266_ip@i 001E          __end_of_EUSART1_SetTxInterruptHandler 292A  
       __size_of_EUSART1_SetTxInterruptHandler 000A                  _EUSART1_SetTxInterruptHandler 2920  
                                     __Hrparam 0000          __end_of_EUSART2_SetRxInterruptHandler 2920  
       __size_of_EUSART2_SetRxInterruptHandler 000A                  _EUSART2_SetRxInterruptHandler 2916  
                                     __Lrparam 0000                       ?_ADC_GetConversionResult 0013  
                           __CFG_BOREN$SBORDIS 000000                              __CFG_P2BMX$PORTB5 000000  
                  __esp8266_waitResponse@F7010 0080            __end_of__esp8266_waitResponse@F7012 7F13  
                  __esp8266_waitResponse@F7012 7F0D                    __esp8266_waitResponse@F7014 00DA  
          __end_of__esp8266_waitResponse@F7016 7F0D                    __esp8266_waitResponse@F7016 7F07  
                      ??_OSCILLATOR_Initialize 0013                               __size_of___awdiv 0084  
                             __size_of___ftadd 01AE                               __size_of___awmod 0070  
                             __size_of___ftdiv 00E8                               __size_of___ftneg 0024  
                             __size_of___lldiv 0082                               __size_of___ftmul 00F4  
                             __size_of___llmod 0066                               __size_of___ftsub 0042  
                             __size_of___fttol 00F8                    __size_of_EUSART1_Initialize 004C  
                                  _dustDensity 0091                                       ___ftpack 1D2C  
                                  _fround$2235 00A0                                    _fround$2236 009D  
                                     ___lltoft 2264                                _esp8266_connect 24B6  
                                     ___lwtoft 27E6                                 ??_esp8266_mode 0039  
                               ??_esp8266_send 0039                         ??_ADC_IsConversionDone 0013  
                                   sprintf@exp 00D0                                     sprintf@val 00CC  
                                   strcat@from 0015                                       __ptext10 28F6  
                                     __ptext11 28A0                                       __ptext20 1F9A  
                                     __ptext12 20A0                                       __ptext21 16D2  
                                     __ptext13 2534                                       __ptext30 280A  
                                     __ptext22 1930                                       __ptext14 0116  
                                     __ptext31 1F0A                                       __ptext23 2264  
                                     __ptext15 085A                                       __ptext40 2312  
                                     __ptext32 1E76                                       __ptext24 21FE  
                                     __ptext16 0EE4                                       __ptext41 290C  
                                     __ptext33 1DDA                                       __ptext25 201E  
                                     __ptext17 279A                                       __ptext50 2722  
                                     __ptext42 2916                                       __ptext34 282E  
                                     __ptext26 1A58                                       __ptext18 1B50  
                                     __ptext51 28C6                                       __ptext43 235E  
                                     __ptext35 2850                                       __ptext27 2474  
                                     __ptext19 218E                                       __ptext60 28E8  
                                     __ptext52 24B6                                       __ptext44 2920  
                                     __ptext36 2902                                       __ptext28 1524  
                                     __ptext61 2642                                       __ptext53 274A  
                                     __ptext45 292A                                       __ptext37 2614  
                                     __ptext29 1D2C                                       __ptext62 26CA  
                                     __ptext54 2772                                       __ptext46 28D8  
                                     __ptext38 28B4                                       __ptext63 2670  
                                     __ptext55 1804                                       __ptext47 288A  
                                     __ptext39 2938                                       __ptext64 26F6  
                                     __ptext56 25E0                                       __ptext48 1336  
                                     __ptext65 0000                                       __ptext57 22C0  
                                     __ptext49 23AA                                       __ptext58 256E  
                                     __powers_ 7EB9                               __size_of_sprintf 0744  
                  __size_of_EUSART2_Initialize 004C                         ESP_Initialize@ESP_TASK 00AD  
                                __size_of_main 01F8                   _TMR0_DefaultInterruptHandler 000000  
                   __size_of_ADC_SelectChannel 0018                                       _print_ln 2432  
                                     int$flags 004D                                 _esp8266_CIPMUX 2772  
           __end_of_INTERRUPT_InterruptManager 0112                     _INTERRUPT_InterruptManager 0008  
                                     main@wait 017B                                      print_ln@i 001F  
                          _EUSART1_Receive_ISR 26F6                                     _INTCONbits 000FF2  
                       ??_INTERRUPT_Initialize 0013                                       memset@p1 0013  
                                     scale@scl 00A0                                       intlevel2 0000  
                                    sprintf@ap 00C6                               __tdiv_to_l_@exp1 0021  
                             __tdiv_to_l_@cntr 0020                                      sprintf@sp 00B6  
                             __tdiv_to_l_@quot 001C                           ?_EUSART1_Receive_ISR 0001  
                  __end_of_ADC_StartConversion 2938                                 _esp8266_server 23AA  
                             ___lldiv@dividend 0013                        ?_PIN_MANAGER_Initialize 0001  
              __end_of_ADC_GetConversionResult 28B4                                     _RCSTA1bits 000FAB  
                                   _RCSTA2bits 000F71                               ??_ESP_Initialize 00A1  
                 __end_of_EUSART1_Transmit_ISR 269E                               ??_ADC_Initialize 0013  
                  ESP_Initialize@oldtimecount1 00A7                    ESP_Initialize@oldtimecount2 00A9  
                  ESP_Initialize@oldtimecount3 00A5                    ESP_Initialize@oldtimecount4 00AB  
                  ESP_Initialize@oldtimecount5 00A3                              esp8266_send@F6994 0086  
                       __end_of_esp8266_CIPMUX 279A                        __end_of_esp8266_connect 24F8  
               ?_EUSART1_SetTxInterruptHandler 0013                 ?_EUSART2_SetRxInterruptHandler 0013  
                       __size_of_EUSART1_Write 003A                                   ?__tdiv_to_l_ 0013  
                          _EUSART2_Receive_ISR 26CA                                       sprintf@c 00D9  
                                     sprintf@f 00B8                                       strcat@cp 0017  
                                     strcat@to 0013                               ___lldiv@quotient 001B  
                              _TMR0_Initialize 2850                                       strlen@cp 0017  
                            __CFG_T3CMX$PORTC0 000000                          __end_of_esp8266_SLEEP 2772  
                       __end_of_esp8266_server 23F0                          ??_EUSART1_Receive_ISR 0001  
               __end_of_PIN_MANAGER_Initialize 2642                ??_EUSART2_SetTxInterruptHandler 0015  
                         ?_EUSART2_Receive_ISR 0001                       __end_of__esp8266_waitFor 1E76  
                            __CFG_FOSC$INTIO67 000000                        __size_of__esp8266_print 0052  
                         __end_of_esp8266_mode 274A                           __end_of_esp8266_send 211C  
            _EUSART2_RxDefaultInterruptHandler 003C                             esp8266_server@mode 0039  
